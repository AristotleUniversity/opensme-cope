package eu.opensme.cope.recommenders.entities;
// Generated 11 ��� 2011 11:25:48 �� by Hibernate Tools 3.2.1.GA

import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Packages generated by hbm2java
 */
@Entity
@Table(name = "packages", catalog = "dependencies")
public class PackageAnalysis implements java.io.Serializable {

    private Long packageid;
    private Project project;
    private String name;
    private String sources;
    private Integer packageSize;
    private Integer usedBy;
    private Integer usesInternal;
    private Integer usesExternal;
    private Integer layer;
    private Set<PackageAnalysis> packagesForDependency = new HashSet(0);
    private Set<PackageAnalysis> packagesForDependee = new HashSet(0);
    private Set<ClassAnalysis> classes = new HashSet(0);

    public PackageAnalysis() {
    }

    public PackageAnalysis(Project project) {
        this.project = project;
    }

    public PackageAnalysis(Project project, String name, String sources, Integer size,
            Integer usedBy, Integer usesInternal, Integer usesExternal, Integer layer,
            Set<PackageAnalysis> packagesForDependency, Set<PackageAnalysis> packagesForDependee,
            Set<ClassAnalysis> classes) {
        this.project = project;
        this.name = name;
        this.sources = sources;
        this.packageSize = size;
        this.usedBy = usedBy;
        this.usesInternal = usesInternal;
        this.usesExternal = usesExternal;
        this.layer = layer;
        this.packagesForDependency = packagesForDependency;
        this.packagesForDependee = packagesForDependee;
        this.classes = classes;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "packageid", unique = true, nullable = false)
    public Long getPackageid() {
        return this.packageid;
    }

    public void setPackageid(Long packageid) {
        this.packageid = packageid;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "projectid", nullable = false)
    public Project getProject() {
        return this.project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    @Column(name = "name", length = 200)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "sources", length = 45)
    public String getSources() {
        return this.sources;
    }

    public void setSources(String sources) {
        this.sources = sources;
    }

    @Column(name = "\"size\"")
    public Integer getPackageSize() {
        return this.packageSize;
    }

    public void setPackageSize(Integer packageSize) {
        this.packageSize = packageSize;
    }

    @Column(name = "usedBy")
    public Integer getUsedBy() {
        return this.usedBy;
    }

    public void setUsedBy(Integer usedBy) {
        this.usedBy = usedBy;
    }

    @Column(name = "usesInternal")
    public Integer getUsesInternal() {
        return this.usesInternal;
    }

    public void setUsesInternal(Integer usesInternal) {
        this.usesInternal = usesInternal;
    }

    @Column(name = "usesExternal")
    public Integer getUsesExternal() {
        return this.usesExternal;
    }

    public void setUsesExternal(Integer usesExternal) {
        this.usesExternal = usesExternal;
    }

    @Column(name = "layer")
    public Integer getLayer() {
        return this.layer;
    }

    public void setLayer(Integer layer) {
        this.layer = layer;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "packageinternaldependencies", catalog = "dependencies", joinColumns = {
        @JoinColumn(name = "dependee", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "dependency", nullable = false, updatable = false)})
    public Set<PackageAnalysis> getPackagesForDependency() {
        return this.packagesForDependency;
    }

    public void setPackagesForDependency(Set<PackageAnalysis> packagesForDependency) {
        this.packagesForDependency = packagesForDependency;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "packageinternaldependencies", catalog = "dependencies", joinColumns = {
        @JoinColumn(name = "dependency", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "dependee", nullable = false, updatable = false)})
    public Set<PackageAnalysis> getPackagesForDependee() {
        return this.packagesForDependee;
    }

    public void setPackagesForDependee(Set<PackageAnalysis> packagesForDependee) {
        this.packagesForDependee = packagesForDependee;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "packageAnalysis")
    public Set<ClassAnalysis> getClasses() {
        return this.classes;
    }

    public void setClasses(Set<ClassAnalysis> classes) {
        this.classes = classes;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        Long id = this.getPackageid();
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof PackageAnalysis)) {
            return false;
        }
        PackageAnalysis other = (PackageAnalysis) object;
        Long id = this.getPackageid();
        Long otherId = other.getPackageid();
        if ((id == null && otherId != null) || (id != null && !id.equals(otherId))) {
            return false;
        }
        return true;
    }
}
