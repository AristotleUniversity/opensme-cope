/**
 * ComponentSuggestionPanel.java
 *
 * @author Apostolos Kritikos <akritiko@csd.auth.gr> Created on 30 Νοε 2011,
 * 2:37:47 μμ
 */
package eu.opensme.cope.ui;

import eu.opensme.cope.domain.GeneratedComponent;
import eu.opensme.cope.domain.ReuseProject;
import eu.opensme.cope.graph.gexf.SourceCodeGraphGenerator;
import eu.opensme.cope.recommenders.entities.ClassAnalysis;
import eu.opensme.cope.util.WannabeComponent;
import java.io.File;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JDialog;

public class ComponentSuggestionPanel extends javax.swing.JPanel {

    private ReuseProject reuseProject;
    private GeneratedComponent pivotComponent;
    private List<WannabeComponent> potentialSuperComponents;
    private List<WannabeComponent> potetialSubComponents;
    private Integer minLayer;
    private Integer maxLayer;
    private ComponentSimilarityFinder csf;

    /**
     * Creates new form ComponentSuggestionPanel
     */
    public ComponentSuggestionPanel(ReuseProject reuseProject) {
        initComponents();

        //Initializations
        this.reuseProject = reuseProject;
        this.potentialSuperComponents = new ArrayList<WannabeComponent>();
        this.potetialSubComponents = new ArrayList<WannabeComponent>();
        this.minLayer = -2;
        this.maxLayer = 2;
        
        csf = new ComponentSimilarityFinder(reuseProject, minLayer, maxLayer, potentialSuperComponents, potetialSubComponents);

        //List all generated components
        int i = 0;
        DefaultListModel model = new DefaultListModel();
        generatedComponentsList.setModel(model);
        Iterator<String> it = reuseProject.getComponentNames().iterator();
        while (it.hasNext()) {
            model.add(i, it.next());
            i++;
        }

        fromLayer.setEnabled(false);
        toLayer.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        generatedComponentsList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fromLayer = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        toLayer = new javax.swing.JComboBox();
        filter = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        superComponentsList = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        subComponentsList = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        exportProjectGraph = new javax.swing.JButton();
        exportComponentGraph = new javax.swing.JButton();
        extractComponent = new javax.swing.JButton();
        compareClasses = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(250);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Generated Components", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 157));
        jPanel1.setLayout(new java.awt.BorderLayout());

        generatedComponentsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                generatedComponentsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(generatedComponentsList);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filter by Layer (relative to center classe's layer)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        jLabel1.setText("From:");
        jPanel6.add(jLabel1);

        fromLayer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fromLayerMouseClicked(evt);
            }
        });
        fromLayer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromLayerItemStateChanged(evt);
            }
        });
        fromLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromLayerActionPerformed(evt);
            }
        });
        jPanel6.add(fromLayer);

        jLabel2.setText("To:");
        jPanel6.add(jLabel2);

        toLayer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toLayerMouseClicked(evt);
            }
        });
        toLayer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                toLayerItemStateChanged(evt);
            }
        });
        toLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toLayerActionPerformed(evt);
            }
        });
        jPanel6.add(toLayer);

        filter.setText("OK");
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });
        jPanel6.add(filter);

        jPanel2.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jSplitPane2.setDividerLocation(150);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Larger Components", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout());

        superComponentsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                superComponentsListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                superComponentsListMouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(superComponentsList);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane2.setLeftComponent(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Smaller Components", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        jPanel4.setLayout(new java.awt.BorderLayout());

        subComponentsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subComponentsListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(subComponentsList);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jSplitPane2.setRightComponent(jPanel4);

        jPanel2.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        exportProjectGraph.setText("Project's Graph");
        exportProjectGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportProjectGraphActionPerformed(evt);
            }
        });
        jPanel5.add(exportProjectGraph);

        exportComponentGraph.setText("Component's Graph");
        exportComponentGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportComponentGraphActionPerformed(evt);
            }
        });
        jPanel5.add(exportComponentGraph);

        extractComponent.setText("Extract Component");
        extractComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractComponentActionPerformed(evt);
            }
        });
        jPanel5.add(extractComponent);

        compareClasses.setText("Compare Classes");
        compareClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareClassesActionPerformed(evt);
            }
        });
        jPanel5.add(compareClasses);

        jPanel2.add(jPanel5, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setRightComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void generatedComponentsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generatedComponentsListMouseClicked
    //Clear super and sub component lists in order to list new data
    superComponentsList.removeAll();
    subComponentsList.removeAll();

    //Clear similar component lists in GUI
    potentialSuperComponents.clear();
    potetialSubComponents.clear();

    //Find pivot component using user's selection from the generated components list
    pivotComponent = reuseProject.getComponent(generatedComponentsList.getSelectedValue().toString());

    csf.setPivotComponent(pivotComponent); 
    
    Long layerOfCenterClass = csf.classNameToClassAnalysis(pivotComponent.getComponentCentreClass()).getLayer();
    System.out.println(layerOfCenterClass);

    fromLayer.setEnabled(true);
    toLayer.setEnabled(true);

    //List all possible layers to the appropriate combo boxes
    Iterator<Long> itLayer = csf.findDifferentLayers().iterator();
    while (itLayer.hasNext()) {
        Long temp = itLayer.next();
        if (temp < layerOfCenterClass) {
            fromLayer.addItem(temp - layerOfCenterClass);
        }
        if (temp > layerOfCenterClass) {
            toLayer.addItem(temp - layerOfCenterClass);
        }
    }

    //Find similar components
    DefaultListModel[] lists = (DefaultListModel[]) csf.findSuperAndSubComponents();

    superComponentsList.setModel(lists[0]);
    subComponentsList.setModel(lists[1]);
}//GEN-LAST:event_generatedComponentsListMouseClicked

    private void compareClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareClassesActionPerformed

        List<ClassAnalysis> selectedComponentClasses = csf.findSelectedComponentClasses(pivotComponent.getComponentCentreClass());
        List<ClassAnalysis> wannabeComponentClasses = findWannabeClasses().getClasses();

        JDialog dialog = new JDialog();
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JComponent newContentPane = new CompareComponentClassesDialog(selectedComponentClasses, wannabeComponentClasses);
        newContentPane.setOpaque(true);
        dialog.setTitle("Compare classes");
        dialog.setContentPane(newContentPane);
        dialog.pack();
        dialog.setVisible(true);
        this.repaint();

    }//GEN-LAST:event_compareClassesActionPerformed

    private void superComponentsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_superComponentsListMouseClicked
    }//GEN-LAST:event_superComponentsListMouseClicked

private void extractComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractComponentActionPerformed
    WannabeComponent candidate = findWannabeClasses();
    
    JDialog dialog = new JDialog((ComponentAdaptationEnvironmentMain) this.getParent().getParent().getParent().getParent().getParent(), "Dependency Maker");
    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    DependencyMakerPanel newContentPane = new DependencyMakerPanel(reuseProject, reuseProject.getProject().getClasses());

    newContentPane.setOpaque(true);
    dialog.setContentPane(newContentPane);
    dialog.setVisible(true);
    dialog.pack();
    newContentPane.setSelectedClass(candidate.getCenterClass());
}//GEN-LAST:event_extractComponentActionPerformed

private void superComponentsListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_superComponentsListMouseEntered
}//GEN-LAST:event_superComponentsListMouseEntered

private void subComponentsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subComponentsListMouseClicked
}//GEN-LAST:event_subComponentsListMouseClicked

private void fromLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromLayerActionPerformed
    minLayer = Integer.valueOf(fromLayer.getSelectedItem().toString());
    System.out.println(minLayer + ", " + (minLayer + 1));
}//GEN-LAST:event_fromLayerActionPerformed

private void toLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toLayerActionPerformed
    maxLayer = Integer.valueOf(toLayer.getSelectedItem().toString());
    System.out.println(maxLayer + ", " + (maxLayer + 1));
}//GEN-LAST:event_toLayerActionPerformed

private void fromLayerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromLayerMouseClicked
}//GEN-LAST:event_fromLayerMouseClicked

private void toLayerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toLayerMouseClicked
}//GEN-LAST:event_toLayerMouseClicked

private void toLayerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_toLayerItemStateChanged
}//GEN-LAST:event_toLayerItemStateChanged

private void fromLayerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromLayerItemStateChanged
}//GEN-LAST:event_fromLayerItemStateChanged

private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
    //Find similar components
    csf.setMaxLayer(Integer.valueOf(toLayer.getSelectedItem().toString()));
    csf.setMinLayer(Integer.valueOf(fromLayer.getSelectedItem().toString()));
    DefaultListModel[] lists = (DefaultListModel[]) csf.findSuperAndSubComponents();

    superComponentsList.setModel(lists[0]);
    subComponentsList.setModel(lists[1]);
}//GEN-LAST:event_filterActionPerformed

    private void exportComponentGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportComponentGraphActionPerformed
        //Find pivot component using user's selection from the generated components list
        pivotComponent = reuseProject.getComponent(generatedComponentsList.getSelectedValue().toString());
        List<ClassAnalysis> cas = csf.findSelectedComponentClasses(pivotComponent.getComponentCentreClass());
        SourceCodeGraphGenerator componentGraph = new SourceCodeGraphGenerator(Calendar.getInstance().getTime(), "COPE", Boolean.TRUE);

        //Create a graph node for each class of the selected component
        Iterator it = cas.iterator();
        while (it.hasNext()) {
            ClassAnalysis ca = (ClassAnalysis) it.next();
            componentGraph.addNode(ca.getName());
        }

        //Create a directed edge for every pair of classes that has a dependency
        Iterator it2 = cas.iterator();
        while (it2.hasNext()) {
            ClassAnalysis ca = (ClassAnalysis) it2.next();

            //List of dependencies
            List<ClassAnalysis> dependency = csf.findDependencies(ca);
            if (!dependency.isEmpty()) {
                Iterator it3 = dependency.iterator();
                while (it3.hasNext()) {
                    ClassAnalysis cadep = (ClassAnalysis) it3.next();
                    componentGraph.addEdge(ca, cadep);
                }
            }
        }

        //Path for the graph (.gexf) file
        String gexfFileName = reuseProject.getProjectLocation() + File.separator + "graphs" + File.separator + pivotComponent.getComponentName() + ".gexf";
        //Write file
        componentGraph.exportGraphToFile(gexfFileName);
    }//GEN-LAST:event_exportComponentGraphActionPerformed

    private void exportProjectGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportProjectGraphActionPerformed
        //Classes of the whole project
        Set<ClassAnalysis> cas = reuseProject.getProject().getClasses();
        Set<ClassAnalysis> visited = new HashSet<ClassAnalysis>();
        SourceCodeGraphGenerator projectGraph = new SourceCodeGraphGenerator(Calendar.getInstance().getTime(), "COPE", Boolean.TRUE);

        //Create a graph node for each class of the selected component
        Iterator it = cas.iterator();
        while (it.hasNext()) {
            ClassAnalysis ca = (ClassAnalysis) it.next();
            projectGraph.addNode(ca.getName());
        }

        //Create a directed edge for every pair of classes that has a dependency
        Iterator it2 = cas.iterator();
        while (it2.hasNext()) {
            ClassAnalysis ca = (ClassAnalysis) it2.next();

            List<ClassAnalysis> dependency = csf.findDependencies(ca);
            if (!dependency.isEmpty()) {
                Iterator it3 = dependency.iterator();
                while (it3.hasNext()) {
                    ClassAnalysis cadep = (ClassAnalysis) it3.next();
                    projectGraph.addEdge(ca, cadep);
                }
            }
            visited.add(ca);
        }

        //Path for the graph (.gexf) file
        String gexfFileName = reuseProject.getProjectLocation() + File.separator + "graphs" + File.separator + reuseProject.getProjectName() + " - Full Graph" + ".gexf";
        //Write file
        projectGraph.exportGraphToFile(gexfFileName);
    }//GEN-LAST:event_exportProjectGraphActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compareClasses;
    private javax.swing.JButton exportComponentGraph;
    private javax.swing.JButton exportProjectGraph;
    private javax.swing.JButton extractComponent;
    private javax.swing.JButton filter;
    private javax.swing.JComboBox fromLayer;
    private javax.swing.JList generatedComponentsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JList subComponentsList;
    private javax.swing.JList superComponentsList;
    private javax.swing.JComboBox toLayer;
    // End of variables declaration//GEN-END:variables

    private WannabeComponent findWannabeClasses() {
        WannabeComponent wc = null;
        WannabeComponent candidate = null;

        if (superComponentsList.getSelectedValue() != null) {
            Iterator<WannabeComponent> itWannabes = potentialSuperComponents.iterator();
            while (itWannabes.hasNext()) {
                wc = itWannabes.next();
                if (wc.getCenterClass().getName().equals(superComponentsList.getSelectedValue().toString())) {
                    candidate = wc;
                }
            }
        } else if (subComponentsList.getSelectedValue() != null) {
            Iterator<WannabeComponent> itWannabes = potetialSubComponents.iterator();
            while (itWannabes.hasNext()) {
                wc = itWannabes.next();
                if (wc.getCenterClass().getName().equals(subComponentsList.getSelectedValue().toString())) {
                    candidate = wc;
                }
            }
        } else {
            System.out.println("You must select a component!");
        }
        candidate.getClasses().add(candidate.getCenterClass());

        HashSet<ClassAnalysis> test = new HashSet<ClassAnalysis>();
        test.addAll(candidate.getClasses());

        candidate.getClasses().clear();
        candidate.getClasses().addAll(test);

        return candidate;
    }
}
