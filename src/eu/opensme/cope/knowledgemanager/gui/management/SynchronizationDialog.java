/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SynchronizationDialog.java
 *
 * Created on 13 Οκτ 2011, 1:39:41 πμ
 */
package eu.opensme.cope.knowledgemanager.gui.management;

import eu.opensme.cope.knowledgemanager.api.ReuseApi;
import eu.opensme.cope.knowledgemanager.api.actions.OpenSMEComponent;
import eu.opensme.cope.knowledgemanager.icompare.ComponentDTO;
import eu.opensme.cope.knowledgemanager.xml.CompareSynchronizer;
import eu.opensme.cope.knowledgemanager.xml.SYNC;
import eu.opensme.cope.knowledgemanager.xml.XMLComponent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.openrdf.query.MalformedQueryException;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.config.RepositoryConfigException;

/**
 *
 * @author George
 */
public class SynchronizationDialog extends javax.swing.JDialog {

    @Override
    public void setVisible(boolean b) {
        new Thread() {

            @Override
            public void run() {
                synchronize();
            }
        }.start();
        super.setVisible(b);
    }

    /** Creates new form SynchronizationDialog */
    public SynchronizationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButtonSyncOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Synchronization");
        setAlwaysOnTop(true);
        setIconImage(null);
        setModal(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Synchronizing... Please wait");

        jProgressBar1.setIndeterminate(true);

        jButtonSyncOK.setText("OK");
        jButtonSyncOK.setEnabled(false);
        jButtonSyncOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSyncOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jButtonSyncOK)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSyncOK)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-416)/2, (screenSize.height-151)/2, 416, 151);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSyncOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSyncOKActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonSyncOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SynchronizationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SynchronizationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SynchronizationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SynchronizationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                SynchronizationDialog dialog = new SynchronizationDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSyncOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    public void synchronize() {
        CompareSynchronizer sync = new CompareSynchronizer();
        ReuseApi api = getAPI();
        OpenSMEComponent comp = new OpenSMEComponent(api);
        ArrayList<XMLComponent> components = sync.getRepository().getComponentList();

        //insert
        for (XMLComponent c : components) {
            if (c.getStatus().equals(SYNC.INSERT)) {
                ComponentDTO result = null;
                try {
                    result = comp.getComponentDTO(c.getId());
                    //print(result);
                    //System.out.println("insert");
                    insertComponent(result, "1234");
                } catch (RepositoryException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    jLabel1.setText("Error");
                    jButtonSyncOK.setEnabled(true);
                    jProgressBar1.setIndeterminate(false);
                    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
            }
        }
        //update
        for (XMLComponent c : components) {
            if (c.getStatus().equals(SYNC.UPDATE)) {
                ComponentDTO result = null;
                try {
                    result = comp.getComponentDTO(c.getId());
                    //print(result);
                    //System.out.println("update");
                    updateComponent(result, "1234");

                } catch (RepositoryException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                }catch (Exception ex) {
                    jLabel1.setText("Error");
                    jButtonSyncOK.setEnabled(true);
                    jProgressBar1.setIndeterminate(false);
                    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
            }
        }
        //delete
        for (XMLComponent c : components) {
            if (c.getStatus().equals(SYNC.DELETE)) {
                ComponentDTO result = null;
                try {
                    result = comp.getComponentDTO(c.getId());
                    //print(result);
                    //System.out.println("delete");
                    deleteComponent(result, "1234");

                } catch (RepositoryException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    api.getDatabase().close();
                    JOptionPane.showMessageDialog(this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                }catch (Exception ex) {
                    jLabel1.setText("Error");
                    jButtonSyncOK.setEnabled(true);
                    jProgressBar1.setIndeterminate(false);
                    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
            }
        }
        api.getDatabase().close();
        jLabel1.setText("Synchronizing... Done!");
        jButtonSyncOK.setEnabled(true);
        jProgressBar1.setIndeterminate(false);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        sync.clearRepository();

    }

    private ReuseApi getAPI() {
        ReuseApi api = null;
        try {
            api = new ReuseApi();
        } catch (RepositoryException ex) {
            JOptionPane.showMessageDialog(this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RepositoryConfigException ex) {
            JOptionPane.showMessageDialog(this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return api;
        }
    }

    private void print(ComponentDTO c) {
        System.out.println("ID: " + c.getId());
        System.out.println("Name: " + c.getName());
        System.out.println("Description: " + c.getDescription());
        System.out.println("License: " + c.getLicense());
        System.out.println("Language: " + c.getLanguage());
        System.out.println("Platfrom: " + c.getPlatform());
        System.out.println("Category: " + c.getCategory());
        System.out.println("SubCategory: " + c.getSubcategory());
        System.out.println("SVN: " + c.getSvnPath());
        System.out.println("----------------------------------------------------");
    }

    private static boolean updateComponent(eu.opensme.cope.knowledgemanager.icompare.ComponentDTO data, java.lang.String key) {
        eu.opensme.cope.knowledgemanager.icompare.Comparewsdl service = new eu.opensme.cope.knowledgemanager.icompare.Comparewsdl();
        eu.opensme.cope.knowledgemanager.icompare.ComparewsdlPortType port = service.getComparewsdlPort();
        return port.updateComponent(data, key);
    }

    private static boolean insertComponent(eu.opensme.cope.knowledgemanager.icompare.ComponentDTO data, java.lang.String key) {
        eu.opensme.cope.knowledgemanager.icompare.Comparewsdl service = new eu.opensme.cope.knowledgemanager.icompare.Comparewsdl();
        eu.opensme.cope.knowledgemanager.icompare.ComparewsdlPortType port = service.getComparewsdlPort();
        return port.insertComponent(data, key);
    }

    private static boolean deleteComponent(eu.opensme.cope.knowledgemanager.icompare.ComponentDTO data, java.lang.String key) {
        eu.opensme.cope.knowledgemanager.icompare.Comparewsdl service = new eu.opensme.cope.knowledgemanager.icompare.Comparewsdl();
        eu.opensme.cope.knowledgemanager.icompare.ComparewsdlPortType port = service.getComparewsdlPort();
        return port.deleteComponent(data, key);
    }
}
