/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RoleSelectPanelAdvanced.java
 *
 * Created on Aug 29, 2011, 6:34:31 PM
 */
package eu.opensme.cope.knowledgemanager.gui.management;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openrdf.query.MalformedQueryException;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.config.RepositoryConfigException;
import eu.opensme.cope.knowledgemanager.api.ReuseApi;
import eu.opensme.cope.knowledgemanager.api.actions.ArchitecturalPattern;
import eu.opensme.cope.knowledgemanager.api.dto.ArchitecturalPatternDetails;
import eu.opensme.cope.knowledgemanager.api.dto.KeyValue;
import eu.opensme.cope.knowledgemanager.utils.ProgressBarFrame;
import eu.opensme.cope.knowledgemanager.gui.management.list.SortedListKeyValueModel;
import eu.opensme.cope.knowledgemanager.gui.management.list.SortedListKeyValuePatternDataModel;
import eu.opensme.cope.knowledgemanager.gui.management.list.SortedListKeyValuePatternModel;

/**
 *
 * @author George
 */
public class RoleSelectPanelAdvanced extends javax.swing.JPanel {

    private SortedListKeyValueModel highQualityList;
    private SortedListKeyValueModel mediumQualityList;
    private SortedListKeyValueModel lowQualityList;
    private SortedListKeyValueModel patternRolesList;
    public SortedListKeyValuePatternModel selectedRolesList;
    ArrayList<String> alreadySelectedRoles;
    public static ProgressBarFrame progressBar = new ProgressBarFrame("Please wait...");
    MyGlassPane glass = new MyGlassPane();

    /** Creates new form RoleSelectPanelAdvanced */
    public RoleSelectPanelAdvanced(ArrayList<String> alreadySelectedRoles) {
        this.alreadySelectedRoles = alreadySelectedRoles;
        initComponents();
        initMyComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel14 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jListArchitecturalPatterns = new javax.swing.JList();
        jPanel19 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jListHighQuality = new javax.swing.JList();
        jScrollPane15 = new javax.swing.JScrollPane();
        jListMediumQuality = new javax.swing.JList();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane16 = new javax.swing.JScrollPane();
        jListLowQuality = new javax.swing.JList();
        jPanel24 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jListPatternRoles = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListSelectedRoles = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButtonSelectRole = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(245, 245, 245));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(61, 128, 185), 2, true), "Architectural Patterns", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(238, 52, 0))); // NOI18N

        jListArchitecturalPatterns.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane13.setViewportView(jListArchitecturalPatterns);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel19.setBackground(new java.awt.Color(245, 245, 245));
        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(61, 128, 185), 2, true), "Quality Attributes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(238, 52, 0))); // NOI18N

        jLabel21.setText("Low Quality");

        jLabel20.setText("Medium Quality");

        jListHighQuality.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListHighQuality.setVisibleRowCount(3);
        jScrollPane14.setViewportView(jListHighQuality);

        jListMediumQuality.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListMediumQuality.setVisibleRowCount(3);
        jScrollPane15.setViewportView(jListMediumQuality);

        jLabel19.setText("High Quality");

        jListLowQuality.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListLowQuality.setVisibleRowCount(3);
        jScrollPane16.setViewportView(jListLowQuality);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel24.setBackground(new java.awt.Color(245, 245, 245));
        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(61, 128, 185), 2, true), "Roles", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(238, 52, 0))); // NOI18N

        jListPatternRoles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane19.setViewportView(jListPatternRoles);

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jListSelectedRoles);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel1.setForeground(new java.awt.Color(238, 52, 0));
        jLabel1.setText("Selected Roles");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButtonSelectRole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/select.png"))); // NOI18N
        jButtonSelectRole.setText("Select");
        jButtonSelectRole.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSelectRole.setEnabled(false);
        jButtonSelectRole.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonSelectRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectRoleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSelectRole)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addComponent(jButtonSelectRole)
                .addContainerGap(149, Short.MAX_VALUE))
        );

        jButtonSelectRole.setVerticalTextPosition(SwingConstants.CENTER);
        jButtonSelectRole.setHorizontalTextPosition(SwingConstants.LEFT);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete16x16.png"))); // NOI18N
        jButton1.setText("Remove");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setEnabled(false);
        jButton1.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                            .addComponent(jButton1))))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void jButtonSelectRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectRoleActionPerformed
    KeyValue selected = (KeyValue) jListPatternRoles.getSelectedValue();
    if (selected == null) {
        return;
    }

    KeyValue selectedPattern = (KeyValue) jListArchitecturalPatterns.getSelectedValue();
    SortedListKeyValuePatternDataModel data = new SortedListKeyValuePatternDataModel();
    data.setKey(selected.getKey());
    data.setValue(selected.getValue());
    data.setPatternID(selectedPattern.getKey());
    data.setPatternName(selectedPattern.getValue());
    selectedRolesList.add(data);
    jListPatternRoles.clearSelection();

}//GEN-LAST:event_jButtonSelectRoleActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    SortedListKeyValuePatternDataModel selected = (SortedListKeyValuePatternDataModel) jListSelectedRoles.getSelectedValue();
    selectedRolesList.removeElement(selected);
    jListPatternRoles.clearSelection();
}//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonSelectRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JList jListArchitecturalPatterns;
    private javax.swing.JList jListHighQuality;
    private javax.swing.JList jListLowQuality;
    private javax.swing.JList jListMediumQuality;
    private javax.swing.JList jListPatternRoles;
    private javax.swing.JList jListSelectedRoles;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane19;
    // End of variables declaration//GEN-END:variables

    private void initMyComponents() {
        initArchitecturalPatternsTab();
        setProgressBar(false, true);
    }

    private void initArchitecturalPatternsTab() {
        ReuseApi api = null;
        try {
            api = new ReuseApi();
        } catch (RepositoryException ex) {
            JOptionPane.showMessageDialog(this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RepositoryConfigException ex) {
            JOptionPane.showMessageDialog(this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        }
        ArchitecturalPattern pattern = new ArchitecturalPattern(api);
        ArrayList<KeyValue> patterns = null;
        try {
            patterns = pattern.getArchitecturalPatterns();
        } catch (RepositoryException ex) {
            JOptionPane.showMessageDialog(this, "Error populating architectural patterns", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedQueryException ex) {
            JOptionPane.showMessageDialog(this, "Error populating architectural patterns", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (QueryEvaluationException ex) {
            JOptionPane.showMessageDialog(this, "Error populating architectural patterns", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            api.getDatabase().close();
        }

        //jListTechnologies.removeAll();
        SortedListKeyValueModel architecturalPatternsList = new SortedListKeyValueModel();
        architecturalPatternsList.addAll(patterns.toArray());
        jListArchitecturalPatterns.setModel(architecturalPatternsList);


        jListArchitecturalPatterns.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {

                    @Override
                    public void valueChanged(ListSelectionEvent event) {
                        if (!event.getValueIsAdjusting()) {
                            int viewRow = jListArchitecturalPatterns.getSelectedIndex();
                            if (viewRow < 0) {
                            } else {
                                getArchitecturalPatternDetails(((KeyValue) jListArchitecturalPatterns.getSelectedValue()).getKey(), true);
                            }
                            if (jListArchitecturalPatterns.getSelectedIndex() == -1) {
                                jListHighQuality.clearSelection();
                                jListMediumQuality.clearSelection();
                                jListLowQuality.clearSelection();
                                jListPatternRoles.clearSelection();
                                highQualityList.clear();
                                mediumQualityList.clear();
                                lowQualityList.clear();
                                patternRolesList.clear();
                            }
                        }
                    }
                });


        highQualityList = new SortedListKeyValueModel();
        mediumQualityList = new SortedListKeyValueModel();
        lowQualityList = new SortedListKeyValueModel();
        patternRolesList = new SortedListKeyValueModel();

        jListHighQuality.setModel(highQualityList);
        jListMediumQuality.setModel(mediumQualityList);
        jListLowQuality.setModel(lowQualityList);
        jListPatternRoles.setModel(patternRolesList);

        jListPatternRoles.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {

                    @Override
                    public void valueChanged(ListSelectionEvent event) {
                        if (!event.getValueIsAdjusting()) {
                            //check if the selected button should be enabled/disabled
                            KeyValue selected = (KeyValue) jListPatternRoles.getSelectedValue();
                            if (selected != null) {
                                if (selectedRolesList.containsRoleOrAlreadySelectedOrAnyPatternRole(selected, alreadySelectedRoles, ((KeyValue) jListArchitecturalPatterns.getSelectedValue()).getKey())) {
                                    jButtonSelectRole.setEnabled(false);
                                } else {
                                    jButtonSelectRole.setEnabled(true);
                                }
                            }
                        }
                        if (jListPatternRoles.getSelectedIndex() == -1) {
                            jButtonSelectRole.setEnabled(false);
                        }
                    }
                });




        selectedRolesList = new SortedListKeyValuePatternModel();
        jListSelectedRoles.setModel(selectedRolesList);

        jListSelectedRoles.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {

                    @Override
                    public void valueChanged(ListSelectionEvent event) {
                        if (!event.getValueIsAdjusting()) {
                            if (jListSelectedRoles.getSelectedIndex() != -1) {
                                jButton1.setEnabled(true);
                            } else {
                                jButton1.setEnabled(false);
                            }
                        }
                    }
                });

    }

    private void getArchitecturalPatternDetails(final String patternID, final boolean showProgress) {
        setProgressBar(true, showProgress);
        jListHighQuality.clearSelection();
        jListMediumQuality.clearSelection();
        jListLowQuality.clearSelection();
        jListPatternRoles.clearSelection();
        ((SortedListKeyValueModel) jListHighQuality.getModel()).clear();
        ((SortedListKeyValueModel) jListMediumQuality.getModel()).clear();
        ((SortedListKeyValueModel) jListLowQuality.getModel()).clear();
        ((SortedListKeyValueModel) jListPatternRoles.getModel()).clear();


        new Thread() {

            @Override
            public void run() {
                ReuseApi api = null;
                try {
                    api = new ReuseApi();
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(RoleSelectPanelAdvanced.this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RepositoryConfigException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(RoleSelectPanelAdvanced.this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                }
                ArchitecturalPattern pattern = new ArchitecturalPattern(api);
                ArchitecturalPatternDetails result = null;

                try {
                    result = pattern.getPatternDetails(patternID);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(RoleSelectPanelAdvanced.this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(RoleSelectPanelAdvanced.this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(RoleSelectPanelAdvanced.this, "Error getting component details", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                displayPatternsDetails(result);
                setProgressBar(false, showProgress);
            }
        }.start();
    }

    private void displayPatternsDetails(ArchitecturalPatternDetails details) {
        //((SortedListKeyValueModel) jListHighQuality.getModel()).clear();
        ArrayList<KeyValue> highQuality = details.getHighQuality();
        SortedListKeyValueModel r1 = (SortedListKeyValueModel) jListHighQuality.getModel();
        r1.addAll(highQuality.toArray());

        ArrayList<KeyValue> mediumQuality = details.getMediumQuality();
        SortedListKeyValueModel r2 = (SortedListKeyValueModel) jListMediumQuality.getModel();
        r2.addAll(mediumQuality.toArray());

        ArrayList<KeyValue> lowQuality = details.getLowQuality();
        SortedListKeyValueModel r3 = (SortedListKeyValueModel) jListLowQuality.getModel();
        r3.addAll(lowQuality.toArray());

        ArrayList<KeyValue> roles = details.getRoles();
//        for (Iterator<KeyValue> it = roles.iterator(); it.hasNext();) {
//            KeyValue keyValue = it.next();
//            if (alreadySelectedRoles.contains(keyValue.getKey())) {
//                it.remove();
//            }
//        }
        SortedListKeyValueModel r4 = (SortedListKeyValueModel) jListPatternRoles.getModel();
        r4.addAll(roles.toArray());
    }

    private void setProgressBar(boolean show, boolean showProgress) {
        if (showProgress) {
            //glass.setVisible(show);
            progressBar.setVisible(show);
        }
    }
}
