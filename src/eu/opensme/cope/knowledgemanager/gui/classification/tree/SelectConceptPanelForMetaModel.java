/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SelectConceptPanel.java
 *
 * Created on Aug 28, 2011, 9:49:21 PM
 */
package eu.opensme.cope.knowledgemanager.gui.classification.tree;

import eu.opensme.cope.knowledgemanager.api.ReuseApi;
import eu.opensme.cope.knowledgemanager.api.actions.Domain;
import eu.opensme.cope.knowledgemanager.api.dto.KeyValue;
import eu.opensme.cope.knowledgemanager.gui.management.list.SortedListKeyValueModel;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.openrdf.query.MalformedQueryException;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.config.RepositoryConfigException;

/**
 *
 * @author George
 */
public class SelectConceptPanelForMetaModel extends javax.swing.JPanel {

    SortedListKeyValueModel domains, existingConcepts;

    /** Creates new form SelectConceptPanel */
    public SelectConceptPanelForMetaModel(SortedListKeyValueModel domains, SortedListKeyValueModel existingConcepts) {
        //this.root = root;
        this.domains = domains;
        this.existingConcepts = existingConcepts;
        initComponents();
        initMyComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListConcepts = new javax.swing.JList();
        jLabelWait = new javax.swing.JLabel();

        jListConcepts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jListConcepts);

        jLabelWait.setForeground(new java.awt.Color(255, 51, 51));
        jLabelWait.setText("Please wait...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelWait, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelWait)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelWait;
    public javax.swing.JList jListConcepts;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void initMyComponents() {
        SortedListKeyValueModel conceptList = new SortedListKeyValueModel();
        jListConcepts.setModel(conceptList);
        getDomainConcepts();
    }

    private void getDomainConcepts() {
        jLabelWait.setVisible(true);
        jListConcepts.clearSelection();
        ((SortedListKeyValueModel) jListConcepts.getModel()).clear();

        final ArrayList<KeyValue> concepts = new ArrayList<KeyValue>();

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = null;
                try {
                    api = new ReuseApi();
                } catch (RepositoryException ex) {
                    Logger.getLogger(SelectConceptPanelForMetaModel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RepositoryConfigException ex) {
                    Logger.getLogger(SelectConceptPanelForMetaModel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(SelectConceptPanelForMetaModel.class.getName()).log(Level.SEVERE, null, ex);
                }
                Domain dom = new Domain(api);
                ArrayList<KeyValue> result = null;

                try {
                    for (Iterator<KeyValue> it = domains.iterator(); it.hasNext();) {
                        KeyValue domain = it.next();
                        result = dom.getDomainConcepts(domain.getKey().substring(1, domain.getKey().length()));
                        concepts.addAll(result);
                    }
                } catch (RepositoryException ex) {
                    Logger.getLogger(SelectConceptPanelForMetaModel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(SelectConceptPanelForMetaModel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(SelectConceptPanelForMetaModel.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }


                for (Iterator<KeyValue> it = concepts.iterator(); it.hasNext();) {
                    KeyValue keyValue = it.next();
                    if (existingConcepts.containsKey(keyValue.getKey())) {
                        it.remove();
                    }

                }

                SortedListKeyValueModel r1 = (SortedListKeyValueModel) jListConcepts.getModel();
                r1.addAll(concepts.toArray());
                jLabelWait.setVisible(false);
            }
        }.start();
    }
//    private class ConceptJTreeRenderer extends DefaultTreeCellRenderer {
//
//        ImageIcon leafIcon, rootIcon;
//
//        public ConceptJTreeRenderer() {
//            this.leafIcon = new javax.swing.ImageIcon(getClass().getResource("/images/subclass.png"));
//            this.rootIcon = new javax.swing.ImageIcon(getClass().getResource("/images/domains.png"));
//        }
//
//        @Override
//        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
//            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
//            if (((TreeDomainNodeData) value).getName().equals("Concepts")) {
//                setIcon(rootIcon);
//                setIcon(rootIcon);
//                setFont(new Font("Arial", Font.BOLD, 12));
//            } else {
//                setIcon(leafIcon);
//                setIcon(leafIcon);
//                setFont(new Font("Arial", Font.PLAIN, 12));
//            }
//            return this;
//        }
//    }
}
