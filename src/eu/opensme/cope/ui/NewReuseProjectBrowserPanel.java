/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReuseProjectBrowserPanel.java
 *
 * Created on 11 Ιουν 2011, 10:27:57 πμ
 */
package eu.opensme.cope.ui;

import eu.opensme.cope.domain.ReuseProject;
import eu.opensme.cope.factgenerators.DocumentationGenerator;
import eu.opensme.cope.recommenders.entities.ClassAnalysis;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.File;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author george
 */
public class NewReuseProjectBrowserPanel extends javax.swing.JPanel {

    private ReuseProject reuseProject;
    private DefaultMutableTreeNode master;
    private File currentSelection;
    private ClassAnalysis selectedClass;

    /** Creates new form ReuseProjectBrowserPanel */
    public NewReuseProjectBrowserPanel(ReuseProject reuseProject) {
        this.reuseProject = reuseProject;
        master = new DefaultMutableTreeNode(reuseProject.getProject().getProjecttitle());
        listAllFiles(new File(reuseProject.getSrcDir()), master, Boolean.TRUE);
        currentSelection = null;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        extractComponentMenuItem = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        srcDirTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();

        extractComponentMenuItem.setText("Extract component from here...");
        extractComponentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractComponentMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(extractComponentMenuItem);

        srcDirTree.setModel(new javax.swing.tree.DefaultTreeModel(master));
        srcDirTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                srcDirTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(srcDirTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 3, 18)); // NOI18N
        jLabel1.setText("Please perform static analysis to view the metrics");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane2.setViewportView(jLabel1);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 914, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void srcDirTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_srcDirTreeValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
        if ((node == null) || (node.isRoot())) {
            //Nothing is selected
            return;
        }
        FileInfo selection = (FileInfo) node.getUserObject();
        currentSelection = selection.getFile();
        showDocForFile(currentSelection);
        //refreshReuseProjectBrowserTabbedPane();
    }

    private void showDocForFile(File fileSysEntity) {
        if (fileSysEntity == null) {
            return;
        }
        File f = DocumentationGenerator.getDocForFile(
                reuseProject.getProjectLocation(),
                reuseProject.getSrcDir(),
                fileSysEntity.getAbsolutePath(),
                fileSysEntity.isDirectory());

        if (f == null) {
            return;
        }
        /*
        docPanel.removeAll();
        String filename = "file://" + f.getAbsolutePath();
        JPanel webBrowserPanel = new JPanel(new BorderLayout());
        webBrowserPanel.setOpaque(false);
        JWebBrowser browser = new JWebBrowser();
        browser.navigate(filename);
        webBrowserPanel.add(browser, BorderLayout.CENTER);
        docPanel.add(webBrowserPanel, BorderLayout.CENTER);
         * 
         */
        String filename = "file://" + f.getAbsolutePath();
        JDialog docDialog = new JDialog((JFrame) getTopLevelAncestor(),
                "Documentation for file " + filename, true);
        docDialog.setSize(800, 800);
        docDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JPanel webBrowserPanel = new JPanel(new BorderLayout());
        try {
            JEditorPane browser = new JEditorPane(filename);
            
            final JScrollPane scrollPane = new JScrollPane(browser,
                    JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            scrollPane.getVerticalScrollBar().setUnitIncrement(16);
            scrollPane.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
                @Override
                public void adjustmentValueChanged(AdjustmentEvent e) {
                    e.getValueIsAdjusting();
                }
            });
            scrollPane.getVerticalScrollBar().setValue(0);
            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
            browser.setContentType("text/html");
            browser.setEditable(false);
            webBrowserPanel.add(scrollPane, BorderLayout.CENTER);
            docDialog.setContentPane(webBrowserPanel);
            //docDialog.pack();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        docDialog.setVisible(true);
    }

    private void refreshMetricsScrollPaneContents(File fileSysEntity) {
        if (fileSysEntity == null) {
            //metricsLabel.setText("No element is currently selected");
            return;
        }
        //metricsLabel.setText("Metrics will be displayed here for " + fileSysEntity.getAbsolutePath() + " currently selected");
    }//GEN-LAST:event_srcDirTreeValueChanged

    private void extractComponentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractComponentMenuItemActionPerformed
        if (selectedClass != null) {
            System.out.println("Extracting component for class " + selectedClass.getName());
            String destFolder = ReuseProject.getReuseProjectsLocation()
                    + selectedClass.getName() + "Component";
            int i = selectedClass.extractComponent(reuseProject.getSrcDir(),
                    destFolder).size();
            JOptionPane.showMessageDialog(
                    this,
                    "Component extraction finished. " + i + " classes were extracted to folder " + destFolder);
        }
    }//GEN-LAST:event_extractComponentMenuItemActionPerformed

    public final void listAllFiles(File directory, DefaultMutableTreeNode parent, Boolean recursive) {
        File[] children = directory.listFiles(); // list all the files in the directory
        for (File child : children) { // loop through each
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(new FileInfo(child));
            // only display the node if it isn't a folder, and if this is a recursive call
            if (child.isDirectory() && recursive) {
                parent.add(node); // add as a child node
                listAllFiles(child, node, recursive); // call again for the subdirectory
            } else if (!child.isDirectory()) { // otherwise, if it isn't a directory
                parent.add(node); // add it as a node and do nothing else
            }
        }
    }

    private void initColumnSizes(javax.swing.JTable table) {
        ClassMetricsTableModel model = (ClassMetricsTableModel) table.getModel();
        javax.swing.table.TableColumn column = null;
        Component comp = null;
        int headerWidth = 0;
        int cellWidth = 0;
        Object[] exampleValues = model.exampleValues();
        javax.swing.table.TableCellRenderer headerRenderer =
                table.getTableHeader().getDefaultRenderer();
        int columnCount = model.getColumnCount();
        for (int i = 0; i < columnCount; i++) {
            column = table.getColumnModel().getColumn(i);

            comp = headerRenderer.getTableCellRendererComponent(
                    null, column.getHeaderValue(),
                    false, false, 0, 0);
            headerWidth = comp.getPreferredSize().width;

            comp = table.getDefaultRenderer(model.getColumnClass(i)).
                    getTableCellRendererComponent(
                    table, exampleValues[i],
                    false, false, 0, i);
            cellWidth = comp.getPreferredSize().width;


            System.out.println("Initializing width of column "
                    + i + ". "
                    + "headerWidth = " + headerWidth
                    + "; cellWidth = " + cellWidth);


            column.setPreferredWidth(Math.max(headerWidth, cellWidth));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem extractComponentMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTree srcDirTree;
    // End of variables declaration//GEN-END:variables
}
