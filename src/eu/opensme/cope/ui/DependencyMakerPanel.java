/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InterfaceMakerPanel.java
 *
 * Created on Aug 24, 2011, 2:39:47 PM
 */
package eu.opensme.cope.ui;

import eu.opensme.cope.componentmakers.ComponentMaker;
import eu.opensme.cope.componentmakers.common.BinaryFileNotFoundException;
import eu.opensme.cope.componentmakers.common.InterfaceGenerationPolicy;
import eu.opensme.cope.componentmakers.common.ReuseProjectNotSetException;
import eu.opensme.cope.componentmakers.common.SourceFileNotFoundException;
import eu.opensme.cope.componentmakers.generic.DependencyBasedMakerWithAntBuild;
import eu.opensme.cope.domain.GeneratedComponent;
import eu.opensme.cope.domain.ReuseProject;
import eu.opensme.cope.recommenders.entities.ClassAnalysis;
import java.awt.FlowLayout;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author sskalist
 */
public class DependencyMakerPanel extends javax.swing.JPanel {

    private ReuseProject reuseProject;
    private DependencyBasedMakerWithAntBuild maker;
    private Set<ClassAnalysis> classesToShow;
    private ClassAnalysis selectedClass;

    /** Creates new form InterfaceMakerPanel */
    public DependencyMakerPanel() {
        initComponents();
    }

    public DependencyMakerPanel(ReuseProject reuseProject, Set<ClassAnalysis> classesToShow) {
        this.reuseProject = reuseProject;
        ComponentMaker.setProject(reuseProject);
        this.maker = new DependencyBasedMakerWithAntBuild();
        this.classesToShow = classesToShow;
        filterAnonymousClasses();
        initComponents();
        addTableListener();
        this.selectedClass = null;
        generatedFilesArea.setVisible(false);
        this.repaint();
    }

    private void filterAnonymousClasses() {
        Iterator<ClassAnalysis> iterator = this.classesToShow.iterator();
        while (iterator.hasNext()) {
            ClassAnalysis classAnalysis = (ClassAnalysis) iterator.next();
            if (classAnalysis.getName().contains("$")) {
                iterator.remove();
            }
        }
    }

    public void setSelectedClass(ClassAnalysis classAnalysis) {
        ClassReusabilityTableModel model = (ClassReusabilityTableModel) this.classTable.getModel();
        int indexOf = model.getIndexOf(classAnalysis);
        if (indexOf >= 0) {
            this.classTable.changeSelection(this.classTable.convertRowIndexToView(indexOf), 0, false, false);
        }

    }

    private boolean setPolicy() {
        InterfaceGenerationPolicy policy = new InterfaceGenerationPolicy();
        for (int index : InterfacePolicyList.getSelectedIndices()) {
            switch (index) {
                case -1:
                    return false;
                case 0:
                    policy.setGenerateSelectedClass(true);
                    break;
                case 1:
                    policy.setGenerateExternallyCalledClass(true);
                    break;
                case 2:
                    policy.setGenerateUnusedClasses(true);
                    break;
                default:
                    return false;
            }
        }
        maker.setPolicy(policy);
        return true;
    }

    private void reassessGenerateButtonEnablement() {
        if (InterfacePolicyList.getSelectedIndex() >= 0 && this.classTable.getSelectedRow() >= 0) {
            this.generateButton.setEnabled(true);
        } else {

            this.generateButton.setEnabled(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        TopBottomPanel = new javax.swing.JSplitPane();
        ListsButtonPanel = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        componentNameLabel = new javax.swing.JLabel();
        componentNameField = new javax.swing.JTextField();
        generateButton = new javax.swing.JButton();
        showFiles = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        InterfacePolicyLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        InterfacePolicyList = new javax.swing.JList();
        policyInfoLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        classesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        classTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        generatedFilesArea = new javax.swing.JTextArea();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        TopBottomPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        TopBottomPanel.setResizeWeight(0.5);

        ListsButtonPanel.setResizeWeight(1.0);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(1.0);

        componentNameLabel.setText("Component Name");

        componentNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                componentNameFieldFocusGained(evt);
            }
        });

        generateButton.setText("Generate Component");
        generateButton.setEnabled(false);
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        showFiles.setText("Show Generated Files >>");
        showFiles.setEnabled(false);
        showFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFilesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(componentNameLabel)
                        .addContainerGap(344, Short.MAX_VALUE))
                    .addComponent(componentNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                    .addComponent(generateButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(showFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(componentNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(componentNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateButton)
                .addGap(18, 18, 18)
                .addComponent(showFiles)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jSplitPane1.setBottomComponent(jPanel1);

        InterfacePolicyLabel.setText("Interface Generation Policy");

        InterfacePolicyList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Generate Interface for Selected Class.", "Generate Interfaces for Externally Referenced Classes.", "Generate Interfaces for Classes that are not externally used." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        InterfacePolicyList.setSelectedIndex(0);
        InterfacePolicyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                InterfacePolicyListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(InterfacePolicyList);

        policyInfoLabel.setText("You can select multiple generation policies using the Control (Ctrl) key.");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InterfacePolicyLabel)
                .addContainerGap(291, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(policyInfoLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InterfacePolicyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(policyInfoLabel)
                .addGap(53, 53, 53))
        );

        jSplitPane1.setLeftComponent(jPanel5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                .addContainerGap())
        );

        ListsButtonPanel.setRightComponent(jPanel3);

        classesLabel.setText("Classes");

        classTable.setAutoCreateRowSorter(true);
        classTable.setModel(new ClassReusabilityTableModel(classesToShow));
        classTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(classTable);
        classTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(classesLabel)
                        .addContainerGap(583, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE))
        );

        ListsButtonPanel.setLeftComponent(jPanel4);

        TopBottomPanel.setTopComponent(ListsButtonPanel);

        generatedFilesArea.setColumns(20);
        generatedFilesArea.setEditable(false);
        generatedFilesArea.setRows(5);
        jScrollPane3.setViewportView(generatedFilesArea);

        TopBottomPanel.setBottomComponent(jScrollPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TopBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1148, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TopBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFilesActionPerformed
        if (this.generatedFilesArea.isVisible()) {
            generatedFilesArea.setVisible(false);
            this.showFiles.setText("Show Generated Files >>");
        } else {
            generatedFilesArea.setVisible(true);
            this.generatedFilesArea.setText("");
            for (String filename : maker.getGeneratedFiles()) {
                this.generatedFilesArea.append(filename + "\n");
            }
            this.showFiles.setText("Show Generated Files <<");
        }
        this.invalidate();
        ((JDialog) this.getParent().getParent().getParent()).doLayout();
//        ((JDialog)this.getParent().getParent().getParent()).pack();
    }//GEN-LAST:event_showFilesActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        if (!setPolicy()) {
            return;
        }
        JDialog waitDialog = new JDialog((JDialog) this.getParent().getParent().getParent(), "Generating Files...");
        waitDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);

        JComponent newContentPane = new JPanel();
        newContentPane.setLayout(new FlowLayout());
        newContentPane.add(new JLabel("Please wait while generating files..."));
        waitDialog.setContentPane(newContentPane);
        waitDialog.pack();
        waitDialog.setEnabled(true);
        waitDialog.setVisible(true);

        String componentName = this.componentNameField.getText();
        if (componentName == null || componentName.isEmpty()) {
            componentName = selectedClass.getName();
        }
        Set<String> classes = new HashSet<String>();
        classes.add(ClassAnalysis.classAnalysisToSrcPath(selectedClass, this.reuseProject.getSrcDir()));
        try {

            maker.makeComponent(componentName, classes);
        } catch (BinaryFileNotFoundException ex) {
            Logger.getLogger(DependencyMakerPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SourceFileNotFoundException ex) {
            Logger.getLogger(DependencyMakerPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ReuseProjectNotSetException ex) {
            Logger.getLogger(DependencyMakerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (GeneratedComponent component : maker.getGenaratedComponents()) {
            if (component.getComponentName().equals(componentName)) {
                component.setComponentCentreClass(selectedClass.getName());
            }
        }
        this.componentNameField.setText(null);
        this.showFiles.setEnabled(true);
        waitDialog.dispose();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void componentNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_componentNameFieldFocusGained
        this.componentNameField.setSelectionStart(0);
        this.componentNameField.setSelectionEnd(this.componentNameField.getText().length());
    }//GEN-LAST:event_componentNameFieldFocusGained

    private void InterfacePolicyListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_InterfacePolicyListValueChanged
        reassessGenerateButtonEnablement();
    }//GEN-LAST:event_InterfacePolicyListValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel InterfacePolicyLabel;
    private javax.swing.JList InterfacePolicyList;
    private javax.swing.JSplitPane ListsButtonPanel;
    private javax.swing.JSplitPane TopBottomPanel;
    private javax.swing.JTable classTable;
    private javax.swing.JLabel classesLabel;
    private javax.swing.JTextField componentNameField;
    private javax.swing.JLabel componentNameLabel;
    private javax.swing.JButton generateButton;
    private javax.swing.JTextArea generatedFilesArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel policyInfoLabel;
    private javax.swing.JButton showFiles;
    // End of variables declaration//GEN-END:variables

    private void addTableListener() {
        this.classTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent lse) {
                int selectedRow = classTable.getSelectedRow();
                reassessGenerateButtonEnablement();
                if (selectedRow >= 0) {
                    selectedRow = classTable.convertRowIndexToModel(selectedRow);

                    ClassReusabilityTableModel model = (ClassReusabilityTableModel) classTable.getModel();
                    selectedClass = model.getRowObject(selectedRow);

                    if (selectedClass == null) {
                        componentNameField.setText(null);
                        componentNameField.setEnabled(false);
                    } else {
                        componentNameField.setText(selectedClass.getName());
                        componentNameField.setEnabled(true);
                    }
                }
            }
        });
    }
}
