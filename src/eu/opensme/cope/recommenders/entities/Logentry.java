package eu.opensme.cope.recommenders.entities;
// Generated 11 ��� 2011 11:25:48 �� by Hibernate Tools 3.2.1.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Logentries generated by hbm2java
 */
@Entity
@Table(name = "logentries", catalog = "dependencies")
public class Logentry implements java.io.Serializable {

    private Long logentryid;
    private Log log;
    private String author;
    private Date date;
    private Long revision;
    private String message;
    private Set<Path> paths = new HashSet(0);

    public Logentry() {
    }

    public Logentry(Log log, String author, Date date, Long revision, String message, Set<Path> paths) {
        this.log = log;
        this.author = author;
        this.date = date;
        this.revision = revision;
        this.message = message;
        this.paths = paths;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "logentryid", unique = true, nullable = false)
    public Long getLogentryid() {
        return this.logentryid;
    }

    public void setLogentryid(Long logentryid) {
        this.logentryid = logentryid;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "logid")
    public Log getLogs() {
        return this.log;
    }

    public void setLogs(Log logs) {
        this.log = logs;
    }

    @Column(name = "author", length = 100)
    public String getAuthor() {
        return this.author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "\"date\"", length = 19)
    public Date getDate() {
        return this.date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    @Column(name = "revision")
    public Long getRevision() {
        return this.revision;
    }

    public void setRevision(Long revision) {
        this.revision = revision;
    }

    @Column(name = "message", length = 65535)
    public String getMessage() {
        return this.message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "logentry")
    public Set<Path> getPaths() {
        return this.paths;
    }

    public void setPaths(Set<Path> paths) {
        this.paths = paths;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        Long id = this.getLogentryid();
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Logentry)) {
            return false;
        }
        Logentry other = (Logentry) object;
        Long id = this.getLogentryid();
        Long otherId = other.getLogentryid();
        if ((id == null && otherId != null) || (id != null && !id.equals(otherId))) {
            return false;
        }
        return true;
    }
}
