package eu.opensme.cope.recommenders.entities;
// Generated Apr 24, 2012 1:14:55 PM by Hibernate Tools 3.2.1.GA


import eu.opensme.cope.analyzers.dependencyTypeAnalyzer.SubtypeDependencyEnum;
import eu.opensme.cope.analyzers.dependencyTypeAnalyzer.TypeDependencyEnum;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * DependenciesType generated by hbm2java
 */
@Entity
@Table(name="dependenciesType"
    ,catalog="dependencies"
)
public class DependenciesType  implements java.io.Serializable {


     private DependenciesTypeId id;
     private ClassAnalysis classesByDependee;
     private ClassAnalysis classesByDepencency;
     private Integer times;

    public DependenciesType() {
    }

	
    public DependenciesType(DependenciesTypeId id, ClassAnalysis classesByDependee, ClassAnalysis classesByDepencency) {
        this.id = id;
        this.classesByDependee = classesByDependee;
        this.classesByDepencency = classesByDepencency;
    }
    public DependenciesType(DependenciesTypeId id, ClassAnalysis classesByDependee, ClassAnalysis classesByDepencency, Integer times) {
       this.id = id;
       this.classesByDependee = classesByDependee;
       this.classesByDepencency = classesByDepencency;
       this.times = times;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="dependee", column=@Column(name="dependee", nullable=false) ), 
        @AttributeOverride(name="depencency", column=@Column(name="depencency", nullable=false) ), 
        @AttributeOverride(name="depencencyType", column=@Column(name="depencencyType", nullable=false, length=40) ), 
        @AttributeOverride(name="depencencySubType", column=@Column(name="depencencySubType", nullable=false, length=40) ) } )
    public DependenciesTypeId getId() {
        return this.id;
    }
    
    public void setId(DependenciesTypeId id) {
        this.id = id;
    }
    
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="dependee", nullable=false, insertable=false, updatable=false)
    public ClassAnalysis getClassesByDependee() {
        return this.classesByDependee;
    }
    
    public void setClassesByDependee(ClassAnalysis classesByDependee) {
        this.classesByDependee = classesByDependee;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="depencency", nullable=false, insertable=false, updatable=false)
    public ClassAnalysis getClassesByDepencency() {
        return this.classesByDepencency;
    }
    
    public void setClassesByDepencency(ClassAnalysis classesByDepencency) {
        this.classesByDepencency = classesByDepencency;
    }
    
    @Column(name="times")
    public Integer getTimes() {
        return this.times;
    }
    
    public void setTimes(Integer times) {
        this.times = times;
    }

//    @Transient
//    public TypeDependencyEnum getType(){
//        return TypeDependencyEnum.valueOf(this.id.getDepencencyType());
//    }
//
//    @Transient
//    public SubtypeDependencyEnum getSubtype(){
//        return SubtypeDependencyEnum.valueOf(this.id.getDepencencySubType());
//    }

}


