package eu.opensme.cope.recommenders.entities;
// Generated 11 ��� 2011 11:25:48 �� by Hibernate Tools 3.2.1.GA

import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;

/**
 * Projects generated by hbm2java
 */
@Entity
@Table(name = "projects", catalog = "dependencies")
public class Project implements java.io.Serializable {

    private Long projectid;
    private String projecttitle;
    private Log log;
    private Set<PackageAnalysis> packages = new HashSet(0);
    private Set<ClassAnalysis> classes = new HashSet(0);

    public Project() {
    }

    public Project(String projecttitle, Log log, Set<PackageAnalysis> packages, Set<ClassAnalysis> classes) {
        this.projecttitle = projecttitle;
        this.log = log;
        this.packages = packages;
        this.classes = classes;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "projectid", unique = true, nullable = false)
    public Long getProjectid() {
        return this.projectid;
    }

    public void setProjectid(Long projectid) {
        this.projectid = projectid;
    }

    @Column(name = "projecttitle", length = 100)
    public String getProjecttitle() {
        return this.projecttitle;
    }

    public void setProjecttitle(String projecttitle) {
        this.projecttitle = projecttitle;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "project")
    public Log getLog() {
        return this.log;
    }

    public void setLog(Log log) {
        this.log = log;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "project")
    public Set<PackageAnalysis> getPackages() {
        return this.packages;
    }

    public void setPackages(Set<PackageAnalysis> packages) {
        this.packages = packages;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "project")
    public Set<ClassAnalysis> getClasses() {
        return this.classes;
    }

    public void setClasses(Set<ClassAnalysis> classes) {
        this.classes = classes;
    }


    public void save() {
        AnnotationConfiguration configuration = new AnnotationConfiguration();
	SessionFactory  sessionFactory = configuration.configure().buildSessionFactory();
	Session session = sessionFactory.openSession();
	Transaction transaction = session.beginTransaction();
	transaction.begin();
	if (projecttitle==null || projecttitle.isEmpty()) {
            projecttitle = "NoName"+System.currentTimeMillis();
        }
        session.save(this);
	transaction.commit();
	session.close();

    }

    @Override
    public int hashCode() {
        int hash = 0;
        Long id = this.getProjectid();
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Project)) {
            return false;
        }
        Project other = (Project) object;
        Long id = this.getProjectid();
        Long otherId = other.getProjectid();
        if ((id == null && otherId != null) || (id != null && !id.equals(otherId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return this.getProjecttitle();
    }
}
