package eu.opensme.cope.knowledgemanager.gui.classification;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import org.openrdf.query.MalformedQueryException;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.config.RepositoryConfigException;
import eu.opensme.cope.knowledgemanager.api.ReuseApi;
import eu.opensme.cope.knowledgemanager.api.actions.Concept;
import eu.opensme.cope.knowledgemanager.api.actions.Domain;
import eu.opensme.cope.knowledgemanager.api.actions.MetaModel;
import eu.opensme.cope.knowledgemanager.api.dto.DomainTreeInfo;
import eu.opensme.cope.knowledgemanager.api.dto.KeyValue;
import eu.opensme.cope.knowledgemanager.utils.ProgressBarFrame;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.CustomDomainTree;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.CustomDomainTreeModel;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.CustomMetaModelTree;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.CustomMetaModelTreeModel;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.SelectConceptPanel;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.SelectDomainPanel;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.TreeDomainNodeData;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.TreeMetaModelNodeData;
import eu.opensme.cope.knowledgemanager.gui.management.InterfaceMethodAddPanel;
import eu.opensme.cope.knowledgemanager.gui.management.Management;
import eu.opensme.cope.knowledgemanager.gui.management.MyGlassPane;
import eu.opensme.cope.knowledgemanager.gui.management.QualityAttributeSelectPanel;
import eu.opensme.cope.knowledgemanager.gui.management.RoleSelectPanel;
import eu.opensme.cope.knowledgemanager.gui.management.list.SortedListKeyValueModel;
import eu.opensme.cope.knowledgemanager.gui.management.tree.TreeNodeData;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JLabel;
import javax.swing.ToolTipManager;

public class Classification extends javax.swing.JFrame {

    MyGlassPane glass = new MyGlassPane();
    SelectConceptPanel selectConceptPanel;
    SelectDomainPanel selectDomainPanel;
    InterfaceMethodAddPanel interfaceMethodAddPanel = new InterfaceMethodAddPanel();
    QualityAttributeSelectPanel attributeSelectPanel = new QualityAttributeSelectPanel();
    RoleSelectPanel roleSelectPanel = new RoleSelectPanel();
    private int selectedTab;
    private Management managementFrame;

    /** Creates new form Management */
    public Classification(final Management managementFrame) {
        this.managementFrame = managementFrame;

        initComponents();
        JLabel l = new JLabel("Return to Component Management Console");
        Font font = l.getFont();
        l.setFont(new Font(font.getFontName(), Font.BOLD, font.getSize()));
        l.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/component16x16.png")));
        jTabbedPane1.setTabComponentAt(3, l);
        initMyComponents();
        this.setGlassPane(glass);
        glass.setVisible(false);
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                Classification.this.setVisible(false);
                managementFrame.setVisible(true);
                //System.exit(1);
            }
        });

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        metaModelRightPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        domainRightPanel = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        jListDomainHasConcepts = new javax.swing.JList();
        jButtonSelectConcepts = new javax.swing.JButton();
        jButtonRemoveConceptsFromDomain = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        conceptRightPanel = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jListConceptHasDomains = new javax.swing.JList();
        jButtonSelectDomains = new javax.swing.JButton();
        jButtonRemoveDomains = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Component Classification Console");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/images/classify.png")).getImage());

        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(0, 0));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(0, 0));

        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(3, 3));

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setAutoscrolls(true);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(754, 302));
        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(0, 0));

        metaModelRightPanel.setBackground(new java.awt.Color(255, 255, 255));
        metaModelRightPanel.setAutoscrolls(true);
        metaModelRightPanel.setPreferredSize(new java.awt.Dimension(320, 550));
        metaModelRightPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        metaModelRightPanel.setVisible(false);

        jScrollPane2.setViewportView(metaModelRightPanel);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Component MetaModels", jPanel1);

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setLeftComponent(jScrollPane3);

        domainRightPanel.setBackground(new java.awt.Color(255, 255, 255));
        domainRightPanel.setPreferredSize(new java.awt.Dimension(400, 400));

        jPanel21.setBackground(new java.awt.Color(245, 245, 245));
        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(61, 128, 185), 2, true), "Has Concepts", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(238, 52, 0))); // NOI18N

        jListDomainHasConcepts.setVisibleRowCount(3);
        jScrollPane18.setViewportView(jListDomainHasConcepts);

        jButtonSelectConcepts.setBackground(new java.awt.Color(255, 255, 255));
        jButtonSelectConcepts.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonSelectConcepts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add16x16.png"))); // NOI18N
        jButtonSelectConcepts.setText("Select");
        jButtonSelectConcepts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSelectConcepts.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonSelectConcepts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectConceptsActionPerformed(evt);
            }
        });

        jButtonRemoveConceptsFromDomain.setBackground(new java.awt.Color(255, 255, 255));
        jButtonRemoveConceptsFromDomain.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonRemoveConceptsFromDomain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete16x16.png"))); // NOI18N
        jButtonRemoveConceptsFromDomain.setText("Remove");
        jButtonRemoveConceptsFromDomain.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRemoveConceptsFromDomain.setEnabled(false);
        jButtonRemoveConceptsFromDomain.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonRemoveConceptsFromDomain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveConceptsFromDomainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSelectConcepts)
                    .addComponent(jButtonRemoveConceptsFromDomain))
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(jButtonSelectConcepts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveConceptsFromDomain)))
                .addContainerGap())
        );

        javax.swing.GroupLayout domainRightPanelLayout = new javax.swing.GroupLayout(domainRightPanel);
        domainRightPanel.setLayout(domainRightPanelLayout);
        domainRightPanelLayout.setHorizontalGroup(
            domainRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(331, Short.MAX_VALUE))
        );
        domainRightPanelLayout.setVerticalGroup(
            domainRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(domainRightPanel);

        jSplitPane2.setRightComponent(jScrollPane4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Domains", jPanel2);

        jSplitPane3.setDividerLocation(250);
        jSplitPane3.setLeftComponent(jScrollPane5);

        conceptRightPanel.setBackground(new java.awt.Color(255, 255, 255));
        conceptRightPanel.setPreferredSize(new java.awt.Dimension(400, 400));

        jPanel22.setBackground(new java.awt.Color(245, 245, 245));
        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(61, 128, 185), 2, true), "Has Domains", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(238, 52, 0))); // NOI18N

        jListConceptHasDomains.setVisibleRowCount(3);
        jScrollPane19.setViewportView(jListConceptHasDomains);

        jButtonSelectDomains.setBackground(new java.awt.Color(255, 255, 255));
        jButtonSelectDomains.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonSelectDomains.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add16x16.png"))); // NOI18N
        jButtonSelectDomains.setText("Select");
        jButtonSelectDomains.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSelectDomains.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonSelectDomains.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectDomainsActionPerformed(evt);
            }
        });

        jButtonRemoveDomains.setBackground(new java.awt.Color(255, 255, 255));
        jButtonRemoveDomains.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButtonRemoveDomains.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete16x16.png"))); // NOI18N
        jButtonRemoveDomains.setText("Remove");
        jButtonRemoveDomains.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRemoveDomains.setEnabled(false);
        jButtonRemoveDomains.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButtonRemoveDomains.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveDomainsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSelectDomains)
                    .addComponent(jButtonRemoveDomains))
                .addContainerGap())
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addComponent(jButtonSelectDomains)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveDomains)))
                .addContainerGap())
        );

        javax.swing.GroupLayout conceptRightPanelLayout = new javax.swing.GroupLayout(conceptRightPanel);
        conceptRightPanel.setLayout(conceptRightPanelLayout);
        conceptRightPanelLayout.setHorizontalGroup(
            conceptRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(331, Short.MAX_VALUE))
        );
        conceptRightPanelLayout.setVerticalGroup(
            conceptRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        jScrollPane6.setViewportView(conceptRightPanel);

        jSplitPane3.setRightComponent(jScrollPane6);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Concepts", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 955, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Return to Ontology Management Console", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-996)/2, (screenSize.height-688)/2, 996, 688);
    }// </editor-fold>//GEN-END:initComponents

private void jButtonSelectConceptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectConceptsActionPerformed
    selectConceptPanel = new SelectConceptPanel((TreeDomainNodeData) ((CustomDomainTreeModel) jTreeConcept.getModel()).getRoot());

    int answer = JOptionPane.showConfirmDialog(this, selectConceptPanel, "Select Concept", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

    while (answer == JOptionPane.OK_OPTION
            && (selectConceptPanel.jTree1.getSelectionCount() == 0
            || ((TreeDomainNodeData) selectConceptPanel.jTree1.getSelectionPath().getLastPathComponent()).getName().equals("Concepts"))) {
        answer = JOptionPane.showConfirmDialog(this, selectConceptPanel, "Select Concept", JOptionPane.OK_CANCEL_OPTION);
    }
    if (answer != JOptionPane.CANCEL_OPTION && answer != JOptionPane.CLOSED_OPTION) {
        addSelectedConceptToDomain(((TreeDomainNodeData) jTreeDomain.getSelectionPath().getLastPathComponent()).getId(),
                ((TreeDomainNodeData) selectConceptPanel.jTree1.getSelectionPath().getLastPathComponent()).getId(), true);
    }

}//GEN-LAST:event_jButtonSelectConceptsActionPerformed

private void jButtonRemoveConceptsFromDomainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveConceptsFromDomainActionPerformed
    int n = JOptionPane.showConfirmDialog(this, "Are you sure?", "Confirmation Dialog", JOptionPane.YES_NO_OPTION);
    //yes -> 0, no -> 1
    if (n == 0) {
        Object[] selectedValues = jListDomainHasConcepts.getSelectedValues();
        if (selectedValues.length != 0) {
            String domainClassID = ((TreeDomainNodeData) jTreeDomain.getSelectionPath().getLastPathComponent()).getId();
            removeConceptsFromDomain(domainClassID, selectedValues, true);
        }
    }
}//GEN-LAST:event_jButtonRemoveConceptsFromDomainActionPerformed

private void jButtonSelectDomainsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectDomainsActionPerformed
    selectDomainPanel = new SelectDomainPanel((TreeDomainNodeData) ((CustomDomainTreeModel) jTreeDomain.getModel()).getRoot());

    int answer = JOptionPane.showConfirmDialog(this, selectDomainPanel, "Select Domain", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

    while (answer == JOptionPane.OK_OPTION
            && (selectDomainPanel.jTree1.getSelectionCount() == 0
            || ((TreeDomainNodeData) selectDomainPanel.jTree1.getSelectionPath().getLastPathComponent()).getName().equals("Domains"))) {
        answer = JOptionPane.showConfirmDialog(this, selectDomainPanel, "Select Domain", JOptionPane.OK_CANCEL_OPTION);
    }
    if (answer != JOptionPane.CANCEL_OPTION && answer != JOptionPane.CLOSED_OPTION) {
        addSelectedDomainToConcept(((TreeDomainNodeData) jTreeConcept.getSelectionPath().getLastPathComponent()).getId(),
                ((TreeDomainNodeData) selectDomainPanel.jTree1.getSelectionPath().getLastPathComponent()).getId(), true);
    }
}//GEN-LAST:event_jButtonSelectDomainsActionPerformed

private void jButtonRemoveDomainsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveDomainsActionPerformed
    int n = JOptionPane.showConfirmDialog(this, "Are you sure?", "Confirmation Dialog", JOptionPane.YES_NO_OPTION);
    //yes -> 0, no -> 1
    if (n == 0) {
        Object[] selectedValues = jListConceptHasDomains.getSelectedValues();
        if (selectedValues.length != 0) {
            String conceptClassID = ((TreeDomainNodeData) jTreeConcept.getSelectionPath().getLastPathComponent()).getId();
            removeDomainsFromConcept(conceptClassID, selectedValues, true);
        }
    }
}//GEN-LAST:event_jButtonRemoveDomainsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            //UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Classification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Classification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Classification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Classification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Classification(null).setVisible(true);
            }
        });

    }
    //<editor-fold defaultstate="collapsed" desc="gui fields">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel conceptRightPanel;
    private javax.swing.JPanel domainRightPanel;
    private javax.swing.JButton jButtonRemoveConceptsFromDomain;
    private javax.swing.JButton jButtonRemoveDomains;
    private javax.swing.JButton jButtonSelectConcepts;
    private javax.swing.JButton jButtonSelectDomains;
    private javax.swing.JList jListConceptHasDomains;
    private javax.swing.JList jListDomainHasConcepts;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel metaModelRightPanel;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
    CustomDomainTree jTreeDomain, jTreeConcept;
    CustomMetaModelTree jTreeMetaModel;
    JPopupMenu nodeDomainPopup, leafDomainPopup, nodeConceptPopup, leafConceptPopup;
    JPopupMenu rootMetaModelPopup, nodeMetaModelPopup, leafMetaModelPopup;
    GroupPanel groupPanel;
    LeafPanel leafPanel;
    public static ProgressBarFrame progressBar = new ProgressBarFrame("Please wait...");

    private void setProgressBar(boolean show, boolean showProgress) {
        if (showProgress) {
            glass.setVisible(show);
            progressBar.setVisible(show);
        }
    }

    private void initMyComponents() {
        progressBar.setIndeterminate(false);
        setProgressBar(true, true);
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                initMetaModelTab();
                initDomainJTree();
                initConceptJTree();
                initDomainsTab();
                initConceptsTab();
                handleLastTab();

                setProgressBar(false, true);
                progressBar.setIndeterminate(true);
                jScrollPane4.getVerticalScrollBar().setUnitIncrement(16);
                jScrollPane6.getVerticalScrollBar().setUnitIncrement(16);
            }
        });
    }

    private void initMetaModelTab() {

        TreeMetaModelNodeData root = getMetaModels(true);
        jTreeMetaModel = new CustomMetaModelTree(root);
        jTreeMetaModel.setAutoscrolls(true);
        jScrollPane1.setViewportView(jTreeMetaModel);
        jTreeMetaModel.setExpandsSelectedPaths(true);
        jTreeMetaModel.setCellRenderer(new MetaModelJTreeRenderer());
        metaModelRightPanel.setVisible(false);
        ToolTipManager.sharedInstance().registerComponent(jTreeMetaModel);

        jTreeMetaModel.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                TreePath selectionPath = jTreeMetaModel.getSelectionPath();
                if (selectionPath != null) {
                    TreeMetaModelNodeData selected = (TreeMetaModelNodeData) selectionPath.getLastPathComponent();
                    if (selected.getType().equals("root")) {
                        metaModelRightPanel.setVisible(false);
                        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
                    } else if (selected.getType().equals("group")) {
                        metaModelRightPanel.removeAll();
                        if (groupPanel == null) {
                            groupPanel = new GroupPanel(Classification.this, jTreeMetaModel, jTreeDomain);
                        }
                        metaModelRightPanel.setVisible(true);
                        metaModelRightPanel.add(groupPanel);
                        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

                        //clearGUI();
                        getGroupDetails(selected.getId(), true);
                    } else if (selected.getType().equals("leaf")) {
                        metaModelRightPanel.removeAll();
                        if (leafPanel == null) {
                            leafPanel = new LeafPanel(Classification.this, jTreeMetaModel, jTreeDomain, jTreeConcept);
                        }
                        metaModelRightPanel.setVisible(true);
                        metaModelRightPanel.add(leafPanel);
                        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

                        //clearGUI();                        
                        getLeafDetails(selected.getId(), true);
                    }
                }
            }
        });

        jTreeMetaModel.addMouseListener(new MetaModelPopupListener());

        rootMetaModelPopup = new JPopupMenu();
        nodeMetaModelPopup = new JPopupMenu();
        leafMetaModelPopup = new JPopupMenu();

        MetaModelMenuItemActionListener l = new MetaModelMenuItemActionListener(this);
        JMenuItem menuItem = new JMenuItem("Add Group", new javax.swing.ImageIcon(getClass().getResource("/images/group.png")));
        menuItem.addActionListener(l);
        rootMetaModelPopup.add(menuItem);

        menuItem = new JMenuItem("Add Group", new javax.swing.ImageIcon(getClass().getResource("/images/group.png")));
        menuItem.addActionListener(l);
        nodeMetaModelPopup.add(menuItem);
        menuItem = new JMenuItem("Add MetaModel", new javax.swing.ImageIcon(getClass().getResource("/images/metamodel.png")));
        menuItem.addActionListener(l);
        nodeMetaModelPopup.add(menuItem);
        menuItem = new JMenuItem("Rename Group", new javax.swing.ImageIcon(getClass().getResource("/images/rename16x16.png")));
        menuItem.addActionListener(l);
        nodeMetaModelPopup.add(menuItem);
        menuItem = new JMenuItem("Delete Group", new javax.swing.ImageIcon(getClass().getResource("/images/delete16x16.png")));
        menuItem.addActionListener(l);
        nodeMetaModelPopup.add(menuItem);

        menuItem = new JMenuItem("Rename MetaModel", new javax.swing.ImageIcon(getClass().getResource("/images/rename16x16.png")));
        menuItem.addActionListener(l);
        leafMetaModelPopup.add(menuItem);

        menuItem = new JMenuItem("Delete MetaModel", new javax.swing.ImageIcon(getClass().getResource("/images/delete16x16.png")));
        menuItem.addActionListener(l);
        leafMetaModelPopup.add(menuItem);

    }

    private void initDomainsTab() {
        SortedListKeyValueModel model = new SortedListKeyValueModel();
        jListDomainHasConcepts.setModel(model);
        jListDomainHasConcepts.setCellRenderer(new MyDomainListCellThing());
        jListDomainHasConcepts.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {

                    @Override
                    public void valueChanged(ListSelectionEvent event) {
                        if (!event.getValueIsAdjusting()) {
                            jButtonRemoveConceptsFromDomain.setEnabled(true);
                            if (jListDomainHasConcepts.getSelectedIndex() == -1) {
                                jButtonRemoveConceptsFromDomain.setEnabled(false);
                            }
                        }
                    }
                });
    }

    private void initConceptsTab() {
        SortedListKeyValueModel model = new SortedListKeyValueModel();
        jListConceptHasDomains.setModel(model);
        jListConceptHasDomains.setCellRenderer(new MyConceptListCellThing());
        jListConceptHasDomains.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {

                    @Override
                    public void valueChanged(ListSelectionEvent event) {
                        if (!event.getValueIsAdjusting()) {
                            jButtonRemoveDomains.setEnabled(true);
                            if (jListConceptHasDomains.getSelectedIndex() == -1) {
                                jButtonRemoveDomains.setEnabled(false);
                            }
                        }
                    }
                });
    }

    private void handleLastTab() {
        final int index = jTabbedPane1.getTabCount() - 1;
        jTabbedPane1.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                if (jTabbedPane1.getSelectedIndex() == index) {
                    jTabbedPane1.setSelectedIndex(selectedTab);
                    Classification.this.dispose();
                    managementFrame.setVisible(true);
                    TreePath selectionPath = managementFrame.jTree1.getSelectionPath();
                    if (selectionPath != null) {
                        TreeNodeData node = (TreeNodeData) selectionPath.getLastPathComponent();
                        if (node.getChildren() == null) {
                            managementFrame.getComponentDetails(node.getId(), true);
                        }
                    }
                } else {
                    selectedTab = jTabbedPane1.getSelectedIndex();
                }
            }
        });
    }

    private void initDomainJTree() {
        TreeDomainNodeData root = getDomains(true);
        jTreeDomain = new CustomDomainTree(root);
        jTreeDomain.setAutoscrolls(true);
        jScrollPane3.setViewportView(jTreeDomain);
        jTreeDomain.setExpandsSelectedPaths(true);
        jTreeDomain.setCellRenderer(new DomainJTreeRenderer());
        domainRightPanel.setVisible(false);
        jTreeDomain.expandAll();

        jTreeDomain.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {

                TreePath selectionPath = jTreeDomain.getSelectionPath();
                if (selectionPath != null) {
                    TreeDomainNodeData selected = (TreeDomainNodeData) selectionPath.getLastPathComponent();
                    if (selected.getName().equals("Domains")) {
                        domainRightPanel.setVisible(false);
                        jScrollPane4.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
                    } else {
                        domainRightPanel.setVisible(true);
                        jScrollPane4.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
                        //clearGUI();
                        getDomainDetails(selected.getId(), true);
                    }
                }
            }
        });

        jTreeDomain.addMouseListener(new DomainPopupListener());

        nodeDomainPopup = new JPopupMenu();
        leafDomainPopup = new JPopupMenu();

        DomainMenuItemActionListener l = new DomainMenuItemActionListener(this);
        JMenuItem menuItem = new JMenuItem("Add Domain", new javax.swing.ImageIcon(getClass().getResource("/images/subclass.png")));
        menuItem.addActionListener(l);
        nodeDomainPopup.add(menuItem);

//        menuItem = new JMenuItem("Add Subdomain", new javax.swing.ImageIcon(getClass().getResource("/images/subclass.png")));
//        menuItem.addActionListener(l);
//        leafDomainPopup.add(menuItem);

        menuItem = new JMenuItem("Rename", new javax.swing.ImageIcon(getClass().getResource("/images/rename16x16.png")));
        menuItem.addActionListener(l);
        leafDomainPopup.add(menuItem);

        menuItem = new JMenuItem("Delete", new javax.swing.ImageIcon(getClass().getResource("/images/delete16x16.png")));
        menuItem.addActionListener(l);
        leafDomainPopup.add(menuItem);
    }

    private void initConceptJTree() {
        TreeDomainNodeData root = getConcepts(true);
        jTreeConcept = new CustomDomainTree(root);
        jTreeConcept.setAutoscrolls(true);
        jScrollPane5.setViewportView(jTreeConcept);
        jTreeConcept.setExpandsSelectedPaths(true);
        jTreeConcept.setCellRenderer(new ConceptJTreeRenderer());
        conceptRightPanel.setVisible(false);
        jTreeConcept.expandAll();


        jTreeConcept.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {

                TreePath selectionPath = jTreeConcept.getSelectionPath();
                if (selectionPath != null) {
                    TreeDomainNodeData selected = (TreeDomainNodeData) selectionPath.getLastPathComponent();
                    if (selected.getName().equals("Concepts")) {
                        conceptRightPanel.setVisible(false);
                        jScrollPane6.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
                    } else {
                        conceptRightPanel.setVisible(true);
                        jScrollPane6.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
                        //clearGUI();
                        getConceptDetails(selected.getId(), true);
                    }
                }
            }
        });

        jTreeConcept.addMouseListener(new ConceptPopupListener());

        ConceptMenuItemActionListener l = new ConceptMenuItemActionListener(this);
        nodeConceptPopup = new JPopupMenu();
        leafConceptPopup = new JPopupMenu();

        JMenuItem menuItem = new JMenuItem("Add Concept", new javax.swing.ImageIcon(getClass().getResource("/images/subclass.png")));
        menuItem.addActionListener(l);
        nodeConceptPopup.add(menuItem);

//        menuItem = new JMenuItem("Add Subconcept", new javax.swing.ImageIcon(getClass().getResource("/images/subclass.png")));
//        menuItem.addActionListener(l);
//        leafConceptPopup.add(menuItem);

        menuItem = new JMenuItem("Rename", new javax.swing.ImageIcon(getClass().getResource("/images/rename16x16.png")));
        menuItem.addActionListener(l);
        leafConceptPopup.add(menuItem);

        menuItem = new JMenuItem("Delete", new javax.swing.ImageIcon(getClass().getResource("/images/delete16x16.png")));
        menuItem.addActionListener(l);
        leafConceptPopup.add(menuItem);
    }

    private TreeDomainNodeData getDomains(boolean showProgress) {
        ReuseApi api = getAPI(showProgress);
        Domain dom = new Domain(api);

        try {

            TreeDomainNodeData root = dom.buildDomainHierarchy();
            return root;
        } catch (RepositoryException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedQueryException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (QueryEvaluationException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            api.getDatabase().close();
        }
        return null;
    }

    private TreeDomainNodeData getConcepts(boolean showProgress) {
        ReuseApi api = getAPI(showProgress);
        Concept con = new Concept(api);

        try {
            TreeDomainNodeData root = con.buildConceptHierarchy();
            return root;
        } catch (RepositoryException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedQueryException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (QueryEvaluationException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            api.getDatabase().close();
        }
        return null;
    }

    private void getDomainDetails(final String domainClassID, final boolean showProgress) {
        setProgressBar(true, showProgress);
        jListDomainHasConcepts.clearSelection();
        ((SortedListKeyValueModel) jListDomainHasConcepts.getModel()).clear();

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Domain dom = new Domain(api);
                ArrayList<KeyValue> result = null;

                try {
                    result = dom.getDomainConcepts(domainClassID);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting domain concepts", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting domain concepts", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting domain concepts", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                SortedListKeyValueModel r1 = (SortedListKeyValueModel) jListDomainHasConcepts.getModel();
                r1.addAll(result.toArray());

                jTreeDomain.expandAll();

                setProgressBar(false, showProgress);
            }
        }.start();
    }

    private void getGroupDetails(final String groupClassID, final boolean showProgress) {
        setProgressBar(true, showProgress);
        groupPanel.clearGUI();

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);
                ArrayList<KeyValue> result = null;

                try {
                    result = meta.getGroupDomains(groupClassID);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting group domain", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting group domain", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting group domain", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                SortedListKeyValueModel r1 = (SortedListKeyValueModel) groupPanel.jListGroupDomain.getModel();
                r1.addAll(result.toArray());
                //show the select button only when the list is empty..there should be only a single domain (and subclasses)
                if (((SortedListKeyValueModel) groupPanel.jListGroupDomain.getModel()).getSize() > 0) {
                    groupPanel.jButtonSelectDomain.setEnabled(false);
                } else {
                    groupPanel.jButtonSelectDomain.setEnabled(true);
                }

                setProgressBar(false, showProgress);
            }
        }.start();
    }

    private void getLeafDetails(final String leafClassID, final boolean showProgress) {
        setProgressBar(true, showProgress);
        leafPanel.clearGUI();

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);
                ArrayList<KeyValue> resultDomains = null;
                ArrayList<KeyValue> resultConcepts = null;
                KeyValue tier = null;
                try {
                    resultDomains = meta.getGroupDomains(leafClassID);
                    resultConcepts = meta.getGroupConcepts(leafClassID);
                    tier = meta.getMetaModelTier(leafClassID);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting group domain", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting group domain", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting group domain", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }


                SortedListKeyValueModel r1 = (SortedListKeyValueModel) leafPanel.jListGroupDomain.getModel();
                r1.addAll(resultDomains.toArray());
                //show the select button only when the list is empty..there should be only a single domain (and subclasses)
                if (((SortedListKeyValueModel) leafPanel.jListGroupDomain.getModel()).getSize() > 0) {
                    leafPanel.jButtonSelectDomain.setEnabled(false);
                    leafPanel.jButtonSelectConcepts.setEnabled(true);
                } else {
                    leafPanel.jButtonSelectDomain.setEnabled(true);
                    leafPanel.jButtonSelectConcepts.setEnabled(false);
                }

                SortedListKeyValueModel r2 = (SortedListKeyValueModel) leafPanel.jListGroupConcepts.getModel();
                r2.addAll(resultConcepts.toArray());
//                //show the select button only when the list is empty..there should be only a single domain (and subclasses)
//                if (((SortedListKeyValueModel) leafPanel.jListGroupConcepts.getModel()).getSize() > 0) {
//                    leafPanel.jButtonSelectConcepts.setEnabled(false);
//                } else {
//                    leafPanel.jButtonSelectConcepts.setEnabled(true);
//                }

                leafPanel.fromLoading = true;
                if (tier == null) {
                    leafPanel.jComboBoxTier.setSelectedIndex(-1);
                } else {
                    leafPanel.jComboBoxTier.setSelectedItem(tier.getValue());
                }
                leafPanel.fromLoading = false;

                setProgressBar(false, showProgress);
            }
        }.start();
    }

    private void getConceptDetails(final String conceptClassID, final boolean showProgress) {
        setProgressBar(true, showProgress);
        jListConceptHasDomains.clearSelection();
        ((SortedListKeyValueModel) jListConceptHasDomains.getModel()).clear();

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Concept conc = new Concept(api);
                ArrayList<KeyValue> result = null;

                try {
                    result = conc.getConceptDomainsAsInstances(conceptClassID);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting domain concepts", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting domain concepts", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error getting domain concepts", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                SortedListKeyValueModel r1 = (SortedListKeyValueModel) jListConceptHasDomains.getModel();
                r1.addAll(result.toArray());

                jTreeConcept.expandAll();
                setProgressBar(false, showProgress);
            }
        }.start();
    }

    private void addSelectedConceptToDomain(final String domainClassID, final String conceptInstanceID, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Domain dom = new Domain(api);

                try {
                    dom.addConcept(domainClassID, conceptInstanceID);

                    TreePath selectionPath = jTreeConcept.getSelectionPath();
                    if (selectionPath != null) {
                        getDomainDetails(domainClassID, false);
                        getConceptDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), true);
                    } else {
                        getDomainDetails(domainClassID, true);
                    }

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during concept addition", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        }.start();
    }

    private void addSelectedDomainToConcept(final String conceptClassID, final String domainClassID, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Concept conc = new Concept(api);

                try {
                    conc.addDomain(conceptClassID, domainClassID);

                    TreePath selectionPath = jTreeDomain.getSelectionPath();
                    if (selectionPath != null) {
                        getConceptDetails(conceptClassID, false);
                        getDomainDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), true);
                    } else {
                        getConceptDetails(conceptClassID, true);
                    }

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain addition", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        }.start();
    }

    private void removeConceptsFromDomain(final String domainClassID, final Object[] selectedValues, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Domain dom = new Domain(api);

                try {
                    dom.removeConceptsFromDomain(domainClassID, selectedValues);

                    TreePath selectionPath = jTreeConcept.getSelectionPath();
                    if (selectionPath != null) {
                        getDomainDetails(domainClassID, false);
                        getConceptDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), true);
                    } else {
                        getDomainDetails(domainClassID, true);
                    }

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during concept removal", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        }.start();

    }

    private void removeDomainsFromConcept(final String conceptClassID, final Object[] selectedValues, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Concept conc = new Concept(api);

                try {
                    conc.removeDomainsFromConcept(conceptClassID, selectedValues);

                    TreePath selectionPath = jTreeDomain.getSelectionPath();
                    if (selectionPath != null) {
                        getConceptDetails(conceptClassID, false);
                        getDomainDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), true);
                    } else {
                        getConceptDetails(conceptClassID, true);
                    }


                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain removal", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        }.start();

    }

    private TreeMetaModelNodeData getMetaModels(boolean showProgress) {
        ReuseApi api = getAPI(showProgress);
        MetaModel meta = new MetaModel(api);

        try {

            TreeMetaModelNodeData root = meta.buildMetaModelHierarchy();
            return root;
        } catch (RepositoryException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedQueryException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (QueryEvaluationException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            api.getDatabase().close();
        }
        return null;
    }

    void removeDomainsFromGroup(final String groupClassID, final Object[] selectedValues, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    meta.removeDomainsFromGroup(groupClassID, selectedValues);
                    getGroupDetails(groupClassID, true);

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain removal", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        }.start();
    }

    void addSelectedDomainToLeaf(final String leafClassID, final String domainClassID, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    meta.addDomainToGroup(leafClassID, domainClassID);
                    getLeafDetails(leafClassID, true);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain addition", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                setProgressBar(false, showProgress);

            }
        }.start();
    }

    void addSelectedConceptToLeaf(final String leafClassID, final String conceptClassID, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    meta.addConceptToGroup(leafClassID, conceptClassID);
                    getLeafDetails(leafClassID, true);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during concept addition", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                setProgressBar(false, showProgress);

            }
        }.start();
    }

    void removeDomainsFromLeaf(final String groupClassID, final Object[] selectedValues, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    meta.removeDomainsFromGroup(groupClassID, selectedValues);
                    getLeafDetails(groupClassID, true);

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain removal", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        }.start();
    }

    void removeConceptsFromLeaf(final String groupClassID, final Object[] selectedValues, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    meta.removeConceptsFromGroup(groupClassID, selectedValues);
                    getLeafDetails(groupClassID, true);

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain removal", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        }.start();
    }

    public void addTierToMetaModel(final String metamodelID, final String tier, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    meta.addTierToMetaModel(metamodelID, tier);
                    getLeafDetails(metamodelID, true);

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during tier addition", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        }.start();
    }

    void removeTierFromMetaModel(final String metamodelID, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    meta.removeTierFromMetaModel(metamodelID);
                    getLeafDetails(metamodelID, true);

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during tier removal", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

            }
        }.start();
    }

    private class DomainPopupListener extends MouseAdapter {

        public DomainPopupListener() {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            //int selRow = jTree1.getRowForLocation(e.getX(), e.getY());
            TreePath selPath = jTreeDomain.getPathForLocation(e.getX(), e.getY());
            if (selPath != null) {
                jTreeDomain.setSelectionPath(selPath);
                maybeShowPopup((TreeDomainNodeData) selPath.getLastPathComponent(), e);
            }
        }

        private void maybeShowPopup(TreeDomainNodeData node, MouseEvent e) {
            if (e.getButton() == MouseEvent.BUTTON3) {
                if (node.getName().equals("Domains")) {
                    nodeDomainPopup.show(e.getComponent(), e.getX(), e.getY());
                } else {
                    leafDomainPopup.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        }
    }

    private class ConceptPopupListener extends MouseAdapter {

        public ConceptPopupListener() {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            //int selRow = jTree1.getRowForLocation(e.getX(), e.getY());
            TreePath selPath = jTreeConcept.getPathForLocation(e.getX(), e.getY());
            if (selPath != null) {
                jTreeConcept.setSelectionPath(selPath);

                maybeShowPopup((TreeDomainNodeData) selPath.getLastPathComponent(), e);
            }
        }

        private void maybeShowPopup(TreeDomainNodeData node, MouseEvent e) {
            if (e.getButton() == MouseEvent.BUTTON3) {
                if (node.getName().equals("Concepts")) {
                    nodeConceptPopup.show(e.getComponent(), e.getX(), e.getY());
                } else {
                    leafConceptPopup.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        }
    }

    private class MetaModelPopupListener extends MouseAdapter {

        public MetaModelPopupListener() {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            //int selRow = jTree1.getRowForLocation(e.getX(), e.getY());
            TreePath selPath = jTreeMetaModel.getPathForLocation(e.getX(), e.getY());
            if (selPath != null) {
                jTreeMetaModel.setSelectionPath(selPath);
                maybeShowPopup((TreeMetaModelNodeData) selPath.getLastPathComponent(), e);
            }
        }

        private void maybeShowPopup(TreeMetaModelNodeData node, MouseEvent e) {
            if (e.getButton() == MouseEvent.BUTTON3) {
                if (node.getType().equals("root")) {
                    rootMetaModelPopup.show(e.getComponent(), e.getX(), e.getY());
                } else if (node.getType().equals("group")) {
                    nodeMetaModelPopup.show(e.getComponent(), e.getX(), e.getY());
                } else if (node.getType().equals("leaf")) {
                    leafMetaModelPopup.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        }
    }

    private class DomainMenuItemActionListener implements ActionListener {

        JFrame frame;

        public DomainMenuItemActionListener(JFrame frame) {
            this.frame = frame;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            JMenuItem selectedMenu = (JMenuItem) e.getSource();
            //do actions....
            if (selectedMenu.getText().equals("Add Domain")) {
                TreePath baseClassPath = jTreeDomain.getSelectionPath();
                String name = (String) JOptionPane.showInputDialog(frame, "Give the name of the new domain", "Domain Name", JOptionPane.PLAIN_MESSAGE, null, null, null);
                while (name != null && name.trim().length() == 0) {
                    name = (String) JOptionPane.showInputDialog(frame, "Give the name of the new domain", "Domain Name", JOptionPane.PLAIN_MESSAGE, null, null, null);
                }
                if (name != null) {
                    if (((CustomDomainTreeModel) jTreeDomain.getModel()).containsDomainName(name)) {
                        JOptionPane.showMessageDialog(Classification.this, "Domain already exists", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        addDomainSubclass(baseClassPath, name, true);
                    }

                }
            } else if (selectedMenu.getText().equals("Rename")) {
                TreePath leafPath = jTreeDomain.getSelectionPath();
                String exName = ((TreeDomainNodeData) leafPath.getLastPathComponent()).getName();
                String name = (String) JOptionPane.showInputDialog(frame, "Give the new name", "Change Name", JOptionPane.PLAIN_MESSAGE, null, null, exName);
                while (name != null && name.trim().length() == 0) {
                    name = (String) JOptionPane.showInputDialog(frame, "Give the new name", "Change Name", JOptionPane.PLAIN_MESSAGE, null, null, exName);
                }
                if (name != null) {
                    if (((CustomDomainTreeModel) jTreeDomain.getModel()).containsDomainName(name)) {
                        JOptionPane.showMessageDialog(Classification.this, "Domain already exists", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        renameDomain(leafPath, name, true);
                    }
                }
            } else if (selectedMenu.getText().equals("Delete")) {
                TreePath leafPath = jTreeDomain.getSelectionPath();
                int n = JOptionPane.showConfirmDialog(frame, "Are you sure?", "Confirmation Dialog", JOptionPane.YES_NO_OPTION);
                //yes -> 0, no -> 1
                if (n == 0) {
                    deleteDomain(leafPath, true);
                }
            }
        }
    }

    private void deleteDomain(final TreePath leafPath, final boolean showProgress) {
        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Domain dom = new Domain(api);

                try {
                    TreeDomainNodeData nodeToDelete = (TreeDomainNodeData) leafPath.getLastPathComponent();
                    dom.deleteHierarchy(nodeToDelete.getId());
                    ArrayList<TreeDomainNodeData> children = ((TreeDomainNodeData) leafPath.getParentPath().getLastPathComponent()).getChildren();
                    int index = children.indexOf(nodeToDelete);
                    children.remove(nodeToDelete);

                    ((CustomDomainTreeModel) jTreeDomain.getModel()).fireTreeNodesDeleted(leafPath.getParentPath(), nodeToDelete, index);
                    jTreeDomain.setSelectionPath(leafPath.getParentPath());

                    //update metamodels tree
                    boolean flag = false;
                    TreePath selected = jTreeMetaModel.getSelectionPath();
                    if (selected != null) {
                        TreeMetaModelNodeData nodeData = (TreeMetaModelNodeData) selected.getLastPathComponent();
                        if (nodeData.getType().equals("group")) {
                            flag = true;
                            getGroupDetails(nodeData.getId(), false);
                        } else if (nodeData.getType().equals("root")) {
                        } else if (nodeData.getType().equals("leaf")) {
                            flag = true;
                            getLeafDetails(nodeData.getId(), false);
                        }
                    }

                    TreePath selectionPath = jTreeConcept.getSelectionPath();
                    if (selectionPath != null) {
                        flag = true;
                        getConceptDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), false);
                    }

                    setProgressBar(false, showProgress);

                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain deletion", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }


            }
        });
    }

    private class ConceptMenuItemActionListener implements ActionListener {

        JFrame frame;

        public ConceptMenuItemActionListener(JFrame frame) {
            this.frame = frame;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            JMenuItem selectedMenu = (JMenuItem) e.getSource();
            //do actions....
            if (selectedMenu.getText().equals("Add Concept")) {
                TreePath baseClassPath = jTreeConcept.getSelectionPath();
                String name = (String) JOptionPane.showInputDialog(frame, "Give the name of the new concept", "Concept Name", JOptionPane.PLAIN_MESSAGE, null, null, null);
                while (name != null && name.trim().length() == 0) {
                    name = (String) JOptionPane.showInputDialog(frame, "Give the name of the new concept", "Concept Name", JOptionPane.PLAIN_MESSAGE, null, null, null);
                }
                if (name != null) {
                    if (((CustomDomainTreeModel) jTreeConcept.getModel()).containsDomainName(name)) {
                        JOptionPane.showMessageDialog(Classification.this, "Concept already exists", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        addConceptSubclass(baseClassPath, name, true);
                    }
                }
            } else if (selectedMenu.getText().equals("Rename")) {
                TreePath leafPath = jTreeConcept.getSelectionPath();
                String exName = ((TreeDomainNodeData) leafPath.getLastPathComponent()).getName();
                String name = (String) JOptionPane.showInputDialog(frame, "Give the new name", "Change Name", JOptionPane.PLAIN_MESSAGE, null, null, exName);
                while (name != null && name.trim().length() == 0) {
                    name = (String) JOptionPane.showInputDialog(frame, "Give the new name", "Change Name", JOptionPane.PLAIN_MESSAGE, null, null, exName);
                }
                if (name != null) {
                    if (((CustomDomainTreeModel) jTreeConcept.getModel()).containsDomainName(name)) {
                        JOptionPane.showMessageDialog(Classification.this, "Concept already exists", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        renameConcept(leafPath, name, true);
                    }
                }
            } else if (selectedMenu.getText().equals("Delete")) {
                TreePath leafPath = jTreeConcept.getSelectionPath();
                int n = JOptionPane.showConfirmDialog(frame, "Are you sure?", "Confirmation Dialog", JOptionPane.YES_NO_OPTION);
                //yes -> 0, no -> 1
                if (n == 0) {
                    deleteConcept(leafPath, true);
                }
            }
        }
    }

    private class MetaModelMenuItemActionListener implements ActionListener {

        JFrame frame;

        public MetaModelMenuItemActionListener(JFrame frame) {
            this.frame = frame;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            JMenuItem selectedMenu = (JMenuItem) e.getSource();
            //do actions....
            if (selectedMenu.getText().equals("Add Group")) {
                TreePath baseClassPath = jTreeMetaModel.getSelectionPath();
                String name = (String) JOptionPane.showInputDialog(frame, "Give the name of the new group", "Group Name", JOptionPane.PLAIN_MESSAGE, null, null, null);
                while (name != null && name.trim().length() == 0) {
                    name = (String) JOptionPane.showInputDialog(frame, "Give the name of the new group", "Group Name", JOptionPane.PLAIN_MESSAGE, null, null, null);
                }
                if (name != null) {
                    if (((CustomMetaModelTreeModel) jTreeMetaModel.getModel()).containsMetaModelName(name)) {
                        JOptionPane.showMessageDialog(Classification.this, "Name already exists", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        addMetaModelGroup(baseClassPath, name, true);
                    }
                }
            } else if (selectedMenu.getText().equals("Rename Group")) {
                TreePath leafPath = jTreeMetaModel.getSelectionPath();
                String exName = ((TreeMetaModelNodeData) leafPath.getLastPathComponent()).getName();
                String name = (String) JOptionPane.showInputDialog(frame, "Give the new name", "Change Name", JOptionPane.PLAIN_MESSAGE, null, null, exName);
                while (name != null && name.trim().length() == 0) {
                    name = (String) JOptionPane.showInputDialog(frame, "Give the new name", "Change Name", JOptionPane.PLAIN_MESSAGE, null, null, exName);
                }
                if (name != null) {
                    if (((CustomMetaModelTreeModel) jTreeMetaModel.getModel()).containsMetaModelName(name)) {
                        JOptionPane.showMessageDialog(Classification.this, "Name already exists", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        if (((TreeMetaModelNodeData) leafPath.getLastPathComponent()).getType().equals("group")) {
                            renameGroup(leafPath, name, true);
                        } else {
                            //renameMetaModel();
                        }
                    }
                }
            } else if (selectedMenu.getText().equals("Delete Group")) {
                TreePath leafPath = jTreeMetaModel.getSelectionPath();
                int n = JOptionPane.showConfirmDialog(frame, "Are you sure?", "Confirmation Dialog", JOptionPane.YES_NO_OPTION);
                //yes -> 0, no -> 1
                if (n == 0) {
                    deleteGroup(leafPath, true);
                }
            } else if (selectedMenu.getText().equals("Add MetaModel")) {
                TreePath baseClassPath = jTreeMetaModel.getSelectionPath();
                String name = (String) JOptionPane.showInputDialog(frame, "Give the name of the new meta model", "MetaModel Name", JOptionPane.PLAIN_MESSAGE, null, null, null);
                while (name != null && name.trim().length() == 0) {
                    name = (String) JOptionPane.showInputDialog(frame, "Give the name of the new meta model", "MetaModel Name", JOptionPane.PLAIN_MESSAGE, null, null, null);
                }
                if (name != null) {
                    if (((CustomMetaModelTreeModel) jTreeMetaModel.getModel()).containsMetaModelName(name)) {
                        JOptionPane.showMessageDialog(Classification.this, "Name already exists", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        addMetaModel(baseClassPath, name, true);
                    }
                }
            } else if (selectedMenu.getText().equals("Delete MetaModel")) {
                TreePath leafPath = jTreeMetaModel.getSelectionPath();
                int n = JOptionPane.showConfirmDialog(frame, "Are you sure?", "Confirmation Dialog", JOptionPane.YES_NO_OPTION);
                //yes -> 0, no -> 1
                if (n == 0) {
                    deleteGroup(leafPath, true);
                }
            } else if (selectedMenu.getText().equals("Rename MetaModel")) {
                TreePath leafPath = jTreeMetaModel.getSelectionPath();
                String exName = ((TreeMetaModelNodeData) leafPath.getLastPathComponent()).getName();
                String name = (String) JOptionPane.showInputDialog(frame, "Give the new name", "Change Name", JOptionPane.PLAIN_MESSAGE, null, null, exName);
                while (name != null && name.trim().length() == 0) {
                    name = (String) JOptionPane.showInputDialog(frame, "Give the new name", "Change Name", JOptionPane.PLAIN_MESSAGE, null, null, exName);
                }
                if (name != null) {
                    if (((CustomMetaModelTreeModel) jTreeMetaModel.getModel()).containsMetaModelName(name)) {
                        JOptionPane.showMessageDialog(Classification.this, "Name already exists", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        renameGroup(leafPath, name, true);
                    }
                }
            }
        }
    }

    private void deleteGroup(final TreePath leafPath, final boolean showProgress) {
        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    TreeMetaModelNodeData nodeToDelete = (TreeMetaModelNodeData) leafPath.getLastPathComponent();
                    meta.deleteHierarchy(nodeToDelete.getId());

                    ArrayList<TreeMetaModelNodeData> children = ((TreeMetaModelNodeData) leafPath.getParentPath().getLastPathComponent()).getChildren();
                    int index = children.indexOf(nodeToDelete);
                    children.remove(nodeToDelete);

                    ((CustomMetaModelTreeModel) jTreeMetaModel.getModel()).fireTreeNodesDeleted(leafPath.getParentPath(), nodeToDelete, index);
                    jTreeMetaModel.setSelectionPath(leafPath.getParentPath());


//                    TreePath selectionPath = jTreeDomain.getSelectionPath();
//                    if (selectionPath != null) {
//                        getDomainDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), true);
//                    } else {
//                        setProgressBar(false, showProgress);
//                    }


                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during concept deletion", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                setProgressBar(false, showProgress);

            }
        });
    }

    private void deleteConcept(final TreePath leafPath, final boolean showProgress) {
        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Concept conc = new Concept(api);

                try {
                    TreeDomainNodeData nodeToDelete = (TreeDomainNodeData) leafPath.getLastPathComponent();
                    conc.deleteHierarchy(nodeToDelete.getId());
                    ArrayList<TreeDomainNodeData> children = ((TreeDomainNodeData) leafPath.getParentPath().getLastPathComponent()).getChildren();
                    int index = children.indexOf(nodeToDelete);
                    children.remove(nodeToDelete);

                    ((CustomDomainTreeModel) jTreeConcept.getModel()).fireTreeNodesDeleted(leafPath.getParentPath(), nodeToDelete, index);
                    jTreeConcept.setSelectionPath(leafPath.getParentPath());


                    //update metamodels tree
                    boolean flag = false;
                    TreePath selected = jTreeMetaModel.getSelectionPath();
                    if (selected != null) {
                        TreeMetaModelNodeData nodeData = (TreeMetaModelNodeData) selected.getLastPathComponent();
                        if (nodeData.getType().equals("group")) {
                            flag = true;
                            getGroupDetails(nodeData.getId(), false);
                        } else if (nodeData.getType().equals("root")) {
                        } else if (nodeData.getType().equals("leaf")) {
                            flag = true;
                            getLeafDetails(nodeData.getId(), false);
                        }
                    }

                    TreePath selectionPath = jTreeConcept.getSelectionPath();
                    if (selectionPath != null) {
                        flag = true;
                        getConceptDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), false);
                    }

                    setProgressBar(false, showProgress);


                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during concept deletion", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedQueryException ex) {
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } catch (QueryEvaluationException ex) {
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //setProgressBar(false, showProgress);

            }
        });
    }

    private void addDomainSubclass(final TreePath baseClassPath, final String name, final boolean showProgress) {

        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Domain dom = new Domain(api);
                DomainTreeInfo result = null;
                try {
                    result = dom.addDomainSubclass(((TreeDomainNodeData) baseClassPath.getLastPathComponent()).getId(), name);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error adding the domain", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                TreeDomainNodeData newNode = new TreeDomainNodeData(result.getId(), result.getName());
                ArrayList<TreeDomainNodeData> children = ((TreeDomainNodeData) baseClassPath.getLastPathComponent()).getChildren();
                children.add(newNode);
                Collections.sort(children);

                ((CustomDomainTreeModel) jTreeDomain.getModel()).fireTreeNodesInserted(baseClassPath, newNode);
                jTreeDomain.setSelectionPath(baseClassPath.pathByAddingChild(newNode));

                setProgressBar(false, showProgress);

            }
        });
    }

    private void addConceptSubclass(final TreePath baseClassPath, final String name, final boolean showProgress) {

        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Concept dom = new Concept(api);
                DomainTreeInfo result = null;
                try {
                    result = dom.addConceptSubclass(((TreeDomainNodeData) baseClassPath.getLastPathComponent()).getId(), name);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error adding the concept", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                TreeDomainNodeData newNode = new TreeDomainNodeData(result.getId(), result.getName());
                ArrayList<TreeDomainNodeData> children = ((TreeDomainNodeData) baseClassPath.getLastPathComponent()).getChildren();
                children.add(newNode);
                Collections.sort(children);

                ((CustomDomainTreeModel) jTreeConcept.getModel()).fireTreeNodesInserted(baseClassPath, newNode);
                jTreeConcept.setSelectionPath(baseClassPath.pathByAddingChild(newNode));

                setProgressBar(false, showProgress);

            }
        });
    }

    private void addMetaModelGroup(final TreePath baseClassPath, final String name, final boolean showProgress) {
        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);
                TreeMetaModelNodeData result = null;
                try {
                    result = meta.addGroup(((TreeMetaModelNodeData) baseClassPath.getLastPathComponent()).getId(), name);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error adding the group", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //TreeMetaModelNodeData newNode = new TreeMetaModelNodeData(result.getId(), result.getName());
                ArrayList<TreeMetaModelNodeData> children = ((TreeMetaModelNodeData) baseClassPath.getLastPathComponent()).getChildren();
                children.add(result);
                Collections.sort(children);

                ((CustomMetaModelTreeModel) jTreeMetaModel.getModel()).fireTreeNodesInserted(baseClassPath, result);
                jTreeMetaModel.setSelectionPath(baseClassPath.pathByAddingChild(result));

                setProgressBar(false, showProgress);

            }
        });
    }

    private void addMetaModel(final TreePath baseClassPath, final String name, final boolean showProgress) {
        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);
                TreeMetaModelNodeData result = null;
                try {
                    result = meta.addMetaModel(((TreeMetaModelNodeData) baseClassPath.getLastPathComponent()).getId(), name);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error adding the meta model", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                //TreeMetaModelNodeData newNode = new TreeMetaModelNodeData(result.getId(), result.getName());
                ArrayList<TreeMetaModelNodeData> children = ((TreeMetaModelNodeData) baseClassPath.getLastPathComponent()).getChildren();
                children.add(result);
                Collections.sort(children);

                ((CustomMetaModelTreeModel) jTreeMetaModel.getModel()).fireTreeNodesInserted(baseClassPath, result);
                jTreeMetaModel.setSelectionPath(baseClassPath.pathByAddingChild(result));

                setProgressBar(false, showProgress);

            }
        });
    }

    private void renameDomain(final TreePath leafPath, final String newName, final boolean showProgress) {

        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Domain dom = new Domain(api);
                TreeDomainNodeData nodeToRename = (TreeDomainNodeData) leafPath.getLastPathComponent();

                try {
                    dom.renameDomain(nodeToRename.getId(), newName);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain renaming", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }


                nodeToRename.setName(newName);
                ArrayList<TreeDomainNodeData> children = ((TreeDomainNodeData) leafPath.getPathComponent(1)).getChildren();
                Collections.sort(children);
                int index = children.indexOf(nodeToRename);
                //((TreeNodeData) tierPath.getLastPathComponent()).setChildren(children);

                ((CustomDomainTreeModel) jTreeDomain.getModel()).fireTreeStructureChanged(leafPath, nodeToRename);
                jTreeDomain.setSelectionPath(leafPath);

                TreePath selectionPath = jTreeConcept.getSelectionPath();
                if (selectionPath != null) {
                    getConceptDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), true);
                } else {
                    setProgressBar(false, showProgress);
                }
            }
        });
    }

    private void renameConcept(final TreePath leafPath, final String newName, final boolean showProgress) {

        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                Concept con = new Concept(api);
                TreeDomainNodeData nodeToRename = (TreeDomainNodeData) leafPath.getLastPathComponent();

                try {
                    con.renameConcept(nodeToRename.getId(), newName);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during concept renaming", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                nodeToRename.setName(newName);
                ArrayList<TreeDomainNodeData> children = ((TreeDomainNodeData) leafPath.getPathComponent(1)).getChildren();
                Collections.sort(children);
                int index = children.indexOf(nodeToRename);
                //((TreeNodeData) tierPath.getLastPathComponent()).setChildren(children);

                ((CustomDomainTreeModel) jTreeConcept.getModel()).fireTreeStructureChanged(leafPath, nodeToRename);
                jTreeConcept.setSelectionPath(leafPath);


                TreePath selectionPath = jTreeDomain.getSelectionPath();
                if (selectionPath != null) {
                    getDomainDetails(((TreeDomainNodeData) selectionPath.getLastPathComponent()).getId(), true);
                } else {
                    setProgressBar(false, showProgress);
                }

            }
        });
    }

    private void renameGroup(final TreePath leafPath, final String newName, final boolean showProgress) {

        setProgressBar(true, showProgress);

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);
                TreeMetaModelNodeData nodeToRename = (TreeMetaModelNodeData) leafPath.getLastPathComponent();

                try {
                    meta.renameGroup(nodeToRename.getId(), newName);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during group renaming", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }


                nodeToRename.setName(newName);
                ArrayList<TreeMetaModelNodeData> children = ((TreeMetaModelNodeData) leafPath.getPathComponent(1)).getChildren();
                Collections.sort(children);
                int index = children.indexOf(nodeToRename);
                //((TreeNodeData) tierPath.getLastPathComponent()).setChildren(children);

                ((CustomMetaModelTreeModel) jTreeMetaModel.getModel()).fireTreeStructureChanged(leafPath, nodeToRename);
                jTreeMetaModel.setSelectionPath(leafPath);
                setProgressBar(false, showProgress);

//                TreePath selectionPath = jTreeConcept.getSelectionPath();
//                if (selectionPath != null) {
//                    getConceptDetails(((TreeMetaModelNodeData) selectionPath.getLastPathComponent()).getId(), true);
//                } else {
//                    setProgressBar(false, showProgress);
//                }
            }
        });
    }

    public void addSelectedDomainToGroup(final String groupID, final String domainClassID, final boolean showProgress) {
        setProgressBar(true, showProgress);

        new Thread() {

            @Override
            public void run() {
                ReuseApi api = getAPI(showProgress);
                MetaModel meta = new MetaModel(api);

                try {
                    meta.addDomainToGroup(groupID, domainClassID);
                    getGroupDetails(groupID, true);
                } catch (RepositoryException ex) {
                    setProgressBar(false, showProgress);
                    JOptionPane.showMessageDialog(Classification.this, "Error during domain addition", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    api.getDatabase().close();
                }

                setProgressBar(false, showProgress);

            }
        }.start();
    }

    private class DomainJTreeRenderer extends DefaultTreeCellRenderer {

        ImageIcon leafIcon, rootIcon;

        public DomainJTreeRenderer() {
            this.leafIcon = new javax.swing.ImageIcon(getClass().getResource("/images/subclass.png"));
            this.rootIcon = new javax.swing.ImageIcon(getClass().getResource("/images/domains.png"));
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            if (((TreeDomainNodeData) value).getName().equals("Domains")) {
                setIcon(rootIcon);
                //setFont(new Font("Arial", Font.BOLD, 12));
            } else {
                setIcon(leafIcon);
                //setFont(new Font("Arial", Font.PLAIN, 12));
            }
            setPreferredSize(null);
            return this;
        }
    }

    private class ConceptJTreeRenderer extends DefaultTreeCellRenderer {

        ImageIcon leafIcon, rootIcon;

        public ConceptJTreeRenderer() {
            this.leafIcon = new javax.swing.ImageIcon(getClass().getResource("/images/subclass.png"));
            this.rootIcon = new javax.swing.ImageIcon(getClass().getResource("/images/domains.png"));
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            if (((TreeDomainNodeData) value).getName().equals("Concepts")) {
                setIcon(rootIcon);
                //setFont(new Font("Arial", Font.BOLD, 12));
            } else {
                setIcon(leafIcon);
                //setFont(new Font("Arial", Font.PLAIN, 12));
            }
            setPreferredSize(null);
            return this;
        }
    }

    private class MetaModelJTreeRenderer extends DefaultTreeCellRenderer {

        ImageIcon leafIcon, rootIcon, nodeIcon;

        public MetaModelJTreeRenderer() {
            this.leafIcon = new javax.swing.ImageIcon(getClass().getResource("/images/metamodel.png"));
            this.rootIcon = new javax.swing.ImageIcon(getClass().getResource("/images/classify16x16.png"));
            this.nodeIcon = new javax.swing.ImageIcon(getClass().getResource("/images/group.png"));
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            if (((TreeMetaModelNodeData) value).getType().equals("root")) {
                setIcon(rootIcon);
                //setFont(new Font("Arial", Font.BOLD, 12));
                setToolTipText("Root");
            } else if (((TreeMetaModelNodeData) value).getType().equals("group")) {
                setIcon(nodeIcon);
                //setFont(new Font("Arial", Font.PLAIN, 12));
                setToolTipText("Group");
            } else if (((TreeMetaModelNodeData) value).getType().equals("leaf")) {
                setIcon(leafIcon);
                //setFont(new Font("Arial", Font.PLAIN, 12));
                setToolTipText("MetaModel");
            }

            //setText(value.toString());
            setPreferredSize(null);
            return this;
        }
    }

    public class MyDomainListCellThing extends DefaultListCellRenderer {

        public MyDomainListCellThing() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component cell = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            setText(value.toString());

            KeyValue elementAt = (KeyValue) ((SortedListKeyValueModel) jListDomainHasConcepts.getModel()).getElementAt(index);
            if (!elementAt.isExplicit()) {
                setForeground(Color.BLUE);
                setToolTipText("<html><body><h3>This is an inferred relationship</h3></body></html>");

            } else {
                setForeground(Color.BLACK);
                setToolTipText(null);
            }
//
            return cell;
        }
    }

    public class MyConceptListCellThing extends DefaultListCellRenderer {

        public MyConceptListCellThing() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component cell = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            setText(value.toString());

            KeyValue elementAt = (KeyValue) ((SortedListKeyValueModel) jListConceptHasDomains.getModel()).getElementAt(index);
            if (!elementAt.isExplicit()) {
                setForeground(Color.BLUE);
                setToolTipText("<html><body><h3>This is an inferred relationship</h3></body></html>");

            } else {
                setForeground(Color.BLACK);
                setToolTipText(null);
            }

            return cell;
        }
    }

    private ReuseApi getAPI(boolean showProgress) {
        ReuseApi api = null;
        try {
            api = new ReuseApi();
        } catch (RepositoryException ex) {
            setProgressBar(false, showProgress);
            JOptionPane.showMessageDialog(Classification.this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RepositoryConfigException ex) {
            setProgressBar(false, showProgress);
            JOptionPane.showMessageDialog(Classification.this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Classification.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return api;
        }
    }
}
