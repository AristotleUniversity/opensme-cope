/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MetaModelSelectPanel.java
 *
 * Created on Sep 6, 2011, 5:42:47 PM
 */
package eu.opensme.cope.knowledgemanager.gui.management;

import eu.opensme.cope.knowledgemanager.api.ReuseApi;
import eu.opensme.cope.knowledgemanager.api.actions.MetaModel;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.CustomMetaModelTree;
import eu.opensme.cope.knowledgemanager.gui.classification.tree.TreeMetaModelNodeData;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.openrdf.query.MalformedQueryException;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.config.RepositoryConfigException;

/**
 *
 * @author George
 */
public class MetaModelSelectPanel extends javax.swing.JPanel {

    private Management management;

    /** Creates new form MetaModelSelectPanel */
    public MetaModelSelectPanel(Management management) {
        this.management = management;
        initComponents();
        initMyComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLabelWait = new javax.swing.JLabel();

        jLabelWait.setForeground(new java.awt.Color(255, 51, 51));
        jLabelWait.setText("Please wait...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(jLabelWait, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelWait)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelWait;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    public CustomMetaModelTree jTreeMetaModel;

    private void initMyComponents() {
        jLabelWait.setVisible(true);
        TreeMetaModelNodeData root = getMetaModels();
        jTreeMetaModel = new CustomMetaModelTree(root);
        jTreeMetaModel.setAutoscrolls(true);
        jScrollPane1.setViewportView(jTreeMetaModel);
        jTreeMetaModel.setExpandsSelectedPaths(true);
        jTreeMetaModel.setCellRenderer(new MetaModelJTreeRenderer());
        jLabelWait.setVisible(false);
    }

    private TreeMetaModelNodeData getMetaModels() {
        ReuseApi api = null;
        try {
            api = new ReuseApi();
        } catch (RepositoryException ex) {

            JOptionPane.showMessageDialog(this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RepositoryConfigException ex) {
            JOptionPane.showMessageDialog(this, "Cannot find the repository", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        }

        MetaModel meta = new MetaModel(api);

        try {

            TreeMetaModelNodeData root = meta.buildMetaModelHierarchy();
            return root;
        } catch (RepositoryException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedQueryException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (QueryEvaluationException ex) {
            JOptionPane.showMessageDialog(this, "Error during fetching data", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            api.getDatabase().close();
        }
        return null;
    }

    private class MetaModelJTreeRenderer extends DefaultTreeCellRenderer {

        ImageIcon leafIcon, rootIcon, nodeIcon;

        public MetaModelJTreeRenderer() {
            this.leafIcon = new javax.swing.ImageIcon(getClass().getResource("/images/metamodel.png"));
            this.rootIcon = new javax.swing.ImageIcon(getClass().getResource("/images/classify16x16.png"));
            this.nodeIcon = new javax.swing.ImageIcon(getClass().getResource("/images/group.png"));
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            if (((TreeMetaModelNodeData) value).getType().equals("root")) {
                setIcon(rootIcon);
                //setFont(new Font("Arial", Font.BOLD, 12));
                setToolTipText("Root");
            } else if (((TreeMetaModelNodeData) value).getType().equals("group")) {
                setIcon(nodeIcon);
                //setFont(new Font("Arial", Font.PLAIN, 12));
                setToolTipText("Group");
            } else if (((TreeMetaModelNodeData) value).getType().equals("leaf")) {
                setIcon(leafIcon);
                //setFont(new Font("Arial", Font.PLAIN, 12));
                setToolTipText("MetaModel");
            }

            //setText(value.toString());
            return this;
        }
    }
}
