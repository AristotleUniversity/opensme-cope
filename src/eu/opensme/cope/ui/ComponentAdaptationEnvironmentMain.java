/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ComponentAdaptationEnvironmentMain.java
 *
 * Created on 4 Ιουν 2011, 6:56:13 μμ
 */
package eu.opensme.cope.ui;

import eu.opensme.cope.knowledgemanager.gui.management.Management;
import eu.opensme.cope.componentvalidator.ui.ComponentValidatorView;
import eu.opensme.cope.componentvalidator.util.Utils;
import eu.opensme.cope.domain.ReuseProject;
import eu.opensme.cope.factgenerators.lucene.Searcher;
import eu.opensme.cope.knowledgemanager.gui.configtool.ConfigTool;
import eu.opensme.cope.recommenders.entities.ClassAnalysis;
import eu.opensme.cope.recommenders.entities.ClassCluster;
import eu.opensme.cope.recommenders.entities.ClassClusterPartcipant;
import eu.opensme.cope.util.FileSystemHandlerUtil;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.FlowLayout;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author george
 */
public class ComponentAdaptationEnvironmentMain extends javax.swing.JFrame {

    private ReuseProject reuseProject;

    /** Creates new form ComponentAdaptationEnvironmentMain */
    public ComponentAdaptationEnvironmentMain() {
        this.reuseProject = null;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        borderLayoutPanel = new javax.swing.JPanel();
        pseudoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchToolbar = new javax.swing.JToolBar();
        searchTermTextField = new javax.swing.JTextField();
        searchOptionsComboBox = new javax.swing.JComboBox();
        multipleKeywordComboBox = new javax.swing.JComboBox();
        jCheckBoxFuzzySearch = new javax.swing.JCheckBox();
        searchButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButtonResetSearchResults = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newReuseProjectMenuItem = new javax.swing.JMenuItem();
        openReuseProjectMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        analyzeMenu = new javax.swing.JMenu();
        staticAnalysisMenuItem = new javax.swing.JMenuItem();
        DependencyAnalysisMenuItem = new javax.swing.JMenuItem();
        srcIndexingMenuItem = new javax.swing.JMenuItem();
        docGenerationMenuItem = new javax.swing.JMenuItem();
        dynamicAnalysisMenuItem = new javax.swing.JMenuItem();
        historyAnalysisMenuItem = new javax.swing.JMenuItem();
        patternAnalysis = new javax.swing.JMenuItem();
        pinotPatternAnalysis = new javax.swing.JMenuItem();
        recommendMenu = new javax.swing.JMenu();
        dependenciesRecommender = new javax.swing.JMenuItem();
        patternRecommender = new javax.swing.JMenuItem();
        componentMakersMenu = new javax.swing.JMenu();
        interfaceMakerItem = new javax.swing.JMenuItem();
        dependencyMakerItem = new javax.swing.JMenuItem();
        adapterPatternMakerItem = new javax.swing.JMenuItem();
        facadePatternmakerItem = new javax.swing.JMenuItem();
        mediatorPatternMakerItem = new javax.swing.JMenuItem();
        proxyPatternMakerItem = new javax.swing.JMenuItem();
        componentSuggestion = new javax.swing.JMenuItem();
        knowledgeManagerMenu = new javax.swing.JMenu();
        manageOntologyItem = new javax.swing.JMenuItem();
        configRepositoryTool = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        manualMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OPEN-SME Component Adaptation Environment");
        setBounds(new java.awt.Rectangle(0, 0, 600, 600));
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getClassLoader().getResource("images/opensme.png")));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        borderLayoutPanel.setLayout(new java.awt.BorderLayout());

        pseudoPanel.setPreferredSize(new java.awt.Dimension(600, 600));
        borderLayoutPanel.add(pseudoPanel, java.awt.BorderLayout.CENTER);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 3, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/opensmelogo.gif"))); // NOI18N
        jLabel1.setText("The OPEN-SME Consortium");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        borderLayoutPanel.add(jLabel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(borderLayoutPanel, java.awt.BorderLayout.CENTER);

        searchToolbar.setRollover(true);

        searchTermTextField.setEnabled(false);
        searchTermTextField.setPreferredSize(new java.awt.Dimension(250, 28));
        searchTermTextField.setEnabled(this.reuseProject!=null);
        searchTermTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTermTextFieldKeyTyped(evt);
            }
        });
        searchToolbar.add(searchTermTextField);

        searchOptionsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Name", "Full_Text", "Attribute", "Method", "Comment" }));
        searchOptionsComboBox.setEnabled(false);
        searchOptionsComboBox.setEnabled(this.reuseProject!=null);
        searchToolbar.add(searchOptionsComboBox);

        multipleKeywordComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AND", "OR" }));
        multipleKeywordComboBox.setEnabled(false);
        searchToolbar.add(multipleKeywordComboBox);

        jCheckBoxFuzzySearch.setSelected(true);
        jCheckBoxFuzzySearch.setText("Fuzzy Search");
        jCheckBoxFuzzySearch.setEnabled(false);
        jCheckBoxFuzzySearch.setFocusable(false);
        jCheckBoxFuzzySearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCheckBoxFuzzySearch.setMaximumSize(new java.awt.Dimension(100, 46));
        jCheckBoxFuzzySearch.setMinimumSize(new java.awt.Dimension(100, 46));
        jCheckBoxFuzzySearch.setPreferredSize(new java.awt.Dimension(100, 46));
        jCheckBoxFuzzySearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchToolbar.add(jCheckBoxFuzzySearch);

        searchButton.setText("Search");
        searchButton.setEnabled(false);
        searchButton.setFocusable(false);
        searchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.setEnabled(this.reuseProject!=null);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        searchToolbar.add(searchButton);
        searchToolbar.add(jSeparator1);

        jButtonResetSearchResults.setEnabled(false);
        jButtonResetSearchResults.setFocusable(false);
        jButtonResetSearchResults.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonResetSearchResults.setLabel("Reset Search Results");
        jButtonResetSearchResults.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonResetSearchResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetSearchResultsActionPerformed(evt);
            }
        });
        searchToolbar.add(jButtonResetSearchResults);

        getContentPane().add(searchToolbar, java.awt.BorderLayout.PAGE_START);

        menuBar.setOpaque(false);

        fileMenu.setText("File");

        newReuseProjectMenuItem.setText("New Reuse Project...");
        newReuseProjectMenuItem.setToolTipText("This action creates a new reuse project");
        newReuseProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newReuseProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newReuseProjectMenuItem);

        openReuseProjectMenuItem.setText("Open Reuse Project...");
        openReuseProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openReuseProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openReuseProjectMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        analyzeMenu.setText("Analysis");

        staticAnalysisMenuItem.setText("Static Analysis");
        staticAnalysisMenuItem.setEnabled(this.reuseProject!=null);
        staticAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staticAnalysisMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(staticAnalysisMenuItem);

        DependencyAnalysisMenuItem.setText("Dependency Type Analysis");
        DependencyAnalysisMenuItem.setEnabled(this.reuseProject!=null);
        DependencyAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DependencyAnalysisMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(DependencyAnalysisMenuItem);

        srcIndexingMenuItem.setText("Source File Indexing...");
        srcIndexingMenuItem.setEnabled(this.reuseProject!=null);
        srcIndexingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcIndexingMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(srcIndexingMenuItem);

        docGenerationMenuItem.setEnabled(this.reuseProject!=null);
        docGenerationMenuItem.setLabel("Documentation Generation");
        docGenerationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docGenerationMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(docGenerationMenuItem);

        dynamicAnalysisMenuItem.setText("Dynamic Analysis");
        dynamicAnalysisMenuItem.setEnabled(this.reuseProject!=null);
        dynamicAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dynamicAnalysisMenuItemActionPerform(evt);
            }
        });
        analyzeMenu.add(dynamicAnalysisMenuItem);

        historyAnalysisMenuItem.setText("History Analysis");
        historyAnalysisMenuItem.setEnabled(this.reuseProject!=null);
        historyAnalysisMenuItem.setEnabled(this.reuseProject!=null);
        historyAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyAnalysisMenuItemActionPerform(evt);
            }
        });
        analyzeMenu.add(historyAnalysisMenuItem);

        patternAnalysis.setText("Pattern Analysis");
        patternAnalysis.setEnabled(this.reuseProject!=null);
        patternAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatternAnalyzerActionPerformed(evt);
            }
        });
        analyzeMenu.add(patternAnalysis);

        pinotPatternAnalysis.setText("Pinot Pattern Analysis");
        pinotPatternAnalysis.setEnabled(this.reuseProject!=null);
        pinotPatternAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinotPatternAnalysisActionPerformed(evt);
            }
        });
        analyzeMenu.add(pinotPatternAnalysis);

        menuBar.add(analyzeMenu);

        recommendMenu.setText("Recommend Clusters");

        dependenciesRecommender.setText("Dependencies Recommender");
        dependenciesRecommender.setEnabled(this.reuseProject!=null);
        dependenciesRecommender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dependenciesRecommenderActionPerformed(evt);
            }
        });
        recommendMenu.add(dependenciesRecommender);

        patternRecommender.setText("Pattern Recommender");
        patternRecommender.setEnabled(this.reuseProject!=null);
        patternRecommender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatternRecomenderActionPerformed(evt);
            }
        });
        recommendMenu.add(patternRecommender);

        menuBar.add(recommendMenu);

        componentMakersMenu.setText("ComponentMakers");

        interfaceMakerItem.setText("InterfaceMaker");
        interfaceMakerItem.setEnabled(false);
        interfaceMakerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interfaceMakerItemActionPerformed(evt);
            }
        });
        componentMakersMenu.add(interfaceMakerItem);

        dependencyMakerItem.setText("DependencyMaker");
        dependencyMakerItem.setEnabled(false);
        dependencyMakerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dependencyMakerItemActionPerformed(evt);
            }
        });
        componentMakersMenu.add(dependencyMakerItem);

        adapterPatternMakerItem.setText("AdapterPatternMaker");
        adapterPatternMakerItem.setEnabled(false);
        adapterPatternMakerItem.setName("adapterPatternMakerItem"); // NOI18N
        adapterPatternMakerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adapterPatternMakerItemActionPerformed(evt);
            }
        });
        componentMakersMenu.add(adapterPatternMakerItem);

        facadePatternmakerItem.setText("Facade Pattern Maker");
        facadePatternmakerItem.setEnabled(false);
        facadePatternmakerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facadePatternmakerItemActionPerformed(evt);
            }
        });
        componentMakersMenu.add(facadePatternmakerItem);
        facadePatternmakerItem.getAccessibleContext().setAccessibleName("facadePatternMaker");

        mediatorPatternMakerItem.setText("Mediator Pattern Maker");
        mediatorPatternMakerItem.setToolTipText("");
        mediatorPatternMakerItem.setEnabled(false);
        mediatorPatternMakerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediatorPatternMakerItemActionPerformed(evt);
            }
        });
        componentMakersMenu.add(mediatorPatternMakerItem);

        proxyPatternMakerItem.setText("Proxy Pattern Maker ");
        proxyPatternMakerItem.setToolTipText("");
        proxyPatternMakerItem.setEnabled(false);
        proxyPatternMakerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyPatternMakerItemActionPerformed(evt);
            }
        });
        componentMakersMenu.add(proxyPatternMakerItem);

        componentSuggestion.setText("Component Suggestion");
        componentSuggestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentSuggestionActionPerformed(evt);
            }
        });
        componentMakersMenu.add(componentSuggestion);

        menuBar.add(componentMakersMenu);

        knowledgeManagerMenu.setText("Knowledge Manager");

        manageOntologyItem.setText("Semantic Application");
        manageOntologyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageOntologyItemActionPerformed(evt);
            }
        });
        knowledgeManagerMenu.add(manageOntologyItem);

        configRepositoryTool.setText("Repository Configuration");
        configRepositoryTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configRepositoryToolActionPerformed(evt);
            }
        });
        knowledgeManagerMenu.add(configRepositoryTool);

        menuBar.add(knowledgeManagerMenu);

        helpMenu.setText("Help");

        manualMenuItem.setText("Reuse Engineer Manual");
        manualMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(manualMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        formWindowClosing(null);
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
     * Handles the New Reuse Project command from the User Interface
     * @param evt
     */
    private void newReuseProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newReuseProjectMenuItemActionPerformed
        NewReuseProjectDialog dialog = new NewReuseProjectDialog(this, true);
        dialog.setVisible(true);
        this.reuseProject = dialog.getProject();
        this.repaint();
        reaccessMenuItemsEnablement();
        if (this.reuseProject != null) {
            reaccessMenuItemsEnablement();
            this.setTitle("OPEN-SME Component Adaptation Environment (" + reuseProject.getProjectName() + ")");
            //this.setContentPane(new ReuseProjectBrowserPanel(reuseProject));
            borderLayoutPanel.remove(pseudoPanel);
            borderLayoutPanel.add(new NewReuseProjectBrowserPanel(reuseProject), BorderLayout.CENTER);
            this.pack();
            repaint();
        } else {
            this.setTitle("OPEN-SME Component Adaptation Environment");
        }
    }

    private void reaccessMenuItemsEnablement() {
        //reassess enablement of menu items
        staticAnalysisMenuItem.setEnabled(this.reuseProject != null);
        DependencyAnalysisMenuItem.setEnabled(this.reuseProject!=null);
        dynamicAnalysisMenuItem.setEnabled(this.reuseProject != null);
        patternAnalysis.setEnabled(this.reuseProject != null);
        srcIndexingMenuItem.setEnabled(this.reuseProject != null);
        docGenerationMenuItem.setEnabled(this.reuseProject != null);
        historyAnalysisMenuItem.setEnabled(this.reuseProject != null);
        dependenciesRecommender.setEnabled(this.reuseProject != null);
        patternRecommender.setEnabled(this.reuseProject != null);
        interfaceMakerItem.setEnabled(this.reuseProject != null);
        searchButton.setEnabled(this.reuseProject != null);
        jCheckBoxFuzzySearch.setEnabled(this.reuseProject != null);
        searchOptionsComboBox.setEnabled(this.reuseProject != null);
        searchTermTextField.setEnabled(this.reuseProject != null);
        jButtonResetSearchResults.setEnabled(false);
        multipleKeywordComboBox.setEnabled(false);
        dependencyMakerItem.setEnabled(this.reuseProject != null);
        adapterPatternMakerItem.setEnabled(this.reuseProject != null);
        facadePatternmakerItem.setEnabled(this.reuseProject != null);
        mediatorPatternMakerItem.setEnabled(this.reuseProject != null);
        proxyPatternMakerItem.setEnabled(this.reuseProject != null);
        pinotPatternAnalysis.setEnabled(this.reuseProject != null);
        componentSuggestion.setEnabled(this.reuseProject != null);
    }//GEN-LAST:event_newReuseProjectMenuItemActionPerformed

    private void openReuseProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openReuseProjectMenuItemActionPerformed
        OpenReuseProjectDialog dialog = new OpenReuseProjectDialog(this, true);
        dialog.setVisible(true);
        ReuseProject rp = dialog.getProject();
        if (rp != null) {
            if (reuseProject != null) {
                ReuseProject.serialize(reuseProject);
            }
            reuseProject = rp;
            reaccessMenuItemsEnablement();
            this.setTitle("OPEN-SME Component Adaptation Environment (" + reuseProject.getProjectName() + ")");
            changePanel();
//            borderLayoutPanel.remove(pseudoPanel);
//            reuseProjectBrowserPanel = new ReuseProjectBrowserPanel(reuseProject);
//            borderLayoutPanel.add(reuseProjectBrowserPanel, BorderLayout.CENTER);
//            pack();
//            repaint();
            //this.setContentPane(new ReuseProjectBrowserPanel(reuseProject));
            //this.add(new ReuseProjectBrowserPanel(reuseProject), BorderLayout.CENTER );
        }
    }//GEN-LAST:event_openReuseProjectMenuItemActionPerformed

    private void docGenerationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docGenerationMenuItemActionPerformed
        JDialog dialog = new JDialog(this, "Generate Documentation");
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        //Create and set up the content pane.
        JComponent newContentPane = new GenerateDocProgressPanel(reuseProject);
        newContentPane.setOpaque(true); //content panes must be opaque
        dialog.setContentPane(newContentPane);

        //Display the window.
        dialog.pack();
        dialog.setVisible(true);

    }//GEN-LAST:event_docGenerationMenuItemActionPerformed

    private void staticAnalysisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staticAnalysisMenuItemActionPerformed
        //here I should call classycle and ckjm importers
        //first the classycle importer
        //if there is an active project only
        if (reuseProject != null) {
            JDialog dialog = new JDialog(this, "Static Analysis");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            JComponent newContentPane = new GenerateDependenciesProgressPanel(reuseProject,this);
            newContentPane.setOpaque(true);
            dialog.setContentPane(newContentPane);
            dialog.pack();
            dialog.setVisible(true);
            this.repaint();
        }
    }//GEN-LAST:event_staticAnalysisMenuItemActionPerformed

    private void srcIndexingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcIndexingMenuItemActionPerformed
        if (reuseProject != null) {
            JDialog dialog = new JDialog(this, "Source code Indexing");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            JComponent newContentPane = new SourceFIleIndexingProgressPanel(reuseProject);
            newContentPane.setOpaque(true);
            dialog.setContentPane(newContentPane);
            dialog.pack();
            dialog.setVisible(true);
            this.repaint();
        }
    }//GEN-LAST:event_srcIndexingMenuItemActionPerformed

    private void dependenciesRecommenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dependenciesRecommenderActionPerformed
        //creates a cluster based on dependencies using the Bunch tool
        if (reuseProject != null) {
            JDialog dialog = new JDialog(this, "Dependencies-based Recommender");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            JComponent newContentPane = new GenerateOrOpenClusterDialog(reuseProject);
            newContentPane.setOpaque(true);
            dialog.setContentPane(newContentPane);
            dialog.pack();
            dialog.setVisible(true);
            this.repaint();
        }
    }//GEN-LAST:event_dependenciesRecommenderActionPerformed

    private void dynamicAnalysisMenuItemActionPerform(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dynamicAnalysisMenuItemActionPerform
        // TODO add your handling code here:
        if (this.reuseProject.getComponentNames().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Component Extraction have not been perfomed for the selected project! \nPlease extract some components first!", "Select Execution Scenario", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JDialog dialog = new JDialog(this, "Dynamic Analysis");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            //Create and set up the content pane.
            JComponent newContentPane = new ComponentValidatorView(reuseProject);
            newContentPane.setOpaque(true); //content panes must be opaque
            dialog.setContentPane(newContentPane);
            //Display the window.
            dialog.pack();
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_dynamicAnalysisMenuItemActionPerform

    private void historyAnalysisMenuItemActionPerform(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyAnalysisMenuItemActionPerform
        if (reuseProject != null) {
            JDialog dialog = new HistoryAnalysisDialog(this, rootPaneCheckingEnabled, reuseProject, this);
            dialog.pack();
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_historyAnalysisMenuItemActionPerform

    private void interfaceMakerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interfaceMakerItemActionPerformed
        if (reuseProject != null) {

            FileSystemHandlerUtil classFileHandler = new FileSystemHandlerUtil();
            ArrayList<File> javaFilesWithinDirectory = new ArrayList<File>();
            javaFilesWithinDirectory.addAll(classFileHandler.getJavaFilesWithinDirectory(this.reuseProject.getProjectLocation() + File.separator + "clusters" + File.separator + "depClusters"));
            javaFilesWithinDirectory.addAll(classFileHandler.getJavaFilesWithinDirectory(this.reuseProject.getProjectLocation() + File.separator + "clusters" + File.separator + "patClusters"));
            if (javaFilesWithinDirectory == null || javaFilesWithinDirectory.isEmpty()) {
                JDialog dialog = new JDialog(this, "Interface Maker");
                dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                JComponent newContentPane = new JPanel();
                newContentPane.setLayout(new FlowLayout());
                newContentPane.add(new JLabel("Cluster recommendations have not been perfomed for the selected project!"));
                newContentPane.add(new JLabel("Please run the recomendations under the \"Recommend Cluster\" menu."));
                dialog.setContentPane(newContentPane);
                dialog.pack();
                dialog.setVisible(true);
            } else {
                JDialog dialog = new JDialog(this, "Interface Maker");
                dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                JComponent newContentPane = new InterfaceMakerPanel(reuseProject);
                newContentPane.setOpaque(true);
                dialog.setContentPane(newContentPane);
                dialog.pack();
                dialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_interfaceMakerItemActionPerformed

    private void PatternAnalyzerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatternAnalyzerActionPerformed
        //here I should call pattern detection importers
        if (reuseProject != null) {
            JDialog dialog = new JDialog(this, "Pattern Analysis");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            JComponent newContentPane = new GeneratePatternProgressPanel(reuseProject, this);
            newContentPane.setOpaque(true);
            dialog.setContentPane(newContentPane);
            dialog.pack();
            dialog.setVisible(true);
            this.repaint();
        }
    }//GEN-LAST:event_PatternAnalyzerActionPerformed

    private void PatternRecomenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatternRecomenderActionPerformed
        //creates a cluster based on dependencies using the Bunch tool
        if (reuseProject != null) {
            JDialog dialog = new JDialog(this, "Pattern-based Recommender");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            JComponent newContentPane = new GenerateOrOpenPatternClusterDialog(reuseProject);
            newContentPane.setOpaque(true);
            dialog.setContentPane(newContentPane);
            dialog.pack();
            dialog.setVisible(true);
            this.repaint();
        }
    }//GEN-LAST:event_PatternRecomenderActionPerformed

    private void manageOntologyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageOntologyItemActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Management(false, reuseProject).setVisible(true);
            }
        });
    }//GEN-LAST:event_manageOntologyItemActionPerformed

    private void configRepositoryToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configRepositoryToolActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new ConfigTool().setVisible(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
    }//GEN-LAST:event_configRepositoryToolActionPerformed

private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
// TODO add your handling code here:
    //If no search term is defined return
    if (searchTermTextField.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "No search term is specified", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    } else {
        try {
            Searcher searcher = new Searcher(this.reuseProject.getProjectLocation());
            boolean exists = false;
            if (this.searchTermTextField.getText().contains(" ")
                    && searchTermTextField.getText().split(" ").length < 2) {
                exists = searcher.search(searchTermTextField.getText().trim(), searchOptionsComboBox.getSelectedItem().toString().toLowerCase(), this.jCheckBoxFuzzySearch.isSelected(), true);
            } else if (this.searchTermTextField.getText().contains(" ")){
                String searchTerm = "";
                StringTokenizer st = new StringTokenizer(searchTermTextField.getText(), " ");
                while (st.hasMoreTokens()) {
                    searchTerm += st.nextToken();
                    if (st.hasMoreTokens()) {
                        searchTerm += " ";
                    }
                }                
                if (this.multipleKeywordComboBox.getSelectedIndex() == 0){
                    exists = searcher.search(searchTerm, searchOptionsComboBox.getSelectedItem().toString().toLowerCase(), this.jCheckBoxFuzzySearch.isSelected(), true);
                }else if (this.multipleKeywordComboBox.getSelectedIndex() == 1) {
                    exists = searcher.search(searchTerm, searchOptionsComboBox.getSelectedItem().toString().toLowerCase(), this.jCheckBoxFuzzySearch.isSelected(), false);
            }
            }else {
                exists = searcher.search(searchTermTextField.getText(), searchOptionsComboBox.getSelectedItem().toString().toLowerCase(), this.jCheckBoxFuzzySearch.isSelected(), false);
            }
            if (!exists) {
                JOptionPane.showMessageDialog(this, "Index not created", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Vector<ClassAnalysis> results = searcher.getClassesResultsSortedDescByScore(this.reuseProject.getProject().getProjectid());
            //Visualize Results
            this.visualizeSearchResults(results);
            jButtonResetSearchResults.setEnabled(true);
        } catch (Exception ee) {
            ee.printStackTrace();
        }
    }
}//GEN-LAST:event_searchButtonActionPerformed

private void adapterPatternMakerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adapterPatternMakerItemActionPerformed
    if (reuseProject != null) {
        JDialog dialog = new JDialog(this, "Adapter Pattern Maker");
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        Set<ClassAnalysis> adapteesSet = new HashSet<ClassAnalysis>();
        List<ClassCluster> clusters = reuseProject.getClusters();
        for (int i = 0; i < clusters.size(); i++) {
            ClassCluster curr_cluster = clusters.get(i);
            if (curr_cluster.isPatternBased()) {
                if (curr_cluster.getName().contains("Adapter")) {
                    ArrayList<ClassClusterPartcipant> participants = curr_cluster.getClusterParticipants();
                    for (int j = 0; j < participants.size(); j++) {
                        ClassClusterPartcipant participant = participants.get(j);
                        if (participant.getRole().contains("Adaptee")) {
                            adapteesSet.add(participant.getClassAnalysis());
                        }
                    }
                }
            }
        }
        JComponent newContentPane = new DependencyMakerPanel(reuseProject, adapteesSet);
        newContentPane.setOpaque(true);
        dialog.setContentPane(newContentPane);
        dialog.setVisible(true);
        dialog.pack();
    }
}//GEN-LAST:event_adapterPatternMakerItemActionPerformed

    private void dependencyMakerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dependencyMakerItemActionPerformed
        if (reuseProject != null) {
            JDialog dialog = new JDialog(this, "Dependency Maker");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            JComponent newContentPane = new DependencyMakerPanel(reuseProject, reuseProject.getProject().getClasses());
            newContentPane.setOpaque(true);
            dialog.setContentPane(newContentPane);
            dialog.setVisible(true);
            dialog.pack();
        }//GEN-LAST:event_dependencyMakerItemActionPerformed
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (reuseProject != null) {
            ReuseProject.serialize(reuseProject);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButtonResetSearchResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetSearchResultsActionPerformed
        // TODO add your handling code here:
        //borderLayoutPanel.removeAll();
        //borderLayoutPanel.add(new ReuseProjectBrowserPanel(reuseProject), BorderLayout.CENTER);
        //borderLayoutPanel.validate();
        //borderLayoutPanel.add(jLabel1, BorderLayout.SOUTH);
        reuseProjectBrowserPanel.resetSearchResults();
        reuseProjectBrowserPanel.validate();
        jButtonResetSearchResults.setEnabled(false);
        //repaint();              
    }//GEN-LAST:event_jButtonResetSearchResultsActionPerformed

    private void searchTermTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTermTextFieldKeyTyped
        // TODO add your handling code here:
        StringTokenizer st = new StringTokenizer(searchTermTextField.getText(), " ");
//        if (this.searchTermTextField.getText().contains(" ") ||
//                Character.isWhitespace(evt.getKeyChar())) {
        if (st.countTokens()>1){
            this.multipleKeywordComboBox.setEnabled(true);
            this.jCheckBoxFuzzySearch.setEnabled(false);
            this.jCheckBoxFuzzySearch.setSelected(false);

        } else {
            multipleKeywordComboBox.setEnabled(false);
            this.jCheckBoxFuzzySearch.setEnabled(true);
            this.jCheckBoxFuzzySearch.setSelected(true);
        }
    }//GEN-LAST:event_searchTermTextFieldKeyTyped

private void pinotPatternAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinotPatternAnalysisActionPerformed
// TODO add your handling code here:
    if (reuseProject != null) {
        JDialog dialog = new JDialog(this, "Pinot Pattern Analysis");
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JComponent newContentPane = new GeneratePinotPatternProgressPanel(reuseProject, this);
        newContentPane.setOpaque(true);
        dialog.setContentPane(newContentPane);
        dialog.pack();
        dialog.setVisible(true);
        this.repaint();
    }
}//GEN-LAST:event_pinotPatternAnalysisActionPerformed

private void facadePatternmakerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facadePatternmakerItemActionPerformed
    if (reuseProject != null) {
        JDialog dialog = new JDialog(this, "Facade Pattern Maker");
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        Set<ClassAnalysis> hiddenTypeSet = new HashSet<ClassAnalysis>();
        List<ClassCluster> clusters = reuseProject.getClusters();
        for (int i = 0; i < clusters.size(); i++) {
            ClassCluster curr_cluster = clusters.get(i);
            if (curr_cluster.isPatternBased()) {
                if (curr_cluster.getName().contains("Facade")) {
                    ArrayList<ClassClusterPartcipant> participants = curr_cluster.getClusterParticipants();
                    for (int j = 0; j < participants.size(); j++) {
                        ClassClusterPartcipant participant = participants.get(j);
                        if (participant.getRole().contains("HiddenType")) {
                            hiddenTypeSet.add(participant.getClassAnalysis());
                        }
                    }
                }
            }
        }
        JComponent newContentPane = new DependencyMakerPanel(reuseProject, hiddenTypeSet);
        newContentPane.setOpaque(true);
        dialog.setContentPane(newContentPane);
        dialog.setVisible(true);
        dialog.pack();
    }
}//GEN-LAST:event_facadePatternmakerItemActionPerformed

private void mediatorPatternMakerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediatorPatternMakerItemActionPerformed
    if (reuseProject != null) {
        JDialog dialog = new JDialog(this, "Mediator Pattern Maker");
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        Set<ClassAnalysis> colleagueSet = new HashSet<ClassAnalysis>();
        List<ClassCluster> clusters = reuseProject.getClusters();
        for (int i = 0; i < clusters.size(); i++) {
            ClassCluster curr_cluster = clusters.get(i);
            if (curr_cluster.isPatternBased()) {
                if (curr_cluster.getName().contains("Mediator")) {
                    ArrayList<ClassClusterPartcipant> participants = curr_cluster.getClusterParticipants();
                    for (int j = 0; j < participants.size(); j++) {
                        ClassClusterPartcipant participant = participants.get(j);
                        if (participant.getRole().contains("Colleague")) {
                            colleagueSet.add(participant.getClassAnalysis());
                        }
                    }
                }
            }
        }
        JComponent newContentPane = new DependencyMakerPanel(reuseProject, colleagueSet);
        newContentPane.setOpaque(true);
        dialog.setContentPane(newContentPane);
        dialog.setVisible(true);
        dialog.pack();
    }
}//GEN-LAST:event_mediatorPatternMakerItemActionPerformed

private void proxyPatternMakerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxyPatternMakerItemActionPerformed
    if (reuseProject != null) {
        JDialog dialog = new JDialog(this, "Proxy Pattern Maker");
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        Set<ClassAnalysis> realSubjectsSet = new HashSet<ClassAnalysis>();
        List<ClassCluster> clusters = reuseProject.getClusters();
        for (int i = 0; i < clusters.size(); i++) {
            ClassCluster curr_cluster = clusters.get(i);
            if (curr_cluster.isPatternBased()) {
                if (curr_cluster.getName().contains("Proxy")) {
                    ArrayList<ClassClusterPartcipant> participants = curr_cluster.getClusterParticipants();
                    for (int j = 0; j < participants.size(); j++) {
                        ClassClusterPartcipant participant = participants.get(j);
                        if (participant.getRole().contains("Real Subject")) {
                            realSubjectsSet.add(participant.getClassAnalysis());
                        }
                    }
                }
            }
        }
        JComponent newContentPane = new DependencyMakerPanel(reuseProject, realSubjectsSet);
        newContentPane.setOpaque(true);
        dialog.setContentPane(newContentPane);
        dialog.setVisible(true);
        dialog.pack();
    }
}//GEN-LAST:event_proxyPatternMakerItemActionPerformed

    private void componentSuggestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentSuggestionActionPerformed
        if (reuseProject != null) {
            JDialog dialog = new JDialog(this, "Component Suggestion");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            JComponent newContentPane = new ComponentSuggestionPanel(reuseProject);
            newContentPane.setOpaque(true);
            dialog.setContentPane(newContentPane);
            dialog.pack();
            dialog.setVisible(true);
            this.repaint();
        }   
    }//GEN-LAST:event_componentSuggestionActionPerformed

    private void manualMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualMenuItemActionPerformed
        try {
		File pdfFile = new File(Utils.getJarFolder() + "help/COPE_User_Guide.pdf");
		if (pdfFile.exists()) {
 
			if (Desktop.isDesktopSupported()) {
				Desktop.getDesktop().open(pdfFile);
			} else {
				JOptionPane.showMessageDialog(null, "Awt Desktop is not supported!","Error",JOptionPane.ERROR_MESSAGE);
			}
 
		} else {
			JOptionPane.showMessageDialog(null, "File \"help/COPE_User_Guide.pdf\" does not exists","Error",JOptionPane.ERROR_MESSAGE);
		}
	  } catch (Exception ex) {
		ex.printStackTrace();
	  }
    }//GEN-LAST:event_manualMenuItemActionPerformed

    private void DependencyAnalysisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DependencyAnalysisMenuItemActionPerformed

        if (reuseProject != null) {
            JDialog dialog = new JDialog(this, "Dependency Analysis");
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            JComponent newContentPane = new GenerateDependencyTypesProgressPanel(reuseProject);
            newContentPane.setOpaque(true);
            dialog.setContentPane(newContentPane);
            dialog.pack();
            dialog.setVisible(true);
            this.repaint();
        }
    }//GEN-LAST:event_DependencyAnalysisMenuItemActionPerformed

    private void visualizeSearchResults(Vector<ClassAnalysis> results) {
        reuseProjectBrowserPanel.visualizeSearchResults(results);
        //borderLayoutPanel.removeAll();
        //borderLayoutPanel.add(new ReuseProjectBrowserPanel(reuseProject, results), BorderLayout.CENTER);
        //borderLayoutPanel.validate();
        //borderLayoutPanel.add(jLabel1, BorderLayout.SOUTH);
        reuseProjectBrowserPanel.validate();
        //repaint();        
    }

    public void changePanel() {
        if (!reuseProject.isStaticAnalysisPerformed()) {
            NewReuseProjectBrowserPanel panel = new NewReuseProjectBrowserPanel(reuseProject);
            borderLayoutPanel.removeAll();
            borderLayoutPanel.add(panel, BorderLayout.CENTER);
            pack();
            repaint();
        } else {
            reuseProjectBrowserPanel = new ReuseProjectBrowserPanel(reuseProject);
            reuseProjectBrowserPanel.validate();
            borderLayoutPanel.removeAll();
            borderLayoutPanel.add(reuseProjectBrowserPanel, BorderLayout.CENTER);
            //       new ReuseProjectBrowserPanel(reuseProject), BorderLayout.CENTER);
            borderLayoutPanel.add(jLabel1, BorderLayout.SOUTH);
            pack();
            repaint();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    //UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (UnsupportedLookAndFeelException e) {
                    e.printStackTrace();
                }
                new ComponentAdaptationEnvironmentMain().setVisible(true);
            }
        });
    }
    private ReuseProjectBrowserPanel reuseProjectBrowserPanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem DependencyAnalysisMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem adapterPatternMakerItem;
    private javax.swing.JMenu analyzeMenu;
    private javax.swing.JPanel borderLayoutPanel;
    private javax.swing.JMenu componentMakersMenu;
    private javax.swing.JMenuItem componentSuggestion;
    private javax.swing.JMenuItem configRepositoryTool;
    private javax.swing.JMenuItem dependenciesRecommender;
    private javax.swing.JMenuItem dependencyMakerItem;
    private javax.swing.JMenuItem docGenerationMenuItem;
    private javax.swing.JMenuItem dynamicAnalysisMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem facadePatternmakerItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem historyAnalysisMenuItem;
    private javax.swing.JMenuItem interfaceMakerItem;
    private javax.swing.JButton jButtonResetSearchResults;
    private javax.swing.JCheckBox jCheckBoxFuzzySearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JMenu knowledgeManagerMenu;
    private javax.swing.JMenuItem manageOntologyItem;
    private javax.swing.JMenuItem manualMenuItem;
    private javax.swing.JMenuItem mediatorPatternMakerItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JComboBox multipleKeywordComboBox;
    private javax.swing.JMenuItem newReuseProjectMenuItem;
    private javax.swing.JMenuItem openReuseProjectMenuItem;
    private javax.swing.JMenuItem patternAnalysis;
    private javax.swing.JMenuItem patternRecommender;
    private javax.swing.JMenuItem pinotPatternAnalysis;
    private javax.swing.JMenuItem proxyPatternMakerItem;
    private javax.swing.JPanel pseudoPanel;
    private javax.swing.JMenu recommendMenu;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox searchOptionsComboBox;
    private javax.swing.JTextField searchTermTextField;
    private javax.swing.JToolBar searchToolbar;
    private javax.swing.JMenuItem srcIndexingMenuItem;
    private javax.swing.JMenuItem staticAnalysisMenuItem;
    // End of variables declaration//GEN-END:variables
}
