/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ComponentValidatorView.java
 *
 * Created on Jun 19, 2011, 9:58:41 AM
 */
package eu.opensme.cope.componentvalidator.ui;

import eu.opensme.cope.componentvalidator.binaryvisitor.JavaBinaryParser;
import eu.opensme.cope.componentvalidator.core.Util.TraceMappings;
import eu.opensme.cope.componentvalidator.coverage.cfg.CfgMethod;
import eu.opensme.cope.componentvalidator.coverage.core.Coverage;
import eu.opensme.cope.componentvalidator.report.HtmlReport;
import eu.opensme.cope.componentvalidator.util.Utils;
import eu.opensme.cope.domain.GeneratedComponent;
import eu.opensme.cope.domain.ReuseProject;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.processmining.models.graphbased.directed.jgraph.JGraphVisualizationPanel;
import org.processmining.models.graphbased.directed.jgraph.ProMJGraph;

/**
 *
 * @author kmokos
 */
public class ComponentValidatorView extends javax.swing.JPanel
        implements ActionListener,
        PropertyChangeListener {

    private TraceMappings tm;
    //private String AspectJBinPath;
    //private String AspectJLibPath;
    private String aspectJFileLocation;
    private ReuseProject reuseProject;
    private JFileChooser chooser;
    private GeneratedComponent component;
    private String coverageAspectJFileLocation;
    private String executionFileQualifiedName;
    private String aspectJFile;
    private String BR;
    private String FS;
    private String librariesPath;
    private String tmpFolderPath;
    private String compiledDir;
    private String tmpCompileDir;
    private String extractedDir;
    private String jmodelFile;
    private String promTraceFile;
    private Coverage cover;
    private String aspectJFileName;
    private String revertAspectJTextArea;
    private ProMJGraph fsmGraph;
    private List<String> componentClassesList;
    private List<String> excludeDependClasses;
    private Map<String, Set<String>> interfaceMethodsToCover;
    private Map<String, double[]> providedInterfacesCoverage;

    /** Creates new form ComponentValidatorView */
    public ComponentValidatorView(ReuseProject project) {
        super(new BorderLayout());
        reuseProject = project;
        initComponents();
        listAvailableComponents();
        chooser = new JFileChooser();
        BR = System.getProperty("line.separator");
        FS = System.getProperty("file.separator");
        this.librariesPath = Utils.getJarFolder()+"lib/";
        this.interfaceMethodsToCover = new HashMap<String, Set<String>>();
        this.providedInterfacesCoverage = new HashMap<String, double[]>();
        deleteTmpDirCheck.setSelected(true);
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        processTabbedPanel = new javax.swing.JTabbedPane();
        componentSelectionPanel = new javax.swing.JPanel();
        availableComponentsPanel = new javax.swing.JPanel();
        selectComponentButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableComponentsList = new javax.swing.JList();
        selectedComponentTextField = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        dependanceList = new javax.swing.JList();
        dependLabel = new javax.swing.JLabel();
        addDependComponentButton = new javax.swing.JButton();
        removeDependComponentButton = new javax.swing.JButton();
        executionScenarioPanel = new javax.swing.JPanel();
        executionScenarioText = new javax.swing.JTextField();
        chooseExecutionScenario = new javax.swing.JButton();
        isJunitCheck = new javax.swing.JCheckBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        execDescription = new javax.swing.JTextArea();
        descriptionLabel = new javax.swing.JLabel();
        deleteTmpDirCheck = new javax.swing.JCheckBox();
        lcsajPanel = new javax.swing.JPanel();
        computeLcsajCoverage = new javax.swing.JButton();
        coverageTabpanel = new javax.swing.JTabbedPane();
        validationPanel = new javax.swing.JPanel();
        validationTabbedPane = new javax.swing.JTabbedPane();
        classPanel = new javax.swing.JPanel();
        howItWorksPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        howItWorksTextArea = new javax.swing.JTextArea();
        classUnderTestPanel = new javax.swing.JPanel();
        classUnderTestComboBox = new javax.swing.JComboBox();
        nextButton = new javax.swing.JButton();
        InterfacesJPanel = new javax.swing.JPanel();
        interfacesPanel = new javax.swing.JPanel();
        includeInterfacesPanel = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        includeInterfaceList = new javax.swing.JList();
        excludeInterfacesPanel = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        excludeInterfaceList = new javax.swing.JList();
        excludeInterfaceButton = new javax.swing.JButton();
        removeInterfaceButton = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        providedInterfacesList = new javax.swing.JList();
        includeInterfaceButton = new javax.swing.JButton();
        removeInterfaceButton1 = new javax.swing.JButton();
        addOtherInterface = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        nextButton1 = new javax.swing.JButton();
        scopeJPanel = new javax.swing.JPanel();
        nextButton2 = new javax.swing.JButton();
        previousButton1 = new javax.swing.JButton();
        scopePanel = new javax.swing.JPanel();
        includeScopePanel = new javax.swing.JPanel();
        includedScopeText = new javax.swing.JTextField();
        excludedScopePanel = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        excludedScopeList = new javax.swing.JList();
        excludeScopeButton = new javax.swing.JButton();
        removeScopeButton = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        scopeList = new javax.swing.JList();
        includedScopeButton1 = new javax.swing.JButton();
        removeScopeButton1 = new javax.swing.JButton();
        otherExcludedScopeText = new javax.swing.JTextField();
        addAnotherLabel = new javax.swing.JLabel();
        addOtherExcludeScopeButton = new javax.swing.JButton();
        testGenJPanel = new javax.swing.JPanel();
        nextButton3 = new javax.swing.JButton();
        previousButton2 = new javax.swing.JButton();
        testGenPanel = new javax.swing.JPanel();
        outputInterfacesPanel = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        outputInterfacesList = new javax.swing.JList();
        inputInterfacesPanel = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        inputInterfacesList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        providedInterfacesList1 = new javax.swing.JList();
        jScrollPane16 = new javax.swing.JScrollPane();
        requiredInterfacesList = new javax.swing.JList();
        inputInterfaceButton = new javax.swing.JButton();
        removeInputInterfaceButton = new javax.swing.JButton();
        outputInterfaceButton = new javax.swing.JButton();
        removeOutputInterfaceButton = new javax.swing.JButton();
        providedIntefacesLabel = new javax.swing.JLabel();
        requiredIntefacesLabel = new javax.swing.JLabel();
        aspectJJPanel = new javax.swing.JPanel();
        previousButton3 = new javax.swing.JButton();
        performValidation = new javax.swing.JButton();
        aspectJPanel = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        aspectJTextArea = new javax.swing.JTextArea();
        saveChangesButton = new javax.swing.JButton();
        revertChangesButton = new javax.swing.JButton();
        createAspectJFile = new javax.swing.JButton();
        proMPanel = new javax.swing.JPanel();
        proMScrollPane = new javax.swing.JScrollPane();
        proMTextArea = new javax.swing.JTextArea();
        proMLabel = new javax.swing.JLabel();
        proMButton = new javax.swing.JButton();
        generateHtmlPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        includeCoverageCheck = new javax.swing.JCheckBox();
        execCoveredLinesCheck = new javax.swing.JCheckBox();
        coveredPathsCheck = new javax.swing.JCheckBox();
        uncoveredPathsCheck = new javax.swing.JCheckBox();
        cfgCheck = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        includeValidationCheck = new javax.swing.JCheckBox();
        promXmlCheck = new javax.swing.JCheckBox();
        varMappingsCheck = new javax.swing.JCheckBox();
        stateMappingsCheck = new javax.swing.JCheckBox();
        fsmVisualizationCheck = new javax.swing.JCheckBox();
        modelJUnitCheck = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        selectedMethodsList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        allMethodsList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        selectMethodButton = new javax.swing.JButton();
        deselectMethodButton = new javax.swing.JButton();
        selectAllCheck = new javax.swing.JCheckBox();
        deselectAllCheck = new javax.swing.JCheckBox();
        generateHtmlReportButton = new javax.swing.JButton();

        componentSelectionPanel.setPreferredSize(new java.awt.Dimension(915, 648));

        availableComponentsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Available Components", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        selectComponentButton.setText("Select Component");
        selectComponentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectComponentButtonActionPerformed(evt);
            }
        });

        availableComponentsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(availableComponentsList);

        selectedComponentTextField.setEditable(false);

        jScrollPane8.setViewportView(dependanceList);
        dependanceList.setModel(new DefaultListModel());

        dependLabel.setText("Selected Component Depends on:");

        addDependComponentButton.setText("->");
        addDependComponentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDependComponentButtonActionPerformed(evt);
            }
        });

        removeDependComponentButton.setText("<-");
        removeDependComponentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDependComponentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout availableComponentsPanelLayout = new javax.swing.GroupLayout(availableComponentsPanel);
        availableComponentsPanel.setLayout(availableComponentsPanelLayout);
        availableComponentsPanelLayout.setHorizontalGroup(
            availableComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(availableComponentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(availableComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(availableComponentsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(availableComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(removeDependComponentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addDependComponentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(availableComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dependLabel)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))
                    .addGroup(availableComponentsPanelLayout.createSequentialGroup()
                        .addComponent(selectComponentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedComponentTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)))
                .addGap(0, 0, 0))
        );
        availableComponentsPanelLayout.setVerticalGroup(
            availableComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, availableComponentsPanelLayout.createSequentialGroup()
                .addGroup(availableComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, availableComponentsPanelLayout.createSequentialGroup()
                        .addComponent(dependLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, availableComponentsPanelLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(addDependComponentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeDependComponentButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(availableComponentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectComponentButton)
                    .addComponent(selectedComponentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        executionScenarioPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Execution Scenario File Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        executionScenarioText.setEditable(false);

        chooseExecutionScenario.setText("Choose");
        chooseExecutionScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseExecutionScenarioActionPerformed(evt);
            }
        });

        isJunitCheck.setText("is JUnit");

        execDescription.setColumns(20);
        execDescription.setRows(5);
        jScrollPane7.setViewportView(execDescription);

        descriptionLabel.setText("Description");

        javax.swing.GroupLayout executionScenarioPanelLayout = new javax.swing.GroupLayout(executionScenarioPanel);
        executionScenarioPanel.setLayout(executionScenarioPanelLayout);
        executionScenarioPanelLayout.setHorizontalGroup(
            executionScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, executionScenarioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(executionScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 873, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, executionScenarioPanelLayout.createSequentialGroup()
                        .addComponent(executionScenarioText, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseExecutionScenario))
                    .addGroup(executionScenarioPanelLayout.createSequentialGroup()
                        .addComponent(descriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 718, Short.MAX_VALUE)
                        .addComponent(isJunitCheck)))
                .addContainerGap())
        );
        executionScenarioPanelLayout.setVerticalGroup(
            executionScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionScenarioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(executionScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(executionScenarioText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseExecutionScenario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(executionScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isJunitCheck)
                    .addComponent(descriptionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addContainerGap())
        );

        deleteTmpDirCheck.setText("delete \"tmp\" directory");
        deleteTmpDirCheck.setToolTipText("uncheck it for debugging purposes");

        javax.swing.GroupLayout componentSelectionPanelLayout = new javax.swing.GroupLayout(componentSelectionPanel);
        componentSelectionPanel.setLayout(componentSelectionPanelLayout);
        componentSelectionPanelLayout.setHorizontalGroup(
            componentSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, componentSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(componentSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(executionScenarioPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(availableComponentsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteTmpDirCheck))
                .addContainerGap())
        );
        componentSelectionPanelLayout.setVerticalGroup(
            componentSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(componentSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(availableComponentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(executionScenarioPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteTmpDirCheck))
        );

        processTabbedPanel.addTab("Component Selection", componentSelectionPanel);

        computeLcsajCoverage.setText("Compute Coverage");
        computeLcsajCoverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeLcsajCoverageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lcsajPanelLayout = new javax.swing.GroupLayout(lcsajPanel);
        lcsajPanel.setLayout(lcsajPanelLayout);
        lcsajPanelLayout.setHorizontalGroup(
            lcsajPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lcsajPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lcsajPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(computeLcsajCoverage, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(coverageTabpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE))
                .addContainerGap())
        );
        lcsajPanelLayout.setVerticalGroup(
            lcsajPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lcsajPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(coverageTabpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(computeLcsajCoverage)
                .addContainerGap())
        );

        processTabbedPanel.addTab("Coverage", lcsajPanel);
        processTabbedPanel.setEnabledAt(1, false);

        validationTabbedPane.setForeground(new java.awt.Color(1, 1, 1));
        validationTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        validationTabbedPane.setFont(new java.awt.Font("Ubuntu", 0, 13));
        validationTabbedPane.setPreferredSize(new java.awt.Dimension(888, 100));

        howItWorksPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "How It Works", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        howItWorksTextArea.setColumns(20);
        howItWorksTextArea.setEditable(false);
        howItWorksTextArea.setLineWrap(true);
        howItWorksTextArea.setRows(5);
        howItWorksTextArea.setText("\n\n\t1.Class\n\t\tSelect the Class Under Test. The canditate classes include those that \n\t\timplement a provided interface of the component or the class from \n\t\twhich the component was extracted.\n\t\n\t2. Interfaces\n\t\tSelect Incuded Exclude Interfaces. In that tab a list of provided and \n\t\trequired interfaces is given. The provided intrefaces of the extracted \n\t\tcomponent should be added to the included interfaces list whereas \n\t\tthe required interfaces of the component should be added to the \n\t\texcluded list. In the excluded interfaces list if the required interfaces \n\t\tare provided through components that have been added in the \n\t\t\"Component Depends on\" list then it is not required to include them. \n\t\tFinally the reuse engineer may add additional interface at his/hers \n\t\tdiscretion.\n\n\t3. Scope\n\t\tSelect Include Exclude Scope. This defines the scope of the validation \n\t\tprocess. The reuse engineer may select from the most general packge \n\t\t(as it is recommended), up to a specific class.\n\n\t4. Tests\n\t\tSelect Test Generation Properties. In this tab the reuse enginner must \n\t\tdefine the input and output interfaces. Input interfaces are considered \n\t\tthose that are provided by the component and are going to be tested \n\t\tbased on the execution scenario. In the same manner, Output interfaces \n\t\tare considered those that are required by the component and are going \n\t\tto be tested based on the execution scenario. Required interfaces \n\t\tshould be implemented to include them in Output list. \n\n\t5. AspectJ\n\t\tAspect Oriented Programming is used to trace component's behaviour as\n\t\tit is executed. An AspectJ file is generated according to the fields of \n\t\t1, 2 and 3 tabs. Reuse Engineer may make any change in the desplayed \n\t\tcode.  ");
        jScrollPane5.setViewportView(howItWorksTextArea);

        javax.swing.GroupLayout howItWorksPanelLayout = new javax.swing.GroupLayout(howItWorksPanel);
        howItWorksPanel.setLayout(howItWorksPanelLayout);
        howItWorksPanelLayout.setHorizontalGroup(
            howItWorksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, howItWorksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                .addContainerGap())
        );
        howItWorksPanelLayout.setVerticalGroup(
            howItWorksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(howItWorksPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );

        classUnderTestPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Class Under Test", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        classUnderTestComboBox.setModel(new DefaultComboBoxModel());

        javax.swing.GroupLayout classUnderTestPanelLayout = new javax.swing.GroupLayout(classUnderTestPanel);
        classUnderTestPanel.setLayout(classUnderTestPanelLayout);
        classUnderTestPanelLayout.setHorizontalGroup(
            classUnderTestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classUnderTestPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classUnderTestComboBox, 0, 753, Short.MAX_VALUE)
                .addContainerGap())
        );
        classUnderTestPanelLayout.setVerticalGroup(
            classUnderTestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classUnderTestPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classUnderTestComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        nextButton.setText("Next ->");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout classPanelLayout = new javax.swing.GroupLayout(classPanel);
        classPanel.setLayout(classPanelLayout);
        classPanelLayout.setHorizontalGroup(
            classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(howItWorksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(classUnderTestPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        classPanelLayout.setVerticalGroup(
            classPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(howItWorksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classUnderTestPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nextButton)
                .addGap(7, 7, 7))
        );

        validationTabbedPane.addTab("1. Class", classPanel);

        interfacesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Interfaces", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        includeInterfacesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Included"));

        includeInterfaceList.setModel(new DefaultListModel());
        jScrollPane10.setViewportView(includeInterfaceList);

        javax.swing.GroupLayout includeInterfacesPanelLayout = new javax.swing.GroupLayout(includeInterfacesPanel);
        includeInterfacesPanel.setLayout(includeInterfacesPanelLayout);
        includeInterfacesPanelLayout.setHorizontalGroup(
            includeInterfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(includeInterfacesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );
        includeInterfacesPanelLayout.setVerticalGroup(
            includeInterfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(includeInterfacesPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );

        excludeInterfacesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Excluded"));

        excludeInterfaceList.setModel(new DefaultListModel());
        jScrollPane11.setViewportView(excludeInterfaceList);

        javax.swing.GroupLayout excludeInterfacesPanelLayout = new javax.swing.GroupLayout(excludeInterfacesPanel);
        excludeInterfacesPanel.setLayout(excludeInterfacesPanelLayout);
        excludeInterfacesPanelLayout.setHorizontalGroup(
            excludeInterfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(excludeInterfacesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );
        excludeInterfacesPanelLayout.setVerticalGroup(
            excludeInterfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(excludeInterfacesPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addContainerGap())
        );

        excludeInterfaceButton.setText("->");
        excludeInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excludeInterfaceButtonActionPerformed(evt);
            }
        });

        removeInterfaceButton.setText("<-");
        removeInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeInterfaceButtonActionPerformed(evt);
            }
        });

        providedInterfacesList.setModel(new DefaultListModel());
        jScrollPane12.setViewportView(providedInterfacesList);

        includeInterfaceButton.setText("->");
        includeInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeInterfaceButtonActionPerformed(evt);
            }
        });

        removeInterfaceButton1.setText("<-");
        removeInterfaceButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeInterfaceButton1ActionPerformed(evt);
            }
        });

        addOtherInterface.setText("Add Another");
        addOtherInterface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOtherInterfaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout interfacesPanelLayout = new javax.swing.GroupLayout(interfacesPanel);
        interfacesPanel.setLayout(interfacesPanelLayout);
        interfacesPanelLayout.setHorizontalGroup(
            interfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(interfacesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(interfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addOtherInterface, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(interfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, interfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(removeInterfaceButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(includeInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, interfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(removeInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(excludeInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(interfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(includeInterfacesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(excludeInterfacesPanel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        interfacesPanelLayout.setVerticalGroup(
            interfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, interfacesPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addOtherInterface)
                .addContainerGap())
            .addGroup(interfacesPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(includeInterfacesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(excludeInterfacesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
            .addGroup(interfacesPanelLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(includeInterfaceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeInterfaceButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 200, Short.MAX_VALUE)
                .addComponent(excludeInterfaceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeInterfaceButton)
                .addGap(110, 110, 110))
        );

        previousButton.setText("<- Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton1.setText("Next ->");
        nextButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InterfacesJPanelLayout = new javax.swing.GroupLayout(InterfacesJPanel);
        InterfacesJPanel.setLayout(InterfacesJPanelLayout);
        InterfacesJPanelLayout.setHorizontalGroup(
            InterfacesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InterfacesJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InterfacesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(interfacesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InterfacesJPanelLayout.createSequentialGroup()
                        .addComponent(previousButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton1)))
                .addContainerGap())
        );
        InterfacesJPanelLayout.setVerticalGroup(
            InterfacesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InterfacesJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(interfacesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InterfacesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton1)
                    .addComponent(previousButton))
                .addGap(7, 7, 7))
        );

        validationTabbedPane.addTab("2. Interfaces", InterfacesJPanel);

        nextButton2.setText("Next ->");
        nextButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButton2ActionPerformed(evt);
            }
        });

        previousButton1.setText("<- Previous");
        previousButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButton1ActionPerformed(evt);
            }
        });

        scopePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Scope", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        includeScopePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Included"));

        javax.swing.GroupLayout includeScopePanelLayout = new javax.swing.GroupLayout(includeScopePanel);
        includeScopePanel.setLayout(includeScopePanelLayout);
        includeScopePanelLayout.setHorizontalGroup(
            includeScopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(includeScopePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(includedScopeText, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addContainerGap())
        );
        includeScopePanelLayout.setVerticalGroup(
            includeScopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(includeScopePanelLayout.createSequentialGroup()
                .addComponent(includedScopeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        excludedScopePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Excluded"));

        excludedScopeList.setModel(new DefaultListModel());
        jScrollPane14.setViewportView(excludedScopeList);

        javax.swing.GroupLayout excludedScopePanelLayout = new javax.swing.GroupLayout(excludedScopePanel);
        excludedScopePanel.setLayout(excludedScopePanelLayout);
        excludedScopePanelLayout.setHorizontalGroup(
            excludedScopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(excludedScopePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addContainerGap())
        );
        excludedScopePanelLayout.setVerticalGroup(
            excludedScopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(excludedScopePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                .addContainerGap())
        );

        excludeScopeButton.setText("->");
        excludeScopeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excludeScopeButtonActionPerformed(evt);
            }
        });

        removeScopeButton.setText("<-");
        removeScopeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeScopeButtonActionPerformed(evt);
            }
        });

        scopeList.setModel(new DefaultListModel());
        jScrollPane15.setViewportView(scopeList);

        includedScopeButton1.setText("->");
        includedScopeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includedScopeButton1ActionPerformed(evt);
            }
        });

        removeScopeButton1.setText("<-");
        removeScopeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeScopeButton1ActionPerformed(evt);
            }
        });

        addAnotherLabel.setText("Add another -->");

        addOtherExcludeScopeButton.setText("Add");
        addOtherExcludeScopeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOtherExcludeScopeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scopePanelLayout = new javax.swing.GroupLayout(scopePanel);
        scopePanel.setLayout(scopePanelLayout);
        scopePanelLayout.setHorizontalGroup(
            scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scopePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .addGroup(scopePanelLayout.createSequentialGroup()
                        .addComponent(addAnotherLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
                        .addComponent(addOtherExcludeScopeButton))
                    .addComponent(otherExcludedScopeText, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(removeScopeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(excludeScopeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(removeScopeButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(includedScopeButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(includeScopePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(excludedScopePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        scopePanelLayout.setVerticalGroup(
            scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scopePanelLayout.createSequentialGroup()
                .addGroup(scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scopePanelLayout.createSequentialGroup()
                        .addComponent(includeScopePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(excludedScopePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(scopePanelLayout.createSequentialGroup()
                        .addGroup(scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(scopePanelLayout.createSequentialGroup()
                                .addComponent(includedScopeButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeScopeButton1)
                                .addGap(220, 220, 220)
                                .addComponent(excludeScopeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeScopeButton))
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(otherExcludedScopeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(scopePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addAnotherLabel)
                            .addComponent(addOtherExcludeScopeButton))
                        .addGap(16, 16, 16)))
                .addContainerGap())
        );

        javax.swing.GroupLayout scopeJPanelLayout = new javax.swing.GroupLayout(scopeJPanel);
        scopeJPanel.setLayout(scopeJPanelLayout);
        scopeJPanelLayout.setHorizontalGroup(
            scopeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scopeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scopeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scopePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(scopeJPanelLayout.createSequentialGroup()
                        .addComponent(previousButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton2)))
                .addContainerGap())
        );
        scopeJPanelLayout.setVerticalGroup(
            scopeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scopeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scopePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(scopeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousButton1)
                    .addComponent(nextButton2))
                .addGap(9, 9, 9))
        );

        validationTabbedPane.addTab("3. Scope", scopeJPanel);

        nextButton3.setText("Next ->");
        nextButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButton3ActionPerformed(evt);
            }
        });

        previousButton2.setText("<- Previous");
        previousButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButton2ActionPerformed(evt);
            }
        });

        testGenPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Test Generation Properties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        outputInterfacesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Interfaces"));

        outputInterfacesList.setModel(new DefaultListModel());
        jScrollPane18.setViewportView(outputInterfacesList);

        javax.swing.GroupLayout outputInterfacesPanelLayout = new javax.swing.GroupLayout(outputInterfacesPanel);
        outputInterfacesPanel.setLayout(outputInterfacesPanelLayout);
        outputInterfacesPanelLayout.setHorizontalGroup(
            outputInterfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputInterfacesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );
        outputInterfacesPanelLayout.setVerticalGroup(
            outputInterfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputInterfacesPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );

        inputInterfacesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Interfaces"));

        inputInterfacesList.setModel(new DefaultListModel());
        jScrollPane19.setViewportView(inputInterfacesList);

        javax.swing.GroupLayout inputInterfacesPanelLayout = new javax.swing.GroupLayout(inputInterfacesPanel);
        inputInterfacesPanel.setLayout(inputInterfacesPanelLayout);
        inputInterfacesPanelLayout.setHorizontalGroup(
            inputInterfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputInterfacesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );
        inputInterfacesPanelLayout.setVerticalGroup(
            inputInterfacesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputInterfacesPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );

        providedInterfacesList1.setModel(new DefaultListModel());
        jScrollPane6.setViewportView(providedInterfacesList1);

        requiredInterfacesList.setModel(new DefaultListModel());
        jScrollPane16.setViewportView(requiredInterfacesList);

        inputInterfaceButton.setText("->");
        inputInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputInterfaceButtonActionPerformed(evt);
            }
        });

        removeInputInterfaceButton.setText("<-");
        removeInputInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeInputInterfaceButtonActionPerformed(evt);
            }
        });

        outputInterfaceButton.setText("->");
        outputInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputInterfaceButtonActionPerformed(evt);
            }
        });

        removeOutputInterfaceButton.setText("<-");
        removeOutputInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeOutputInterfaceButtonActionPerformed(evt);
            }
        });

        providedIntefacesLabel.setText("Provided Interfaces");

        requiredIntefacesLabel.setText("Required Interfaces");

        javax.swing.GroupLayout testGenPanelLayout = new javax.swing.GroupLayout(testGenPanel);
        testGenPanel.setLayout(testGenPanelLayout);
        testGenPanelLayout.setHorizontalGroup(
            testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testGenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(testGenPanelLayout.createSequentialGroup()
                        .addGroup(testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                            .addComponent(providedIntefacesLabel)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(inputInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(removeInputInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(removeOutputInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(outputInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(requiredIntefacesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputInterfacesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputInterfacesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        testGenPanelLayout.setVerticalGroup(
            testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testGenPanelLayout.createSequentialGroup()
                .addGroup(testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(testGenPanelLayout.createSequentialGroup()
                        .addComponent(providedIntefacesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
                    .addComponent(inputInterfacesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(testGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, testGenPanelLayout.createSequentialGroup()
                        .addComponent(requiredIntefacesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                    .addComponent(outputInterfacesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(testGenPanelLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(inputInterfaceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeInputInterfaceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                .addComponent(outputInterfaceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeOutputInterfaceButton)
                .addGap(110, 110, 110))
        );

        javax.swing.GroupLayout testGenJPanelLayout = new javax.swing.GroupLayout(testGenJPanel);
        testGenJPanel.setLayout(testGenJPanelLayout);
        testGenJPanelLayout.setHorizontalGroup(
            testGenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testGenJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testGenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(testGenPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, testGenJPanelLayout.createSequentialGroup()
                        .addComponent(previousButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton3)))
                .addContainerGap())
        );
        testGenJPanelLayout.setVerticalGroup(
            testGenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testGenJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testGenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(testGenJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton3)
                    .addComponent(previousButton2))
                .addGap(8, 8, 8))
        );

        validationTabbedPane.addTab("4. Tests", testGenJPanel);

        previousButton3.setText("<- Previous");
        previousButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButton3ActionPerformed(evt);
            }
        });

        performValidation.setText("Perform Validation Process");
        performValidation.setEnabled(false);
        performValidation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performValidationActionPerformed(evt);
            }
        });

        aspectJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "AspectJ File", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        aspectJTextArea.setColumns(20);
        aspectJTextArea.setRows(5);
        jScrollPane17.setViewportView(aspectJTextArea);

        saveChangesButton.setText("Save Changes");
        saveChangesButton.setEnabled(false);
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        revertChangesButton.setText("Revert");
        revertChangesButton.setEnabled(false);
        revertChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertChangesButtonActionPerformed(evt);
            }
        });

        createAspectJFile.setText("Create AspectJ File");
        createAspectJFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAspectJFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aspectJPanelLayout = new javax.swing.GroupLayout(aspectJPanel);
        aspectJPanel.setLayout(aspectJPanelLayout);
        aspectJPanelLayout.setHorizontalGroup(
            aspectJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aspectJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aspectJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                    .addGroup(aspectJPanelLayout.createSequentialGroup()
                        .addComponent(saveChangesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(revertChangesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 436, Short.MAX_VALUE)
                        .addComponent(createAspectJFile)))
                .addContainerGap())
        );
        aspectJPanelLayout.setVerticalGroup(
            aspectJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aspectJPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aspectJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveChangesButton)
                    .addComponent(revertChangesButton)
                    .addComponent(createAspectJFile))
                .addContainerGap())
        );

        javax.swing.GroupLayout aspectJJPanelLayout = new javax.swing.GroupLayout(aspectJJPanel);
        aspectJJPanel.setLayout(aspectJJPanelLayout);
        aspectJJPanelLayout.setHorizontalGroup(
            aspectJJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aspectJJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aspectJJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aspectJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aspectJJPanelLayout.createSequentialGroup()
                        .addComponent(previousButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(performValidation)))
                .addContainerGap())
        );
        aspectJJPanelLayout.setVerticalGroup(
            aspectJJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aspectJJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aspectJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aspectJJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(performValidation)
                    .addComponent(previousButton3))
                .addGap(6, 6, 6))
        );

        validationTabbedPane.addTab("5. AspectJ", aspectJJPanel);

        javax.swing.GroupLayout validationPanelLayout = new javax.swing.GroupLayout(validationPanel);
        validationPanel.setLayout(validationPanelLayout);
        validationPanelLayout.setHorizontalGroup(
            validationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, validationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(validationTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
                .addContainerGap())
        );
        validationPanelLayout.setVerticalGroup(
            validationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(validationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(validationTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );

        processTabbedPanel.addTab("Validation", validationPanel);
        processTabbedPanel.setEnabledAt(2, false);

        proMTextArea.setColumns(20);
        proMTextArea.setRows(5);
        proMScrollPane.setViewportView(proMTextArea);

        proMLabel.setText("Path:");

        proMButton.setText("Visualize MXML");
        proMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proMButtonVisualizeMXML(evt);
            }
        });

        javax.swing.GroupLayout proMPanelLayout = new javax.swing.GroupLayout(proMPanel);
        proMPanel.setLayout(proMPanelLayout);
        proMPanelLayout.setHorizontalGroup(
            proMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proMPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(proMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proMScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
                    .addComponent(proMLabel)
                    .addComponent(proMButton))
                .addContainerGap())
        );
        proMPanelLayout.setVerticalGroup(
            proMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proMPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(proMLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proMScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proMButton)
                .addGap(28, 28, 28))
        );

        processTabbedPanel.addTab("ProM MXML File", proMPanel);
        processTabbedPanel.setEnabledAt(3, false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Coverage Options to Include in the Report", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        includeCoverageCheck.setText("Include Coverage Information");
        includeCoverageCheck.setEnabled(false);
        includeCoverageCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeCoverageCheckActionPerformed(evt);
            }
        });

        execCoveredLinesCheck.setText("1. Execution Scenario Covered Lines");
        execCoveredLinesCheck.setEnabled(false);
        execCoveredLinesCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execCoveredLinesCheckActionPerformed(evt);
            }
        });

        coveredPathsCheck.setText("2. Covered Lcsaj Paths (JJ-Paths)");
        coveredPathsCheck.setEnabled(false);
        coveredPathsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coveredPathsCheckActionPerformed(evt);
            }
        });

        uncoveredPathsCheck.setText("3. Uncovered Lcsaj Paths (JJ-Paths)");
        uncoveredPathsCheck.setEnabled(false);
        uncoveredPathsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uncoveredPathsCheckActionPerformed(evt);
            }
        });

        cfgCheck.setText("4. Control Flow Graph");
        cfgCheck.setEnabled(false);
        cfgCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cfgCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(includeCoverageCheck)
                .addGap(93, 93, 93))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cfgCheck)
                    .addComponent(uncoveredPathsCheck)
                    .addComponent(coveredPathsCheck)
                    .addComponent(execCoveredLinesCheck))
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(includeCoverageCheck)
                .addGap(32, 32, 32)
                .addComponent(execCoveredLinesCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(coveredPathsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uncoveredPathsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cfgCheck)
                .addGap(63, 63, 63))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Validation Options  to Include in the Report", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        includeValidationCheck.setText("Include Validation Information");
        includeValidationCheck.setEnabled(false);
        includeValidationCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeValidationCheckActionPerformed(evt);
            }
        });

        promXmlCheck.setText("1. ProM XML file (FSM)");
        promXmlCheck.setEnabled(false);

        varMappingsCheck.setText("2. Variable Mapping");
        varMappingsCheck.setEnabled(false);

        stateMappingsCheck.setText("3. State Mappings");
        stateMappingsCheck.setEnabled(false);

        fsmVisualizationCheck.setText("4. FSM Visualization Graph");
        fsmVisualizationCheck.setEnabled(false);

        modelJUnitCheck.setText("5. Model for ModelJunit");
        modelJUnitCheck.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(includeValidationCheck))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modelJUnitCheck)
                            .addComponent(fsmVisualizationCheck)
                            .addComponent(stateMappingsCheck)
                            .addComponent(varMappingsCheck)
                            .addComponent(promXmlCheck))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(includeValidationCheck)
                .addGap(31, 31, 31)
                .addComponent(promXmlCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(varMappingsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(stateMappingsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fsmVisualizationCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modelJUnitCheck)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Methods Selection for Coverage Report", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        selectedMethodsList.setModel(new DefaultListModel());
        selectedMethodsList.setEnabled(false);
        jScrollPane3.setViewportView(selectedMethodsList);

        jLabel2.setText("Selected Methods");

        allMethodsList.setModel(new DefaultListModel());
        allMethodsList.setEnabled(false);
        jScrollPane4.setViewportView(allMethodsList);

        jLabel1.setText("Available methods");

        selectMethodButton.setText("Select");
        selectMethodButton.setEnabled(false);
        selectMethodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectMethodButtonActionPerformed(evt);
            }
        });

        deselectMethodButton.setText("Deselect");
        deselectMethodButton.setEnabled(false);
        deselectMethodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectMethodButtonActionPerformed(evt);
            }
        });

        selectAllCheck.setText("select all");
        selectAllCheck.setEnabled(false);
        selectAllCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllCheckActionPerformed(evt);
            }
        });

        deselectAllCheck.setText("de-select all");
        deselectAllCheck.setEnabled(false);
        deselectAllCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 235, Short.MAX_VALUE)
                        .addComponent(selectAllCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectMethodButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                        .addComponent(deselectAllCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deselectMethodButton)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(selectMethodButton)
                        .addComponent(selectAllCheck))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deselectMethodButton)
                        .addComponent(deselectAllCheck))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addContainerGap())
        );

        generateHtmlReportButton.setText("Generate Html Report");
        generateHtmlReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateHtmlReportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generateHtmlPanelLayout = new javax.swing.GroupLayout(generateHtmlPanel);
        generateHtmlPanel.setLayout(generateHtmlPanelLayout);
        generateHtmlPanelLayout.setHorizontalGroup(
            generateHtmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generateHtmlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generateHtmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generateHtmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(generateHtmlReportButton)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        generateHtmlPanelLayout.setVerticalGroup(
            generateHtmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generateHtmlPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(generateHtmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generateHtmlPanelLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(generateHtmlReportButton))
                    .addGroup(generateHtmlPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(41, 41, 41)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(32, 32, 32))
        );

        processTabbedPanel.addTab("Html Report", generateHtmlPanel);
        processTabbedPanel.setEnabledAt(4, false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processTabbedPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processTabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
private void createTmpDirs(){
    tmpFolderPath = component.getComponentDirectory() + "tmp" + FS;
    compiledDir = component.getComponentDirectory() + "tmp" + FS + "compiled" + FS;
    extractedDir =  component.getComponentDirectory() + "tmp" + FS + "extracted" + FS;
    tmpCompileDir =  component.getComponentDirectory() + "tmp" + FS + "tmpCompileDir" + FS;
    Utils.createDir(component.getComponentDirectory() + "tmp");
    Utils.createDir(compiledDir);
    Utils.createDir(extractedDir);
    Utils.createDir(tmpCompileDir);
}   

private void deleteTmpDirs(){
    if(deleteTmpDirCheck.isSelected()){
        Utils.deleteDirectory(new File(component.getComponentDirectory() + "tmp"));
    }
}   
    
private void proMButtonVisualizeMXML(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proMButtonVisualizeMXML
        try {
            for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
                if (processTabbedPanel.getTitleAt(i).equals("FSM Visualization")) {
                    processTabbedPanel.remove(i);
                }
            }
            JComponent fsmPanel = Utils.getFSM(proMLabel.getText(), promTraceFile);
            fsmGraph = ((JGraphVisualizationPanel)fsmPanel).getGraph();
            processTabbedPanel.insertTab("FSM Visualization", null, fsmPanel, "FSM Visualization Panel", processTabbedPanel.getTabCount()-2);
            fsmVisualizationCheck.setEnabled(true);
            fsmVisualizationCheck.setSelected(true);
        } catch (FileNotFoundException ex) {
        }
}//GEN-LAST:event_proMButtonVisualizeMXML

private void createAspectJFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAspectJFileActionPerformed
    if(component == null){
        JOptionPane.showMessageDialog(null, "Please select Component from\n \"Component Selection\" tab","Select Component",JOptionPane.WARNING_MESSAGE);
        processTabbedPanel.setSelectedIndex(0);
    } else if(includeInterfaceList.getModel().getSize() == 0){
        JOptionPane.showMessageDialog(null, "Please add at list one Included\n Interface from \"Interfaces\" tab","Add Included Interface",JOptionPane.WARNING_MESSAGE);
        validationTabbedPane.setSelectedIndex(1);
    } else if(includedScopeText.getText().length() == 0){
        JOptionPane.showMessageDialog(null, "Please select Included Scope\n from \"Scope\" tab","Select Included Scope",JOptionPane.WARNING_MESSAGE);
        validationTabbedPane.setSelectedIndex(2);
    } else if(inputInterfacesList.getModel().getSize() == 0){
        JOptionPane.showMessageDialog(null, "Please add at least one Input\n Interface from \"Tests\" tab","Add Input Interface",JOptionPane.WARNING_MESSAGE);
        validationTabbedPane.setSelectedIndex(3);
    } else if(executionScenarioText.getText().length() == 0){
         JOptionPane.showMessageDialog(null, "Please select Execution Scenario\n from \"Component Selection\" tab","Select Execution Scenario",JOptionPane.WARNING_MESSAGE);
         processTabbedPanel.setSelectedIndex(0);
    } else{
        createTmpDirs();
        initComponentClassesDependClasses(component.getComponentSourceFolder());
        List<String> includedInterfaces = new ArrayList<String>();        
        for (int i = 0; i < includeInterfaceList.getModel().getSize(); i++){
            includedInterfaces.add(includeInterfaceList.getModel().getElementAt(i).toString());
        }
         
        
        List<String> excludedInterfaces = new ArrayList<String>();
        for (int i = 0; i < excludeInterfaceList.getModel().getSize(); i++){
            excludedInterfaces.add(excludeInterfaceList.getModel().getElementAt(i).toString());
        }
        
        List<String> includedScope = new ArrayList<String>();
        includedScope.add(includedScopeText.getText());

        List<String> excludedScope = new ArrayList<String>();
        for (int i = 0; i < excludedScopeList.getModel().getSize(); i++){
            excludedScope.add(excludedScopeList.getModel().getElementAt(i).toString());
        }

        aspectJFileName = "ValidationAspectJFile";
        aspectJFile ="";

        aspectJFile += "package eu.opensme.cope.test." + aspectJFileName + ";" + BR + BR;
        aspectJFile +="import java.io.*;" + BR
                + "import java.lang.reflect.Field;" + BR
                + "import java.text.DateFormat;" + BR
                + "import java.text.SimpleDateFormat;" + BR
                + "import java.util.Date;" + BR
                + "import java.util.List;" + BR + BR
                + "import org.aspectj.lang.JoinPoint;" + BR
                + "import org.aspectj.lang.reflect.CodeSignature;" + BR
                + "import org.aspectj.lang.reflect.FieldSignature;" + BR + BR
                + "public aspect " + aspectJFileName + BR;
        aspectJFile +="{" + BR + ""
                + "	int i = 0;" + BR + ""
                + "	String BR = System.getProperty(\"line.separator\");	" + BR + ""
                + "" + BR + ""
                + "	private BufferedWriter stream = null;" + BR + ""
                + "	" + BR + ""
                + "	private Field field;" + BR + ""
                + "	private Object object;" + BR + ""
                + "" + BR + ""
                + "	pointcut nE() : " + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + ""
                + "		!within(" + aspectJFileName + "+)" + BR + "";
        for(String qualifiedNameClass : excludeDependClasses){
            aspectJFile += "		&& !within(" + qualifiedNameClass + "+)" + BR + "";
        }
        aspectJFile += "		&& initialization(*.new(..))" + BR;
                
        
        if (excludedScope.size() > 0) {
            aspectJFile += "		&& !("+ BR;
            
            for (int i = 0; i < excludedScope.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		initialization("+ excludedScope.get(i) + ".new(..))" + BR;
                } else {
                    aspectJFile += "		|| initialization("+ excludedScope.get(i) + ".new(..))" + BR;
                }
            }
            aspectJFile += "		)"+ BR;
        }
        

        if (includedInterfaces.size() > 0) {
            aspectJFile += "		&& (" + BR;
            for (int i = 0; i < includedInterfaces.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		    target(" + includedInterfaces.get(i) + "+)" + BR;
                } else {
                    aspectJFile += "		    || target(" + includedInterfaces.get(i) + "+)" + BR;
                }
            }
            aspectJFile += "		)" + BR;
        }
        if (excludedInterfaces.size() > 0) {
            aspectJFile += "		&& !(" + BR;
            for (int i = 0; i < excludedInterfaces.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		    target(" + excludedInterfaces.get(i) + "+)" + BR;
                } else {
                    aspectJFile += "		    || target(" + excludedInterfaces.get(i) + "+)" + BR;
                }
            }
            aspectJFile += "		)";
        }
        aspectJFile += "		;" + BR + ""
                + "	pointcut nA() : " + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + ""
                + "		!within("+ aspectJFileName + "+)" + BR;
        for(String qualifiedNameClass : excludeDependClasses){
            aspectJFile += "		&& !within(" + qualifiedNameClass + "+)" + BR + "";
        }
                
        if (includedScope.size() > 0) {
            aspectJFile += "		&& ("+ BR;
            
            for (int i = 0; i < includedScope.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		initialization("+ includedScope.get(i) + "..*.new(..))" + BR;
                } else {
                    aspectJFile += "		|| initialization("+ includedScope.get(i) + "..*.new(..))" + BR;
                }
            }
            aspectJFile += "		)"+ BR;
        }
        
        if (excludedScope.size() > 0) {
            aspectJFile += "		&& !("+ BR;
            
            for (int i = 0; i < excludedScope.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		initialization("+ excludedScope.get(i) + ".new(..))" + BR;
                } else {
                    aspectJFile += "		|| initialization("+ excludedScope.get(i) + ".new(..))" + BR;
                }
            }
            aspectJFile += "		)"+ BR;
        }
        
                
        aspectJFile += "		&& !cflow(nE());" + BR + ""
                + "	" + BR + ""
                + "	pointcut f() : " + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + ""
                + "		!within("+ aspectJFileName + "+)" + BR + "";
        for(String qualifiedNameClass : excludeDependClasses){
            aspectJFile += "		&& !within(" + qualifiedNameClass + "+)" + BR + "";
        }
        
        if (excludedScope.size() > 0) {
            aspectJFile += "		&& !("+ BR;
            
            for (int i = 0; i < excludedScope.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		execution(* "+ excludedScope.get(i) + "..*(..)) || execution(* "+ excludedScope.get(i) + "..*(..) throws *)" + BR + "";
                } else {
                    aspectJFile += "		|| execution(* "+ excludedScope.get(i) + "..*(..)) || execution(* "+ excludedScope.get(i) + "..*(..) throws *)" + BR + "";
                }
            }
            aspectJFile += "		)"+ BR;
        }        
        
        if (includedScope.size() > 0) {
            aspectJFile += "		&& ("+ BR;

            for (int i = 0; i < includedScope.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		execution(* "+ includedScope.get(i) + "..*(..)) || execution(* "+ includedScope.get(i) + "..*(..) throws *)" + BR + "";
                } else {
                    aspectJFile += "		|| execution(* "+ includedScope.get(i) + "..*(..)) || execution(* "+ includedScope.get(i) + "..*(..) throws *)" + BR + "";
                }
            }
            aspectJFile += "		);";
        }
        
        aspectJFile += "    " + BR + ""
                + "	pointcut sF(Object o):" + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + ""
                + "		!within("+ aspectJFileName + "+)" + BR + "";
        for(String qualifiedNameClass : excludeDependClasses){
            aspectJFile += "		&& !within(" + qualifiedNameClass + "+)" + BR + "";
        }
        aspectJFile += "		&& set (* *)" + BR + ""
                + "		&& cflow(f())" + BR + ""
                + "		&& args(o)" + BR + "";
        
        if (includedScope.size() > 0) {
            aspectJFile += "		&& ("+ BR;

            for (int i = 0; i < includedScope.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		withincode(* "+ includedScope.get(i) + "..*(..))" + BR + "";
                } else {
                    aspectJFile += "		|| withincode(* "+ includedScope.get(i) + "..*(..))" + BR + "";
                }
            }
            aspectJFile += "		);"+ BR;
        }
        
        
        aspectJFile += "	" + BR + ""
                + "	pointcut cL():" + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + ""
                + "		!within("+ aspectJFileName + "+)" + BR + "";
        for(String qualifiedNameClass : excludeDependClasses){
            aspectJFile += "		&& !within(" + qualifiedNameClass + "+)" + BR + "";
        }
        aspectJFile += "		&& (" + BR + ""
                + "			call(* java.util.Collection+.add*(..)) ||" + BR + ""
                + "//			call(* java.util.List+.add*(..)) ||" + BR + ""
                + "			call(* java.util.List+.clear(..)) ||" + BR + ""
                + "			call(* java.util.List+.remove*(..)) ||" + BR + ""
                + "			call(* java.util.List+.set(..))" + BR + ""
                + "		)" + BR + ""
                + "		&& cflow(f())" + BR + "";
        
        if (includedScope.size() > 0) {
            aspectJFile += "		&& ("+ BR;

            for (int i = 0; i < includedScope.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		withincode(* "+ includedScope.get(i) + "..*(..))" + BR + "";
                } else {
                    aspectJFile += "		|| withincode(* "+ includedScope.get(i) + "..*(..))" + BR + "";
                }
            }
            aspectJFile += "		);"+ BR;
        }
                
        aspectJFile += "" + BR + ""
                + "	pointcut gL(Object o):" + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + ""
                + "		!within("+ aspectJFileName + "+)" + BR + "";
        for(String qualifiedNameClass : excludeDependClasses){
            aspectJFile += "		&& !within(" + qualifiedNameClass + "+)" + BR + "";
        }
        aspectJFile += "		&& get(List+ *)" + BR + ""
                + "		&& target(o)" + BR + ""
                + "		&& cflow(f())" + BR + "";

        if (includedScope.size() > 0) {
            aspectJFile += "		&& ("+ BR;

            for (int i = 0; i < includedScope.size(); i++) {
                if (i == 0) {
                    aspectJFile += "		withincode(* "+ includedScope.get(i) + "..*(..))" + BR + "";
                } else {
                    aspectJFile += "		|| withincode(* "+ includedScope.get(i) + "..*(..))" + BR + "";
                }
            }
            aspectJFile += "		);"+ BR;
        }        
        
        aspectJFile += "	" + BR + ""
                + "    before(): nE(){" + BR + ""
                + "    	i = 0;" + BR + ""
                + "    	initialTrace(thisJoinPointStaticPart, \"@\");    	" + BR + ""
                + "    }" + BR + ""
                + "    " + BR + ""
                + "    before(): nA(){" + BR + ""
                + "    	i++;" + BR + ""
                + "    	initialFunctionTrace(thisJoinPointStaticPart,\"f\");" + BR + ""
                + "    }    " + BR + ""
                + "    " + BR + ""
                + "    after() : nA(){" + BR + ""
                + "//    	initialFunctionTrace(thisJoinPointStaticPart,\"e\");" + BR + ""
                + "    	i--;" + BR + ""
                + "    }    " + BR + ""
                + "" + BR + ""
                + "    before(): f(){" + BR + ""
                + "    	i++;" + BR + ""
                + "    	functionTrace(thisJoinPoint, \"f\");" + BR + ""
                + "    	functionParameters(thisJoinPoint, \"p\");" + BR + ""
                + "    }" + BR + ""
                + "" + BR + ""
                + "	after() returning (Object o): f(){" + BR + ""
                + "    	functionEndTrace(thisJoinPoint, \"e\", o);" + BR + ""
                + "    	i--;" + BR + ""
                + "    	" + BR + ""
                + "    }" + BR + ""
                + " " + BR + ""
                + "    before(): cL(){" + BR + ""
                + "//    	listCallTrace(thisJoinPointStaticPart,\"c\"); " + BR + ""
                + "	}  " + BR + ""
                + "" + BR + ""
                + "    after(): cL(){" + BR + ""
                + "    	afterListCallTrace(thisJoinPointStaticPart,\"c\");       		" + BR + ""
                + "	}  " + BR + ""
                + "    " + BR + ""
                + "    before(Object o): gL(o){" + BR + ""
                + "    	getTrace(thisJoinPoint,\"g\",o);" + BR + ""
                + "    }" + BR + ""
                + "    " + BR + ""
                + "    before(Object o): sF(o){" + BR + ""
                + "    	if ((i!=0)) {" + BR + ""
                + "    		getObject(thisJoinPoint,\"o\",o);             	" + BR + ""
                + "    		setTrace(thisJoinPointStaticPart,\"s\",o);             	" + BR + ""
                + "    	}" + BR + ""
                + "	}" + BR + ""
                + "" + BR + ""
                + "	private BufferedWriter setupStream() {" + BR + ""
                + "		if (stream != null) return stream;" + BR + ""
                + "		" + BR + ""
                + "		FileWriter fstream = null;" + BR + ""
                + "		try {" + BR + ""
                + "			fstream = new FileWriter(\"" + extractedDir + "trace.txt\");" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}" + BR + ""
                + "		" + BR + ""
                + "		stream = new BufferedWriter(fstream);" + BR + ""
                + "	    return stream;" + BR + ""
                + "	}" + BR + ""
                + "	" + BR + ""
                + "	private void initialTrace(JoinPoint.StaticPart jp, String ch){" + BR + ""
                + "//    	System.out.println(ch + i + \" -> \" + jp.toLongString());" + BR + ""
                + "    	" + BR + ""
                + "		BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i + \" -> \" + jp.toLongString() + BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}			" + BR + ""
                + "	}" + BR + ""
                + "	" + BR + ""
                + "	private void setTrace(JoinPoint.StaticPart jp, String ch, Object o){" + BR + ""
                + "		String s = ((FieldSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "	    	+ \".\"" + BR + ""
                + "			+ ((FieldSignature)jp.getSignature()).getName()" + BR + ""
                + "			+  \" -> \";" + BR + ""
                + "		" + BR + ""
                + "			if (o==null){" + BR + ""
                + "				s = s + \"null\";" + BR + ""
                + "			}" + BR + ""
                + "			else{" + BR + ""
                + "				s = s + o.toString().replace(\"\\n\", \"<BR>\");" + BR
                + "			}" + BR + ""
                + "			" + BR + ""
                + "			s = s +  \" -> \" " + BR + ""
                + "			+ ((FieldSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "			+ \" -> \"" + BR + ""
                + "			+ ((FieldSignature)jp.getSignature()).getField().getType().getName();" + BR + ""
                + "" + BR + ""
                + "		" + BR + ""
                + "//    	System.out.println(ch + i + \" -> \" +s);" + BR + ""
                + "    	" + BR + ""
                + "    	BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i + \" -> \" +s +BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	 		" + BR + ""
                + "	}" + BR + ""
                + "" + BR + ""
                + "	private void getObject(JoinPoint jp, String ch, Object o){" + BR + ""
                + "		String s = ((FieldSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "	    	+ \".\"" + BR + ""
                + "			+ ((FieldSignature)jp.getSignature()).getName()" + BR + ""
                + "			+  \" -> \";" + BR + ""
                + "		" + BR + ""
                + "			if (o==null){" + BR + ""
                + "				s = s + \"null\";" + BR + ""
                + "			}" + BR + ""
                + "			else{" + BR + ""
                + "		    	Object oldValue = null;" + BR + ""
                + "		    	try {" + BR + ""
                + "		    		Class clazz = jp.getSignature().getDeclaringType();" + BR + ""
                + "		    		String fieldName = jp.getSignature().getName();" + BR + ""
                + "		    		Field field = clazz.getDeclaredField(fieldName);" + BR + ""
                + "		    		field.setAccessible(true);" + BR + ""
                + "		    		oldValue = field.get(jp.getThis());" + BR + ""
                + "				} catch (Exception e) {" + BR + ""
                + "				}" + BR + ""
                + "				s = s + oldValue;" + BR + ""
                + "			}" + BR + ""
                + "			" + BR + ""
                + "			s = s +  \" -> \" " + BR + ""
                + "			+ ((FieldSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "			+ \" -> \"" + BR + ""
                + "			+ ((FieldSignature)jp.getSignature()).getField().getType().getName();" + BR + ""
                + "" + BR + ""
                + "		" + BR + ""
                + "//    	System.out.println(ch + i + \" -> \" +s);" + BR + ""
                + "    	" + BR + ""
                + "    	BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i + \" -> \" +s +BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	 		" + BR + ""
                + "	}" + BR + ""
                + "	" + BR + ""
                + "	private void getTrace(JoinPoint jp, String ch, Object o){" + BR + ""
                + "//		System.out.println(ch + i +\"    \" +jp.toLongString());" + BR + ""
                + "" + BR + ""
                + "    	String s = ((FieldSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "    		+ \".\"" + BR + ""
                + "    		+ ((FieldSignature)jp.getSignature()).getName() " + BR + ""
                + "    		+ \" -> \"  " + BR + ""
                + "    		+ jp.getSourceLocation().getLine() " + BR + ""
                + "    		+ \" -> \" " + BR + ""
                + "    		+ ((FieldSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "    		+ \" -> \"" + BR + ""
                + "    		+ ((FieldSignature)jp.getSignature()).getField().getType().getName()" + BR + ""
                + "    		+ \" -> \";" + BR + ""
                + "" + BR + ""
                + "    	field = ((FieldSignature)jp.getSignature()).getField();" + BR + ""
                + "    	object = o;" + BR + ""
                + "    	" + BR + ""
                + "		if (o==null){" + BR + ""
                + "			s = s + \"null\";" + BR + ""
                + "		}" + BR + ""
                + "		else{" + BR + ""
                + "	    	Object oldValue = null;" + BR + ""
                + "	    	try {" + BR + ""
                + "	    		Class clazz = jp.getSignature().getDeclaringType();" + BR + ""
                + "	    		String fieldName = jp.getSignature().getName();" + BR + ""
                + "	    		Field field = clazz.getDeclaredField(fieldName);" + BR + ""
                + "	    		field.setAccessible(true);" + BR + ""
                + "	    		oldValue = field.get(jp.getThis());" + BR + ""
                + "			} catch (Exception e) {" + BR + ""
                + "			}" + BR + ""
                + "			s = s + oldValue;" + BR + ""
                + "		}" + BR + ""
                + "    	" + BR + ""
                + "		BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i +\" -> \" + s + BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	   		" + BR + ""
                + "	}" + BR + ""
                + "	" + BR + ""
                + "	private void functionTrace(JoinPoint jp, String ch){" + BR + ""
                + "	    String s = ((CodeSignature)jp.getSignature()).getDeclaringTypeName() " + BR + ""
                + "			+ \".\" " + BR + ""
                + "			+ ((CodeSignature)jp.getSignature()).getName()" + BR + ""
                + "			+  \"(\";" + BR + ""
                + "		Class[] parameters = ((CodeSignature)jp.getSignature()).getParameterTypes(); " + BR + ""
                + "		" + BR + ""
                + "		for (int k = 0; k < parameters.length; k++) {" + BR + ""
                + "			s= s+ parameters[k].getCanonicalName();" + BR + ""
                + "			if (k+1<parameters.length)" + BR + ""
                + "				s= s+ \", \";" + BR + ""
                + "		}" + BR + ""
                + "" + BR + ""
                + "        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");" + BR + ""
                + "        Date date = new Date();" + BR + ""
                + "        " + BR + ""
                + "		s= s+ \")\" + \" -> \"+ ((CodeSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "    		+  \" -> \" " + BR + ""
                + "    		+ dateFormat.format(date);		" + BR + ""
                + "		" + BR + ""
                + "	//	System.out.println(ch + i + \" -> \" +s);" + BR + ""
                + "		" + BR + ""
                + "		BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i + \" -> \" +s +BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	  " + BR + ""
                + "	}" + BR + ""
                + "	" + BR + ""
                + "    private void functionParameters(JoinPoint jp, String ch) {" + BR + ""
                + "		String[] parameterNames = ((CodeSignature)jp.getSignature()).getParameterNames();" + BR + ""
                + "		Class[] parameterTypes = ((CodeSignature)jp.getSignature()).getParameterTypes();" + BR + ""
                + "		Object[] objs = jp.getArgs();" + BR + ""
                + "		" + BR + ""
                + "		String s = \"\";" + BR + ""
                + "		for (int k = 0; k < objs.length; k++) {" + BR + ""
                + "			String objValue = \"\" + objs[k];" + BR + ""
                + "			s = s " + BR + ""
                + "				+ ch + i " + BR + ""
                + "				+ \" -> \"" + BR + ""
                + "				+ parameterNames[k]" + BR + ""
                + "				+ \" -> \"" + BR + ""
                + "				+ objValue.replace(\"\\n\", \"<BR>\")" + BR
                + "				+ \" -> \"" + BR + ""
                + "				+ k" + BR + ""
                + "				+ \" -> \"" + BR + ""
                + "				+ parameterTypes[k].getName()" + BR + ""
                + "				+ BR;" + BR + ""
                + "		}" + BR + ""
                + "" + BR + ""
                + "		BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(s);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	" + BR + ""
                + "		" + BR + ""
                + "	}	" + BR + ""
                + "	" + BR + ""
                + "	private void functionEndTrace(JoinPoint jp, String ch, Object o){" + BR + ""
                + "		String returnType = \"void\";" + BR + ""
                + "		" + BR + ""
                + "		if (o!=null)" + BR + ""
                + "			returnType = o.getClass().getName();" + BR + ""
                + "		" + BR + ""
                + "	    String s =  returnType" + BR + ""
                + "	    	+ \" -> \" " + BR + ""
                + "	    	+ ((CodeSignature)jp.getSignature()).getDeclaringTypeName() " + BR + ""
                + "			+ \".\" " + BR + ""
                + "			+ ((CodeSignature)jp.getSignature()).getName()" + BR + ""
                + "			+  \"(\";" + BR + ""
                + "		Class[] parameters = ((CodeSignature)jp.getSignature()).getParameterTypes(); " + BR + ""
                + "		" + BR + ""
                + "		for (int k = 0; k < parameters.length; k++) {" + BR + ""
                + "			s= s+ parameters[k].getCanonicalName();" + BR + ""
                + "			if (k+1<parameters.length)" + BR + ""
                + "				s= s+ \", \";" + BR + ""
                + "		}" + BR + ""
                + "" + BR + ""
                + "        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");" + BR + ""
                + "        Date date = new Date();" + BR + ""
                + "        " + BR + ""
                + "		s= s+ \")\" + \" -> \"+ ((CodeSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "    		+  \" -> \" " + BR + ""
                + "    		+ dateFormat.format(date);		" + BR + ""
                + "		" + BR + ""
                + "		s = s + \" -> \" + o;" + BR + ""
                + "		" + BR + ""
                + "		" + BR + ""
                + "	//	System.out.println(ch + i + \" -> \" +s);" + BR + ""
                + "		" + BR + ""
                + "		BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i + \" -> \" +s +BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	  " + BR + ""
                + "	}" + BR + ""
                + "" + BR + ""
                + "	private void initialFunctionTrace(JoinPoint.StaticPart jp, String ch){" + BR + ""
                + "	    String s = ((CodeSignature)jp.getSignature()).getDeclaringTypeName() " + BR + ""
                + "			+ \".\" " + BR + ""
                + "			+ ((CodeSignature)jp.getSignature()).toShortString().replace(\"(..)\", \"\")" + BR + ""
                + "			+  \"(\";" + BR + ""
                + "		Class[] parameters = ((CodeSignature)jp.getSignature()).getParameterTypes(); " + BR + ""
                + "		" + BR + ""
                + "		for (int k = 0; k < parameters.length; k++) {" + BR + ""
                + "			s= s+ parameters[k].getCanonicalName();" + BR + ""
                + "			if (k+1<parameters.length)" + BR + ""
                + "				s= s+ \", \";" + BR + ""
                + "		}" + BR + ""
                + "" + BR + ""
                + "        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");" + BR + ""
                + "        Date date = new Date();		" + BR + ""
                + "		s= s+ \")\" + \" -> \"+ ((CodeSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "			+  \" -> \" " + BR + ""
                + "			+ dateFormat.format(date);" + BR + ""
                + "		" + BR + ""
                + "	//	System.out.println(ch + i + \" -> \" +s);" + BR + ""
                + "		" + BR + ""
                + "		BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i + \" -> \" +s +BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	    " + BR + ""
                + "			" + BR + ""
                + "	}" + BR + ""
                + "" + BR + ""
                + "	private void initialFunctionEndTrace(JoinPoint jp, String ch, Object o){" + BR + ""
                + "		String returnType = \"void\";" + BR + ""
                + "		" + BR + ""
                + "		if (o!=null)" + BR + ""
                + "			returnType = o.getClass().getName();" + BR + ""
                + "		" + BR + ""
                + "	    String s =  returnType" + BR + ""
                + "	    	+ ((CodeSignature)jp.getSignature()).getDeclaringTypeName() " + BR + ""
                + "			+ \".\" " + BR + ""
                + "			+ ((CodeSignature)jp.getSignature()).toShortString().replace(\"(..)\", \"\")" + BR + ""
                + "			+  \"(\";" + BR + ""
                + "		Class[] parameters = ((CodeSignature)jp.getSignature()).getParameterTypes(); " + BR + ""
                + "		" + BR + ""
                + "		for (int k = 0; k < parameters.length; k++) {" + BR + ""
                + "			s= s+ parameters[k].getCanonicalName();" + BR + ""
                + "			if (k+1<parameters.length)" + BR + ""
                + "				s= s+ \", \";" + BR + ""
                + "		}" + BR + ""
                + "" + BR + ""
                + "        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");" + BR + ""
                + "        Date date = new Date();		" + BR + ""
                + "		s= s+ \")\" + \" -> \"+ ((CodeSignature)jp.getSignature()).getDeclaringTypeName()" + BR + ""
                + "			+  \" -> \" " + BR + ""
                + "			+ dateFormat.format(date);" + BR + ""
                + "" + BR + ""
                + "		s = s + \" -> \" + o;" + BR + ""
                + "		" + BR + ""
                + "	//	System.out.println(ch + i + \" -> \" +s);" + BR + ""
                + "		" + BR + ""
                + "		BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i + \" -> \" +s +BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	    " + BR + ""
                + "			" + BR + ""
                + "	}" + BR + ""
                + "	" + BR + ""
                + "	private void listCallTrace(JoinPoint.StaticPart jp, String ch){" + BR + ""
                + "//   	System.out.println(ch + i +\"    \" +jp.toLongString());" + BR + ""
                + "   		" + BR + ""
                + "    	BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "			stream.write(ch + i +\" -> \" +((CodeSignature)jp.getSignature()).getName()+\" -> \"  + jp.getSourceLocation().getLine() + BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		}	" + BR + ""
                + "	}" + BR + ""
                + "	" + BR + ""
                + "	private void afterListCallTrace(JoinPoint.StaticPart jp, String ch){" + BR + ""
                + "" + BR + ""
                + "		BufferedWriter stream = setupStream();" + BR + ""
                + "		try {" + BR + ""
                + "    		Field myPrivateField = field;" + BR + ""
                + "    		myPrivateField.setAccessible(true);" + BR + ""
                + "    		Object result = myPrivateField.get(object);" + BR + ""
                + "			stream.write(ch + i +\" -> \" +((CodeSignature)jp.getSignature()).getName()+\" -> \"  + jp.getSourceLocation().getLine() + \" -> \"  + result.toString() + BR);" + BR + ""
                + "		    stream.flush();" + BR + ""
                + "		} catch (IOException e) {" + BR + ""
                + "		} catch (IllegalArgumentException e) {" + BR + ""
                + "		} catch (IllegalAccessException e) {" + BR + ""
                + "		}	" + BR + ""
                + "" + BR + ""
                + "	}" + BR + ""
                + "}";
        
        aspectJTextArea.setText(aspectJFile);
        revertAspectJTextArea = aspectJFile;
        saveChangesButton.setEnabled(true);
        revertChangesButton.setEnabled(true);
        performValidation.setEnabled(true);
        }
}//GEN-LAST:event_createAspectJFileActionPerformed

private void revertChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertChangesButtonActionPerformed
    if(!revertAspectJTextArea.equals("")){
        aspectJTextArea.setText(revertAspectJTextArea);
        aspectJFile = revertAspectJTextArea;
    }
}//GEN-LAST:event_revertChangesButtonActionPerformed

private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
    revertAspectJTextArea = aspectJTextArea.getText();
    aspectJFile = aspectJTextArea.getText();
}//GEN-LAST:event_saveChangesButtonActionPerformed

private void performValidationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performValidationActionPerformed
    
    createAspectJFile();
    createTestGenPropertiesFile();
    
        String oldClassPath = System.getProperty("java.class.path");
        Utils.setClassPath("");

        Utils.addToClassPath(compiledDir);
        Utils.addToClassPath(librariesPath + "jgraph.jar");
        Utils.addToClassPath(librariesPath + "slickerbox0.5.jar");

        List<String> externalJars = new ArrayList<String>();
        externalJars.add(compiledDir);
        externalJars.add(librariesPath + "jgraph.jar");
        externalJars.add(librariesPath + "slickerbox0.5.jar");

        for (String library : component.getComponentLibraries()) {
            Utils.addToClassPath(library);
            externalJars.add(library);
        } 

        try {
            Utils.addtoURLClassLoader(externalJars);
        } catch (Exception ex) {
        }

        ArrayList<String> mclasses = new ArrayList<String>();
        for (String classFile : Utils.getJavaFileList(new File(component.getComponentSourceFolder())) ) {
            mclasses.add(classFile);
        }

        Utils.addToClassPath(librariesPath + "aspectjrt.jar");
        Utils.addToClassPath(librariesPath + "aspectjtools.jar");
        Utils.addToClassPath(librariesPath + "daikon.jar");
        if(isJunitCheck.isSelected()){
            Utils.addToClassPath(librariesPath + "junit-4.4.jar");
        }
        try {
            Utils.compileScenarioAjc(executionScenarioText.getText(), aspectJFileLocation, componentClassesList, compiledDir);
            
            BufferedReader executeScenario = Utils.executeScenario(executionFileQualifiedName, isJunitCheck.isSelected());
            if(executeScenario == null){
                JOptionPane.showMessageDialog(null, "Can't run Execution Scenario","Execution Scenario Error",JOptionPane.ERROR_MESSAGE);
                deleteTmpDirs();
                return;
            }
            
            BufferedReader daikonExecScenario = Utils.daikonExecScenario(executionScenarioText.getText(), componentClassesList, isJunitCheck.isSelected(), compiledDir, extractedDir);
            if(daikonExecScenario == null){
                JOptionPane.showMessageDialog(null, "Error Occured in Daikon Execution","Error",JOptionPane.ERROR_MESSAGE);
                deleteTmpDirs();
                return;
            }
        } catch (Exception ex) {
        }

        tm = Utils.TraceParser(extractedDir);

        processTabbedPanel.setEnabledAt(3, true);

        FileReader readTextFile;
        try {
            String filePath = Utils.getAbsPathFromFile(extractedDir + "PromTrace.xml");
            proMLabel.setText("Path: " + filePath);

            readTextFile = new FileReader(extractedDir + "PromTrace.xml");
            //Create a scanner object from FileReader
            Scanner fileReaderScan = new Scanner(readTextFile);

            proMTextArea.setText("");

            //Put all text from text file into created String
            while (fileReaderScan.hasNextLine()) {
                String temp = fileReaderScan.nextLine() + BR;

                proMTextArea.append(temp);
            }
        } catch (FileNotFoundException ex) {
        }

        for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
            if (processTabbedPanel.getTitleAt(i).equals("State Mapping")) {
                processTabbedPanel.remove(i);
            }
        }

        for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
            if (processTabbedPanel.getTitleAt(i).equals("Mappings")) {
                processTabbedPanel.remove(i);
            }
        }
        JTabbedPane mappingsTabbedPane = Utils.HashMapToJtable(tm.getStatesHashMap(), tm.getVariablesHashMap());
        JPanel mappingsPanel = new JPanel();
        mappingsPanel.setLayout(new BorderLayout());
        mappingsPanel.add(mappingsTabbedPane, BorderLayout.CENTER);
        processTabbedPanel.insertTab("Mappings", null, mappingsPanel, "Mappings Panel", processTabbedPanel.getTabCount()-1);

        Utils.setClassPath(oldClassPath);
        initializeValidationHtmlReport();
        copyPromModelToGenComponent();
        loadModelJUnitFile(getcomponentLibrariesList(), componentClassesList);
        deleteTmpDirs();
        JOptionPane.showMessageDialog(null, "Validation Process Finished Successfully!","Validation",JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_performValidationActionPerformed

private void previousButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButton3ActionPerformed
    int index = validationTabbedPane.getSelectedIndex();
    validationTabbedPane.setSelectedIndex(index - 1);
}//GEN-LAST:event_previousButton3ActionPerformed

private void removeOutputInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOutputInterfaceButtonActionPerformed
    moveElements(outputInterfacesList, requiredInterfacesList);
    requiredInterfacesList.repaint();
    outputInterfacesList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_removeOutputInterfaceButtonActionPerformed

private void outputInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputInterfaceButtonActionPerformed
    moveElements(requiredInterfacesList, outputInterfacesList);
    requiredInterfacesList.repaint();
    outputInterfacesList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_outputInterfaceButtonActionPerformed

private void removeInputInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeInputInterfaceButtonActionPerformed
    moveElements(inputInterfacesList, providedInterfacesList1);
    providedInterfacesList1.repaint();
    inputInterfacesList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_removeInputInterfaceButtonActionPerformed

private void inputInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputInterfaceButtonActionPerformed
    moveElements(providedInterfacesList1, inputInterfacesList);
    providedInterfacesList1.repaint();
    inputInterfacesList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_inputInterfaceButtonActionPerformed

private void previousButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButton2ActionPerformed
    int index = validationTabbedPane.getSelectedIndex();
    validationTabbedPane.setSelectedIndex(index - 1);
}//GEN-LAST:event_previousButton2ActionPerformed

private void nextButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButton3ActionPerformed
    int index = validationTabbedPane.getSelectedIndex();
    validationTabbedPane.setSelectedIndex(index + 1);
}//GEN-LAST:event_nextButton3ActionPerformed

private void addOtherExcludeScopeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOtherExcludeScopeButtonActionPerformed
    DefaultListModel model = (DefaultListModel) scopeList.getModel();
    if(otherExcludedScopeText.getText().length() != 0){
        model.addElement(otherExcludedScopeText.getText());
    }
    otherExcludedScopeText.setText("");
}//GEN-LAST:event_addOtherExcludeScopeButtonActionPerformed

private void removeScopeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeScopeButton1ActionPerformed
    DefaultListModel model = (DefaultListModel) scopeList.getModel();
    if(includedScopeText.getText().length() != 0){
        model.addElement(includedScopeText.getText());
    }
    includedScopeText.setText("");
    resetAspectJTab();
}//GEN-LAST:event_removeScopeButton1ActionPerformed

private void includedScopeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includedScopeButton1ActionPerformed
    if(scopeList.getSelectedValue() != null){
        DefaultListModel model = (DefaultListModel) scopeList.getModel();
        if(includedScopeText.getText().length() != 0){
            model.addElement(includedScopeText.getText());
        }
        includedScopeText.setText(scopeList.getSelectedValue().toString());
        model.removeElement(includedScopeText.getText());
        resetAspectJTab();
    }
}//GEN-LAST:event_includedScopeButton1ActionPerformed

private void removeScopeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeScopeButtonActionPerformed
    moveElements(excludedScopeList, scopeList);
    scopeList.repaint();
    excludedScopeList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_removeScopeButtonActionPerformed

private void excludeScopeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeScopeButtonActionPerformed
    moveElements(scopeList, excludedScopeList);
    scopeList.repaint();
    excludedScopeList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_excludeScopeButtonActionPerformed

private void previousButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButton1ActionPerformed
    int index = validationTabbedPane.getSelectedIndex();
    validationTabbedPane.setSelectedIndex(index - 1);
}//GEN-LAST:event_previousButton1ActionPerformed

private void nextButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButton2ActionPerformed
    int index = validationTabbedPane.getSelectedIndex();
    validationTabbedPane.setSelectedIndex(index + 1);
}//GEN-LAST:event_nextButton2ActionPerformed

private void nextButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButton1ActionPerformed
    int index = validationTabbedPane.getSelectedIndex();
    validationTabbedPane.setSelectedIndex(index + 1);
}//GEN-LAST:event_nextButton1ActionPerformed

private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
    int index = validationTabbedPane.getSelectedIndex();
    validationTabbedPane.setSelectedIndex(index - 1);
}//GEN-LAST:event_previousButtonActionPerformed

private void addOtherInterfaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOtherInterfaceActionPerformed
    String newInterface = browseforJavaFile("Add another Interface");
    File interfaceFile = new File(newInterface);
    if(interfaceFile.exists()){
        DefaultListModel model = (DefaultListModel) providedInterfacesList.getModel();
        model.addElement(Utils.getThePackage(newInterface, true));
        providedInterfacesList.repaint();
    } 
}//GEN-LAST:event_addOtherInterfaceActionPerformed

private void removeInterfaceButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeInterfaceButton1ActionPerformed
    moveElements(includeInterfaceList, providedInterfacesList);
    providedInterfacesList.repaint();
    includeInterfaceList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_removeInterfaceButton1ActionPerformed

private void includeInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeInterfaceButtonActionPerformed
    moveElements(providedInterfacesList, includeInterfaceList);
    providedInterfacesList.repaint();
    includeInterfaceList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_includeInterfaceButtonActionPerformed

private void removeInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeInterfaceButtonActionPerformed
    moveElements(excludeInterfaceList, providedInterfacesList);
    providedInterfacesList.repaint();
    excludeInterfaceList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_removeInterfaceButtonActionPerformed

private void excludeInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeInterfaceButtonActionPerformed
    moveElements(providedInterfacesList, excludeInterfaceList);
    providedInterfacesList.repaint();
    excludeInterfaceList.repaint();
    resetAspectJTab();
}//GEN-LAST:event_excludeInterfaceButtonActionPerformed

private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
    int index = validationTabbedPane.getSelectedIndex();
    validationTabbedPane.setSelectedIndex(index + 1);
}//GEN-LAST:event_nextButtonActionPerformed

private void computeLcsajCoverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeLcsajCoverageActionPerformed
    createTmpDirs();
    coverageTabpanel.removeAll();
    JavaBinaryParser binaryParser = new JavaBinaryParser(component, tmpCompileDir);
    binaryParser.findInterfaceMethodsForCoverage();
    interfaceMethodsToCover = binaryParser.getInterfaceMethodsToCover();
    cover = new Coverage(component.getComponentSourceFolder(), tmpFolderPath + "componentTmpSrcCopy", extractedDir + "coverageTrace.txt", librariesPath, executionScenarioText.getText());
    cover.createGraphComputeJJPaths();
        
    initComponentClassesDependClasses(tmpFolderPath + "componentTmpSrcCopy");
    if (isJavaFile(executionScenarioText.getText()) && component != null){    
        aspectJFileName = "CoverageAspectJFile";
        String aspectFile = "";

        aspectFile = "package eu.opensme.cope.test." + aspectJFileName + ";" + BR + BR;
        aspectFile += "import java.io.*;" + BR
                + "import org.aspectj.lang.*;" + BR
                + "import org.aspectj.lang.reflect.*;" + BR + BR
                + "public aspect " + aspectJFileName + BR
                + "{" + BR + ""
                + "	private BufferedWriter covStream;" + BR + BR
                + "	pointcut traceMethods() : " + BR + ""
                + "		!within(" + aspectJFileName + "+) &&" + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + "";
        for(String qualifiedNameClass : excludeDependClasses){
            aspectFile += "		!within(" + qualifiedNameClass + "+) &&" + BR + "";
        }
        aspectFile += "		(" + BR;
        int i = 1;
        for(String packageName : component.getPackagesList()){
            if(i == component.getPackagesList().size()){
                aspectFile += "		 within(" + packageName + "..*+)" + BR;
            } else {
                aspectFile += "		 within(" + packageName + "..*+) ||" + BR;
            }
            i++;
        }
        aspectFile += "		 ) &&" + BR
                + "		 execution(* *(..));" + BR + BR
                + "	pointcut traceConstructors() : " + BR + ""
                + "		!within(" + aspectJFileName + "+) &&" + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + "";
        for(String qualifiedNameClass : excludeDependClasses){
            aspectFile += "		!within(" + qualifiedNameClass + "+) &&" + BR + "";
        }
        aspectFile += "		(" + BR;
        i = 1;
        for(String packageName : component.getPackagesList()){
            if(i == component.getPackagesList().size()){
                aspectFile += "		 within(" + packageName + "..*+)" + BR;
            } else {
                aspectFile += "		 within(" + packageName + "..*+) ||" + BR;
            }
            i++;
        }
        aspectFile += "		 ) &&" + BR
                + "		 execution(*.new(..));" + BR + BR
                + "	pointcut traceAll() : " + BR + ""
                + "		!within(" + aspectJFileName + "+) &&" + BR + ""
                + "		!within(" + executionFileQualifiedName + "+) &&" + BR + "";
        for(String qualifiedNameClass : excludeDependClasses){
            aspectFile += "		!within(" + qualifiedNameClass + "+) &&" + BR + "";
        }
        aspectFile += "		(" + BR;
        i = 1;
        for(String packageName : component.getPackagesList()){
            if(i == component.getPackagesList().size()){
                aspectFile += "		 within(" + packageName + "..*+)" + BR;
            } else {
                aspectFile += "		 within(" + packageName + "..*+) ||" + BR;
            }
            i++;
        }
        aspectFile += "		 ) &&" + BR
                + "		 (" + BR
                + "		     call(* *(..)) ||" + BR
//                + "		     call(new(..)) ||" + BR
                + "		     handler(*) ||" + BR
//                + "		     set(* *) ||" + BR
                + "		     get(* *)" + BR
                + "		 ) &&" + BR
                + "		 (cflow(traceMethods()) ||" + BR
                + "		 cflow(traceConstructors()));" + BR + BR
                + "	before(): traceMethods(){" + BR
                + "		 constructorFunctionTrace(thisJoinPoint, \"entering\");" + BR
                + "	}" + BR + BR
                + "	before(): traceConstructors(){" + BR
                + "		 constructorFunctionTrace(thisJoinPoint, \"entering\");" + BR
                + "	}" + BR + BR
                + "	before(): traceAll(){" + BR
                + "		 logTrace(thisJoinPoint.getSourceLocation().getLine() +\"*\"+thisJoinPoint.getKind().toString()+\"*\"+thisJoinPoint.getSignature().getDeclaringTypeName());" + BR
                + "	}" + BR + BR
                + "	after() returning: traceMethods(){" + BR
                + "		 constructorFunctionTrace(thisJoinPoint, \"exiting\");" + BR
                + "	}" + BR + BR
                + "	after() returning: traceConstructors(){" + BR
                + "		 constructorFunctionTrace(thisJoinPoint, \"exiting\");" + BR
                + "	}" + BR + BR
                + "     after() throwing: traceMethods(){" + BR
                + "		 constructorFunctionTrace(thisJoinPoint, \"exiting\");" + BR
                + "	}" + BR + BR
                + "     after() throwing: traceConstructors(){" + BR
                + "		 constructorFunctionTrace(thisJoinPoint, \"exiting\");" + BR
                + "	}" + BR + BR
                + "	private void constructorFunctionTrace(JoinPoint jp, String log){" + BR
                + "		 String name = \"\";" + BR
                + "		 boolean isInner = false;" + BR
		+ "		 if(((CodeSignature)jp.getSignature()).getName().equals(\"<init>\")){" + BR
		+ "		 	name = ((CodeSignature)jp.getSignature()).toShortString();" + BR
		+ "		 	name = name.substring(0, name.indexOf(\"(\")); " + BR
                + "		 if(name.contains(\".\")){ "+ BR
		+ "                     name = name.substring(name.lastIndexOf(\".\")+1,name.length());" + BR
                + "                     isInner = true;" + BR
		+ "	     	 }" + BR
		+ "		 } else {" + BR
		+ "		 	name = ((CodeSignature)jp.getSignature()).getName();" + BR
		+ "		 }" + BR
                + "		 String s = \"\";" + BR
                + "		  s += ((CodeSignature)jp.getSignature()).getDeclaringTypeName()" + BR
                + "		 	+ \".\"" + BR
                + "		 	+ name" + BR
                + "		 	+  \"(\";" + BR
                + "		 Class[] parameters = ((CodeSignature)jp.getSignature()).getParameterTypes();" + BR + BR
                + "		 int l = 0;" + BR
		+ "		 if(isInner){" + BR
		+ "		 	 l = 1;" + BR
		+ "		  }" + BR
                + "		 for (int k = l; k < parameters.length; k++) {" + BR
                + "		 	s= s + parameters[k].getSimpleName();" + BR
                + "		 	if (k+1<parameters.length)" + BR
                + "		 	     s = s + \", \";" + BR
                + "		 }" + BR
                + "		 s = s+\")\";" + BR
                + "		 if(jp.getSignature() instanceof MethodSignature){" + BR
		+ "                     s += \": \" + ((MethodSignature)jp.getSignature()).getReturnType().getSimpleName();" + BR
		+ "		 }" + BR
                + "		 logTrace(jp.getSourceLocation().getLine()+\"*\"+log+\"*\"+s);" + BR
                + "	}" + BR + BR
                + "	private void logTrace(String log){" + BR
                + "		 BufferedWriter stream = setupStream();" + BR
                + "		 try {" + BR
                + "		 	stream.write(log+\"\\n\");" + BR
                + "		 	stream.flush();" + BR
                + "		 } catch (IOException e) {" + BR
                + "		 }" + BR
                + "	}" + BR + BR
                + "	private BufferedWriter setupStream() {" + BR
                + "		 if (covStream != null) return covStream; " + BR
                + "		 FileWriter fstream = null;" + BR
                + "		 try {" + BR
                + "		 File extractFolder = new File(\"" + extractedDir + "\");" + BR
		+ "		 	 if(!extractFolder.exists()){" + BR
		+ "		 		 extractFolder.mkdir();" + BR
		+ "		 	 }" + BR
                + "		 	fstream = new FileWriter(\"" + extractedDir + "coverageTrace.txt\");" + BR
                + "		 } catch (IOException e) {" + BR
                + "		 }" + BR
                + "		 covStream = new BufferedWriter(fstream);" + BR
                + "		 return covStream;" + BR
                + "	}" + BR + BR
                + "}";
             
            coverageAspectJFileLocation = compiledDir + aspectJFileName + ".aj";
        try {
            FileWriter outFile = new FileWriter(coverageAspectJFileLocation);
            outFile.write(aspectFile);
            outFile.flush();
            outFile.close();
        } catch (IOException ex) {
            Logger.getLogger(ComponentValidatorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String oldClassPath = System.getProperty("java.class.path");
        
        Utils.setClassPath("");
        
        Utils.addToClassPath(compiledDir);

        List<String> externalJars = new ArrayList<String>();
        externalJars.add(compiledDir);
        for (String library : component.getComponentLibraries()) {
            Utils.addToClassPath(library);
            externalJars.add(library);
        }

        try {
            Utils.addtoURLClassLoader(externalJars);
        } catch (Exception ex) {
        }

        Utils.addToClassPath(tmpFolderPath + "componentTmpSrcCopy");

        Utils.addToClassPath(librariesPath + "aspectjrt.jar");
        Utils.addToClassPath(librariesPath + "aspectjtools.jar");
        if(isJunitCheck.isSelected()){
            Utils.addToClassPath(librariesPath + "junit-4.4.jar");
        }
        try {
            Utils.compileScenarioAjc(executionScenarioText.getText(), coverageAspectJFileLocation, componentClassesList, compiledDir);
        } catch (Exception ex) {
            Logger.getLogger(ComponentValidatorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {                
            BufferedReader executeScenario = Utils.executeScenario(executionFileQualifiedName, isJunitCheck.isSelected());
            if(executeScenario == null){
                JOptionPane.showMessageDialog(null, "Can't run Execution Scenario","Execution Scenario Error",JOptionPane.ERROR_MESSAGE);
                deleteTmpDirs();
                return;
            }
        } catch (Exception ex) {
            Logger.getLogger(ComponentValidatorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Utils.setClassPath(oldClassPath);

        cover.parseScenarioLogFile(extractedDir + "coverageTrace.txt");
        cover.computeCoverageForEveryMethod();
        double[] coverageMetrics = cover.getComponentCoverage();
        coverageTabpanel.insertTab(component.getComponentName(), null, new CoveragePanel(coverageMetrics, cover), "Component Coverage Panel",0);
        
        providedInterfacesCoverage = new HashMap<String,double[]>();
        Iterator<String> iterator = interfaceMethodsToCover.keySet().iterator();
        while(iterator.hasNext()){
            String providedInterface = iterator.next();
            double[] interfaceCoverageMetrics = cover.getInterfaceCoverage(interfaceMethodsToCover.get(providedInterface));
            if(interfaceCoverageMetrics.length == 0){
                interfaceCoverageMetrics = new double[2];
                interfaceCoverageMetrics[0] = 0;
                interfaceCoverageMetrics[1] = 0;
            }
            providedInterfacesCoverage.put(providedInterface, interfaceCoverageMetrics);
            coverageTabpanel.insertTab(providedInterface, null, new CoveragePanel(interfaceCoverageMetrics, cover, interfaceMethodsToCover.get(providedInterface)), "Interface Coverage Panel", coverageTabpanel.getTabCount());
        }
        
//        componentStmtCoverage.setText(coverageMetrics[0] + "%");
//        componentLcsajCoverage.setText(coverageMetrics[1] + "%");
//        
//        DefaultTableModel model = (DefaultTableModel) LcsajCoverageTable.getModel();
//        while(model.getRowCount() != 0){
//            model.removeRow(0);
//        }
//        for (Object[] object : cover.getCoverageTable()){
//              model.addRow(object);
//        }
//        LcsajCoverageTable.setModel(model);
//        LcsajCoverageTable.repaint();
//        
//        cover.deleteTmpComponentSourceFolder();
//        detailsButton.setEnabled(true);
        initializeCoverageHtmlReport();
        deleteTmpDirs();
        JOptionPane.showMessageDialog(null, "Coverage Process Finished Successfully!","Coverage",JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(null, "Please choose a proper Execution Scenario file \nfrom \"Component Selection\" tab","Select Execution Scenario",JOptionPane.WARNING_MESSAGE);
    }
}//GEN-LAST:event_computeLcsajCoverageActionPerformed

private void chooseExecutionScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseExecutionScenarioActionPerformed
    executionScenarioText.setText(browseforJavaFile("Select Execution Scenario File")); 
    File exec = new File(executionScenarioText.getText());
    if(exec.exists()){
        executionFileQualifiedName = Utils.getThePackage(executionScenarioText.getText(),true);
    }
    if(!selectedComponentTextField.getText().equals("")){
            processTabbedPanel.setEnabledAt(1, true);
            processTabbedPanel.setEnabledAt(2, true);
    }
}//GEN-LAST:event_chooseExecutionScenarioActionPerformed

private void selectComponentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectComponentButtonActionPerformed
    if(availableComponentsList.getSelectedValue() != null){
        initializeWorkSpace();
        if(selectedComponentTextField.getText().length() != 0){
             DefaultListModel availableComponentsModel = (DefaultListModel) availableComponentsList.getModel();
             availableComponentsModel.addElement(selectedComponentTextField.getText());
        }
        selectedComponentTextField.setText(availableComponentsList.getSelectedValue().toString());
        component = reuseProject.getComponent(availableComponentsList.getSelectedValue().toString());
        DefaultListModel availableComponentsModel = (DefaultListModel) availableComponentsList.getModel();
        availableComponentsModel.remove(availableComponentsList.getSelectedIndex());
        component.removePackages();
        for (String classFile : Utils.getJavaFileList(new File(component.getComponentSourceFolder())) ) {
            String packageName = Utils.getThePackage(classFile,false); 
            component.addPackage(packageName);
        }
        initValidationPanel();
        if(!executionScenarioText.getText().equals("")){
            processTabbedPanel.setEnabledAt(1, true);
            processTabbedPanel.setEnabledAt(2, true);
        }
        //createAspectJBinFile();
    }
}//GEN-LAST:event_selectComponentButtonActionPerformed

private void generateHtmlReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateHtmlReportButtonActionPerformed
    List<CfgMethod> methodsList = new ArrayList<CfgMethod>();
    List<CfgMethod> selMethodsList = new ArrayList<CfgMethod>();
    HashMap<String, String> stateMappings = new HashMap<String,String>();
    HashMap<String, String> variableMappings = new HashMap<String,String>();
    if(includeCoverageCheck.isSelected()){
        methodsList = cover.getMethodsList();
        if(execCoveredLinesCheck.isSelected() || coveredPathsCheck.isSelected() || uncoveredPathsCheck.isSelected() || cfgCheck.isSelected()){
            if(selectedMethodsList.getModel().getSize() == 0){
                    JOptionPane.showMessageDialog(null, "Please select the methods you want \nto include Details for","Select Methods",JOptionPane.WARNING_MESSAGE);
                    return;
            } else {
                for(int i = 0; i < selectedMethodsList.getModel().getSize(); i++){
                    selMethodsList.add( (CfgMethod) selectedMethodsList.getModel().getElementAt(i));
                }
            }
        }
    }
    if(includeValidationCheck.isSelected()){
        stateMappings = tm.getStatesHashMap();
        variableMappings = tm.getVariablesHashMap();
    }
    HtmlReport report;
    List<String> dependsOnList = new ArrayList<String>();
    DefaultListModel model = (DefaultListModel) dependanceList.getModel();
    for(int i = 0; i < model.size(); i++){
        dependsOnList.add(model.getElementAt(i).toString());
    }
    if(cover == null){
        report = new HtmlReport(executionScenarioText.getText(), execDescription.getText().replace("\n", "<br/>"), 0, 0, reuseProject.getProjectName(), component, methodsList, selMethodsList, extractedDir+"PromTrace.xml", stateMappings, variableMappings, extractedDir+"test.java", fsmGraph, dependsOnList, includeCoverageCheck.isSelected(), includeValidationCheck.isSelected(), execCoveredLinesCheck.isSelected(), coveredPathsCheck.isSelected(), uncoveredPathsCheck.isSelected(), cfgCheck.isSelected(), promXmlCheck.isSelected(), stateMappingsCheck.isSelected(), varMappingsCheck.isSelected(), fsmVisualizationCheck.isSelected(), modelJUnitCheck.isSelected(), Collections.EMPTY_MAP, Collections.EMPTY_MAP);
    } else {
        report = new HtmlReport(executionScenarioText.getText(), execDescription.getText().replace("\n", "<br/>"), cover.getComponentCoverage()[0], cover.getComponentCoverage()[1], reuseProject.getProjectName(), component, methodsList, selMethodsList, extractedDir+"PromTrace.xml", stateMappings, variableMappings, extractedDir+"test.java", fsmGraph, dependsOnList, includeCoverageCheck.isSelected(), includeValidationCheck.isSelected(), execCoveredLinesCheck.isSelected(), coveredPathsCheck.isSelected(), uncoveredPathsCheck.isSelected(), cfgCheck.isSelected(), promXmlCheck.isSelected(), stateMappingsCheck.isSelected(), varMappingsCheck.isSelected(), fsmVisualizationCheck.isSelected(), modelJUnitCheck.isSelected(), interfaceMethodsToCover, providedInterfacesCoverage);
    }
    report.generateReport();
    JOptionPane.showMessageDialog(null, "HTML Report successfully generated \nin Doc folder","Successfully Generated Report",JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_generateHtmlReportButtonActionPerformed

    private void selectAllCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllCheckActionPerformed
        deselectAllCheck.setSelected(false);
        DefaultListModel fromListModel = (DefaultListModel) allMethodsList.getModel();
        DefaultListModel toListModel = (DefaultListModel) selectedMethodsList.getModel();
        for(int i = 0; i < fromListModel.getSize(); i++){
            toListModel.addElement(fromListModel.getElementAt(i));
        }
        fromListModel.removeAllElements();
    }//GEN-LAST:event_selectAllCheckActionPerformed

    private void deselectAllCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectAllCheckActionPerformed
        selectAllCheck.setSelected(false);
        DefaultListModel fromListModel = (DefaultListModel) selectedMethodsList.getModel();
        DefaultListModel toListModel = (DefaultListModel) allMethodsList.getModel();
        for(int i = 0; i < fromListModel.getSize(); i++){
            toListModel.addElement(fromListModel.getElementAt(i));
        }
        fromListModel.removeAllElements();
    }//GEN-LAST:event_deselectAllCheckActionPerformed

    private void selectMethodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectMethodButtonActionPerformed
        moveElements(allMethodsList, selectedMethodsList);
        selectAllCheck.setSelected(false);
        deselectAllCheck.setSelected(false);
        allMethodsList.repaint();
        selectedMethodsList.repaint();
    }//GEN-LAST:event_selectMethodButtonActionPerformed

    private void deselectMethodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectMethodButtonActionPerformed
        moveElements(selectedMethodsList, allMethodsList);
        selectAllCheck.setSelected(false);
        deselectAllCheck.setSelected(false);
        allMethodsList.repaint();
        selectedMethodsList.repaint();
    }//GEN-LAST:event_deselectMethodButtonActionPerformed

    private void includeCoverageCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeCoverageCheckActionPerformed
        execCoveredLinesCheck.setEnabled(includeCoverageCheck.isSelected());
        coveredPathsCheck.setEnabled(includeCoverageCheck.isSelected());
        uncoveredPathsCheck.setEnabled(includeCoverageCheck.isSelected());
        cfgCheck.setEnabled(includeCoverageCheck.isSelected());
        if(!includeCoverageCheck.isSelected()){
            initializeMethodsList(false);
        } else if(execCoveredLinesCheck.isSelected() || coveredPathsCheck.isSelected() || uncoveredPathsCheck.isSelected() || cfgCheck.isSelected()){
            initializeMethodsList(true);
        }
    }//GEN-LAST:event_includeCoverageCheckActionPerformed

    private void includeValidationCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeValidationCheckActionPerformed
        promXmlCheck.setEnabled(includeValidationCheck.isSelected());
        stateMappingsCheck.setEnabled(includeValidationCheck.isSelected());
        varMappingsCheck.setEnabled(includeValidationCheck.isSelected());
        fsmVisualizationCheck.setEnabled(includeValidationCheck.isSelected());
        modelJUnitCheck.setEnabled(includeValidationCheck.isSelected());
    }//GEN-LAST:event_includeValidationCheckActionPerformed

private void execCoveredLinesCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execCoveredLinesCheckActionPerformed
    if(execCoveredLinesCheck.isSelected()){
        initializeMethodsList(true);
    } else if(!coveredPathsCheck.isSelected() && !uncoveredPathsCheck.isSelected() && !cfgCheck.isSelected()){
            initializeMethodsList(false);
    }
}//GEN-LAST:event_execCoveredLinesCheckActionPerformed

private void coveredPathsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coveredPathsCheckActionPerformed
    if(coveredPathsCheck.isSelected()){
        initializeMethodsList(true);
    } else if(!execCoveredLinesCheck.isSelected() && !uncoveredPathsCheck.isSelected() && !cfgCheck.isSelected()){
            initializeMethodsList(false);
    }
}//GEN-LAST:event_coveredPathsCheckActionPerformed

private void uncoveredPathsCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uncoveredPathsCheckActionPerformed
    if(uncoveredPathsCheck.isSelected()){
        initializeMethodsList(true);
    } else if(!execCoveredLinesCheck.isSelected() && !coveredPathsCheck.isSelected() && !cfgCheck.isSelected()){
            initializeMethodsList(false);
    }
}//GEN-LAST:event_uncoveredPathsCheckActionPerformed

private void cfgCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cfgCheckActionPerformed
    if(cfgCheck.isSelected()){
        initializeMethodsList(true);
    } else if(!execCoveredLinesCheck.isSelected() && !coveredPathsCheck.isSelected() && !uncoveredPathsCheck.isSelected()){
            initializeMethodsList(false);
    }
}//GEN-LAST:event_cfgCheckActionPerformed

    private void addDependComponentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDependComponentButtonActionPerformed
        moveElements(availableComponentsList,dependanceList);
        dependanceList.repaint();
        availableComponentsList.repaint();
    }//GEN-LAST:event_addDependComponentButtonActionPerformed

    private void removeDependComponentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDependComponentButtonActionPerformed
        moveElements(dependanceList, availableComponentsList);
        dependanceList.repaint();
        availableComponentsList.repaint();
    }//GEN-LAST:event_removeDependComponentButtonActionPerformed
      
    private void loadModelJUnitFile(List<String> componentLibrariesList, List<String> componentClassesList) {
        try {
            for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
                if (processTabbedPanel.getTitleAt(i).equals("ModelJUnit File")) {
                    processTabbedPanel.remove(i);
                }
            }
            ModelJUnitPanel panel = new ModelJUnitPanel(tmpFolderPath, compiledDir, librariesPath, jmodelFile);
            
            panel = panel.loadModelJUnitFile(jmodelFile);

            processTabbedPanel.insertTab("ModelJUnit File", null, panel, "ModelJUnit File Panel", processTabbedPanel.getTabCount()-1);
            
            panel.componentSourceFolder = component.getComponentSourceFolder(); 
            panel.componentClassesList = componentClassesList;
            panel.componentLibrariesList = componentLibrariesList;
        } catch (Exception ex) {
        }
    }
    
private void initValidationPanel(){
    //Class Under Test Panel
    DefaultComboBoxModel model = (DefaultComboBoxModel) classUnderTestComboBox.getModel();
    for (String classFile : Utils.getJavaFileList(new File(component.getComponentSourceFolder()))) {
        model.addElement(classFile);
    }

    //Interfaces Panel
    DefaultListModel interfaceModel = (DefaultListModel) providedInterfacesList.getModel();
    ((DefaultListModel) includeInterfaceList.getModel()).removeAllElements();
    ((DefaultListModel) excludeInterfaceList.getModel()).removeAllElements();
    interfaceModel.removeAllElements();
    for (String includeInterface : component.getProvidedInterfacesMap().keySet()) {
        interfaceModel.addElement(includeInterface);
    }
    providedInterfacesList.setModel(interfaceModel);
    providedInterfacesList.repaint();

    //Scope Panel
    DefaultListModel scopeModel = (DefaultListModel) scopeList.getModel();
    includedScopeText.setText("");
    ((DefaultListModel) excludedScopeList.getModel()).removeAllElements();
    scopeModel.removeAllElements();
    for (String includeScope : component.getPackagesList()) {
        scopeModel.addElement(includeScope);
    }
    scopeList.repaint();

    //TestGen Panel
    DefaultListModel providedInterfaceModel = (DefaultListModel) inputInterfacesList.getModel();
    DefaultListModel requiredInterfaceModel = (DefaultListModel) requiredInterfacesList.getModel();
    ((DefaultListModel) providedInterfacesList1.getModel()).removeAllElements();
    ((DefaultListModel) outputInterfacesList.getModel()).removeAllElements();
    providedInterfaceModel.removeAllElements();
    requiredInterfaceModel.removeAllElements();
    for (String providedInterface : component.getProvidedInterfacesMap().keySet()) {
        providedInterfaceModel.addElement(providedInterface);
    }
    for (String requiredInterface : component.getRequiredInterfacesMap().keySet()) {
        requiredInterfaceModel.addElement(requiredInterface);
    }
    inputInterfacesList.setModel(providedInterfaceModel);
    inputInterfacesList.repaint();
    requiredInterfacesList.setModel(requiredInterfaceModel);
    requiredInterfacesList.repaint();
}

//private void createAspectJBinFile(){
//    File javaHome = new File(System.getProperty("java.home"));
//    String javaHomePath = javaHome.getParent();
//    String ajcFile = "#!/bin/sh" + BR;
//    ajcFile += "if [ \"$JAVA_HOME\" = \"\" ] ; then JAVA_HOME="+javaHomePath+BR
//            +"fi"+BR
//            +"if [ \"$ASPECTJ_HOME\" = \"\" ] ; then ASPECTJ_HOME=" + librariesPath + "aspectj"+BR
//            +"fi"+BR
//            +"\"$JAVA_HOME/bin/java\" -classpath \"$ASPECTJ_HOME/lib/aspectjtools.jar:$JAVA_HOME/lib/tools.jar:$CLASSPATH\" -Xmx64M org.aspectj.tools.ajc.Main \"$@\"";
//    try {
//        FileWriter outFile = new FileWriter(AspectJBinPath + "ajc");
//        outFile.write(ajcFile);
//        outFile.flush();
//        outFile.close();
//        Runtime.getRuntime().exec("chmod 777 "+AspectJBinPath + "ajc");
//    } catch (IOException ex) {
//        Logger.getLogger(ComponentValidatorView.class.getName()).log(Level.SEVERE, null, ex);
//    }
//}

public void resetAspectJTab(){
    if(aspectJTextArea.getText().length() != 0){
        aspectJTextArea.setText("");
        saveChangesButton.setEnabled(false);
        revertChangesButton.setEnabled(false);
        performValidation.setEnabled(false);
    }
}

private void createAspectJFile(){
    try {
        aspectJFileLocation = compiledDir + aspectJFileName +".aj";
        FileWriter outFile = new FileWriter(aspectJFileLocation);
        outFile.write(aspectJFile);
        outFile.close();
    } catch (IOException ex) {
        Logger.getLogger(ComponentValidatorView.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private void createTestGenPropertiesFile(){
    try {
        String testGenPropertiesFileLocation = extractedDir + "testgen.properties";
        FileWriter outFile = new FileWriter(testGenPropertiesFileLocation);
        for (int i = 0; i < inputInterfacesList.getModel().getSize(); i++){
            outFile.write("InputInterface"+ (i+1) + "=" + inputInterfacesList.getModel().getElementAt(i).toString() + "\n");
        }
        for (int i = 0; i < outputInterfacesList.getModel().getSize(); i++){
            outFile.write("OutputInterface"+ (i+1) + "=" + outputInterfacesList.getModel().getElementAt(i).toString() + "\n");
        }
        outFile.write("ClassUnderTest="+Utils.getThePackage(classUnderTestComboBox.getSelectedItem().toString(),true));
        outFile.flush();
        outFile.close();
    } catch (IOException ex) {
        Logger.getLogger(ComponentValidatorView.class.getName()).log(Level.SEVERE, null, ex);
    }
}

void setAspectJFile(String text) {
        aspectJFile = text;
}

private void moveElements(JList fromList, JList toList){
    DefaultListModel fromListModel = (DefaultListModel) fromList.getModel();
    DefaultListModel toListModel = (DefaultListModel) toList.getModel();
    Object[] includeObjects = fromList.getSelectedValues();
    for(int i = 0; i < includeObjects.length; i++){
        toListModel.addElement(includeObjects[i]);
        fromListModel.removeElement(includeObjects[i]);
    }
}

    private List<String> getcomponentLibrariesList() {
       return component.getComponentLibraries();
    }

    private List<String> getcomponentClassesList(String path) {
        return Utils.getJavaFileList(new File(path));
    }

    private void listAvailableComponents() {
        DefaultListModel model = new DefaultListModel();
        for(String componentName : reuseProject.getComponentNames()){
            model.addElement(componentName);
        }
        availableComponentsList.setModel(model);
    }

    private boolean isJavaFile(String javaFile) {
        if(javaFile != null){
            File execFile = new File(javaFile);
            if(execFile.exists()){
                if(javaFile.contains(".JAVA") || javaFile.contains(".java")){
                    return true;
                } else{
                    return false;
                }
                
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    private String browseforJavaFile(String title) {
        FileFilter filter = new FileNameExtensionFilter("JAVA file", "java", "JAVA");
        chooser.addChoosableFileFilter(filter);
        chooser.setDialogTitle(title);
        int returnValue = chooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            chooser.setCurrentDirectory(file.getParentFile());
            return file.getAbsolutePath();
        } else {
            return "";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel InterfacesJPanel;
    private javax.swing.JLabel addAnotherLabel;
    private javax.swing.JButton addDependComponentButton;
    private javax.swing.JButton addOtherExcludeScopeButton;
    private javax.swing.JButton addOtherInterface;
    private javax.swing.JList allMethodsList;
    private javax.swing.JPanel aspectJJPanel;
    private javax.swing.JPanel aspectJPanel;
    private javax.swing.JTextArea aspectJTextArea;
    private javax.swing.JList availableComponentsList;
    private javax.swing.JPanel availableComponentsPanel;
    private javax.swing.JCheckBox cfgCheck;
    private javax.swing.JButton chooseExecutionScenario;
    private javax.swing.JPanel classPanel;
    private javax.swing.JComboBox classUnderTestComboBox;
    private javax.swing.JPanel classUnderTestPanel;
    private javax.swing.JPanel componentSelectionPanel;
    private javax.swing.JButton computeLcsajCoverage;
    private javax.swing.JTabbedPane coverageTabpanel;
    private javax.swing.JCheckBox coveredPathsCheck;
    private javax.swing.JButton createAspectJFile;
    private javax.swing.JCheckBox deleteTmpDirCheck;
    private javax.swing.JLabel dependLabel;
    private javax.swing.JList dependanceList;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JCheckBox deselectAllCheck;
    private javax.swing.JButton deselectMethodButton;
    private javax.swing.JButton excludeInterfaceButton;
    private javax.swing.JList excludeInterfaceList;
    private javax.swing.JPanel excludeInterfacesPanel;
    private javax.swing.JButton excludeScopeButton;
    private javax.swing.JList excludedScopeList;
    private javax.swing.JPanel excludedScopePanel;
    private javax.swing.JCheckBox execCoveredLinesCheck;
    private javax.swing.JTextArea execDescription;
    private javax.swing.JPanel executionScenarioPanel;
    private javax.swing.JTextField executionScenarioText;
    private javax.swing.JCheckBox fsmVisualizationCheck;
    private javax.swing.JPanel generateHtmlPanel;
    private javax.swing.JButton generateHtmlReportButton;
    private javax.swing.JPanel howItWorksPanel;
    private javax.swing.JTextArea howItWorksTextArea;
    private javax.swing.JCheckBox includeCoverageCheck;
    private javax.swing.JButton includeInterfaceButton;
    private javax.swing.JList includeInterfaceList;
    private javax.swing.JPanel includeInterfacesPanel;
    private javax.swing.JPanel includeScopePanel;
    private javax.swing.JCheckBox includeValidationCheck;
    private javax.swing.JButton includedScopeButton1;
    private javax.swing.JTextField includedScopeText;
    private javax.swing.JButton inputInterfaceButton;
    private javax.swing.JList inputInterfacesList;
    private javax.swing.JPanel inputInterfacesPanel;
    private javax.swing.JPanel interfacesPanel;
    private javax.swing.JCheckBox isJunitCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JPanel lcsajPanel;
    private javax.swing.JCheckBox modelJUnitCheck;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton nextButton1;
    private javax.swing.JButton nextButton2;
    private javax.swing.JButton nextButton3;
    private javax.swing.JTextField otherExcludedScopeText;
    private javax.swing.JButton outputInterfaceButton;
    private javax.swing.JList outputInterfacesList;
    private javax.swing.JPanel outputInterfacesPanel;
    private javax.swing.JButton performValidation;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton previousButton1;
    private javax.swing.JButton previousButton2;
    private javax.swing.JButton previousButton3;
    private javax.swing.JButton proMButton;
    private javax.swing.JLabel proMLabel;
    private javax.swing.JPanel proMPanel;
    private javax.swing.JScrollPane proMScrollPane;
    private javax.swing.JTextArea proMTextArea;
    private javax.swing.JTabbedPane processTabbedPanel;
    private javax.swing.JCheckBox promXmlCheck;
    private javax.swing.JLabel providedIntefacesLabel;
    private javax.swing.JList providedInterfacesList;
    private javax.swing.JList providedInterfacesList1;
    private javax.swing.JButton removeDependComponentButton;
    private javax.swing.JButton removeInputInterfaceButton;
    private javax.swing.JButton removeInterfaceButton;
    private javax.swing.JButton removeInterfaceButton1;
    private javax.swing.JButton removeOutputInterfaceButton;
    private javax.swing.JButton removeScopeButton;
    private javax.swing.JButton removeScopeButton1;
    private javax.swing.JLabel requiredIntefacesLabel;
    private javax.swing.JList requiredInterfacesList;
    private javax.swing.JButton revertChangesButton;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JPanel scopeJPanel;
    private javax.swing.JList scopeList;
    private javax.swing.JPanel scopePanel;
    private javax.swing.JCheckBox selectAllCheck;
    private javax.swing.JButton selectComponentButton;
    private javax.swing.JButton selectMethodButton;
    private javax.swing.JTextField selectedComponentTextField;
    private javax.swing.JList selectedMethodsList;
    private javax.swing.JCheckBox stateMappingsCheck;
    private javax.swing.JPanel testGenJPanel;
    private javax.swing.JPanel testGenPanel;
    private javax.swing.JCheckBox uncoveredPathsCheck;
    private javax.swing.JPanel validationPanel;
    private javax.swing.JTabbedPane validationTabbedPane;
    private javax.swing.JCheckBox varMappingsCheck;
    // End of variables declaration//GEN-END:variables

    private void initializeCoverageHtmlReport() {
        processTabbedPanel.setEnabledAt(processTabbedPanel.getTabCount()-1, true);
        includeCoverageCheck.setEnabled(true);
        includeCoverageCheck.setSelected(true);
        execCoveredLinesCheck.setEnabled(true);
        coveredPathsCheck.setEnabled(true);
        uncoveredPathsCheck.setEnabled(true);
        cfgCheck.setEnabled(true);
        DefaultListModel model = (DefaultListModel) allMethodsList.getModel();
        for(CfgMethod method : cover.getMethodsList()){
            model.addElement(method);
        }
    }

    private void initializeValidationHtmlReport() {
        processTabbedPanel.setEnabledAt(processTabbedPanel.getTabCount()-1, true);
        includeValidationCheck.setEnabled(true);
        includeValidationCheck.setSelected(true);
        promXmlCheck.setEnabled(true);
        promXmlCheck.setSelected(true);
        stateMappingsCheck.setEnabled(true);
        stateMappingsCheck.setSelected(true);
        varMappingsCheck.setEnabled(true);
        varMappingsCheck.setSelected(true);
        modelJUnitCheck.setEnabled(true);
        modelJUnitCheck.setSelected(true);
    }
    
    private void initializeMethodsList(boolean flag){
        selectAllCheck.setEnabled(flag);
        deselectAllCheck.setEnabled(flag);
        allMethodsList.setEnabled(flag);
        selectedMethodsList.setEnabled(flag);
        selectMethodButton.setEnabled(flag);
        deselectMethodButton.setEnabled(flag);      
    }

    private void copyPromModelToGenComponent() {
        File execFile = new File(executionScenarioText.getText());
        String executionScenarioName;
        if(execFile.exists()){
            executionScenarioName = execFile.getName().substring(0, execFile.getName().indexOf("."));
        } else {
            executionScenarioName = "ExecutionScenario";
        }
        File testsDir = new File(component.getComponentDirectory() + "/tests");
        if(!testsDir.exists()){
            testsDir.mkdir();
        }
        File execGeneratedComponent = new File(component.getComponentDirectory() + "/tests/" + executionScenarioName);
        if(!execGeneratedComponent.exists()){
            execGeneratedComponent.mkdir();
        }
        Utils.copyDirectory(new File(extractedDir + "PromTrace.xml"), new File(execGeneratedComponent.toString() + "/PromTrace.xml"));
        Utils.copyDirectory(new File(extractedDir + "test.java"), new File(execGeneratedComponent.toString() + "/test.java"));
        jmodelFile = execGeneratedComponent.toString() + "/test.java";
        promTraceFile = execGeneratedComponent.toString() + "/PromTrace.xml";
    }
    
    private void initComponentClassesDependClasses(String componentSrc){
        componentClassesList = getcomponentClassesList(componentSrc);
        excludeDependClasses = new ArrayList<String>();
        List<String> componentQualifiedClasses = new ArrayList<String>();
        for(String componentClass : componentClassesList){
            componentQualifiedClasses.add(Utils.getThePackage(componentClass, true));
        }
        DefaultListModel dependModel = (DefaultListModel) dependanceList.getModel();
        if(!dependModel.isEmpty()){
            for(int i = 0; i < dependModel.size(); i++){
                GeneratedComponent dependComponent = reuseProject.getComponent(dependModel.getElementAt(i).toString());
                List<String> dependComponentClassesList = getcomponentClassesList(dependComponent.getComponentSourceFolder());
                for(String dependClass : dependComponentClassesList){
                    String dependQualifiedName = Utils.getThePackage(dependClass, true);
                    if(!componentQualifiedClasses.contains(dependQualifiedName)){
                        componentClassesList.add(dependClass);
                        componentQualifiedClasses.add(dependQualifiedName);
                        excludeDependClasses.add(dependQualifiedName);
                    }
                }
            }
        }
    }
    
    private void initializeWorkSpace(){
        deleteTmpDirCheck.setSelected(true);
        includeCoverageCheck.setEnabled(false);
        includeCoverageCheck.setSelected(false);
        execCoveredLinesCheck.setEnabled(false);
        execCoveredLinesCheck.setSelected(false);
        coveredPathsCheck.setEnabled(false);
        coveredPathsCheck.setSelected(false);
        uncoveredPathsCheck.setEnabled(false);
        uncoveredPathsCheck.setSelected(false);
        cfgCheck.setEnabled(false);
        cfgCheck.setSelected(false);
        includeValidationCheck.setEnabled(false);
        includeValidationCheck.setSelected(false);
        promXmlCheck.setEnabled(false);
        promXmlCheck.setSelected(false);
        stateMappingsCheck.setEnabled(false);
        stateMappingsCheck.setSelected(false);
        varMappingsCheck.setEnabled(false);
        varMappingsCheck.setSelected(false);
        fsmVisualizationCheck.setSelected(false);
        fsmVisualizationCheck.setEnabled(false);
        modelJUnitCheck.setEnabled(false);
        modelJUnitCheck.setSelected(false);
        aspectJTextArea.setText("");
//        componentLcsajCoverage.setText("");
//        componentStmtCoverage.setText("");
        validationTabbedPane.setSelectedIndex(0);
        ((DefaultListModel) allMethodsList.getModel()).removeAllElements();
        ((DefaultListModel) selectedMethodsList.getModel()).removeAllElements();
        initializeMethodsList(false);
        
//        DefaultTableModel modelCov = (DefaultTableModel) LcsajCoverageTable.getModel();
//        while(modelCov.getRowCount() != 0){
//            modelCov.removeRow(0);
//        }

        for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
            if(processTabbedPanel.getTitleAt(i).equals("Html Report") 
                    || (processTabbedPanel.getTitleAt(i).equals("ProM MXML File"))
                    || (processTabbedPanel.getTitleAt(i).equals("Coverage"))
                    || (processTabbedPanel.getTitleAt(i).equals("Validation"))
                    ){
                processTabbedPanel.setEnabledAt(i, false);
            }
        }
        
        for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
            if (processTabbedPanel.getTitleAt(i).equals("State Mapping")) {
                processTabbedPanel.remove(i);
            }
        }

        for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
            if (processTabbedPanel.getTitleAt(i).equals("Mappings")) {
                processTabbedPanel.remove(i);
            }
        }
        
        for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
            if (processTabbedPanel.getTitleAt(i).equals("FSM Visualization")) {
                processTabbedPanel.remove(i);
            }
        }
        
        for (int i = 0; i < processTabbedPanel.getTabCount(); i++) {
            if (processTabbedPanel.getTitleAt(i).equals("ModelJUnit File")) {
                processTabbedPanel.remove(i);
            }
        }
        coverageTabpanel.removeAll();
        classUnderTestComboBox.removeAllItems();
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
}
