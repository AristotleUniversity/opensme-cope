/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ModelJUnitPanel.java
 *
 * Created on Aug 3, 2011, 1:05:57 PM
 */
package eu.opensme.cope.componentvalidator.ui;

import eu.opensme.cope.componentvalidator.util.Utils;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author barius
 */
public class ModelJUnitPanel extends javax.swing.JPanel {
    List<String> componentLibrariesList = new ArrayList<String>();
    List<String> componentClassesList = new ArrayList<String>();
    String componentSourceFolder;
    private String tmpFolderDir;
    private String jmodelFile;
    private String compiledDir;
    private String librariesDir;
    private String filePath;
    private String revert;
    
    /** Creates new form ModelJUnitPanel */
    public ModelJUnitPanel(String tmpFolderDir, String compiledDir, String librariesDir, String jmodelFile) {
        initComponents();
        this.tmpFolderDir = tmpFolderDir;
        this.jmodelFile = jmodelFile;
        this.compiledDir = compiledDir;
        this.librariesDir = librariesDir;
    }

    public ModelJUnitPanel loadModelJUnitFile(String path) {
        FileReader readTextFile;
        filePath = path;
        try {
            readTextFile = new FileReader(path);
            //Create a scanner object from FileReader
            Scanner fileReaderScan = new Scanner(readTextFile);

            this.ModelJUnitTextArea.setText("");

            //Put all text from text file into created String
            revert = "";
            while (fileReaderScan.hasNextLine()) {
                 revert += fileReaderScan.nextLine() + "\n";
                
            }
            this.ModelJUnitTextArea.append(revert);
        } catch (FileNotFoundException ex) {
        }
        
        return this;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ModelJUnitExecuteButton = new javax.swing.JButton();
        ModelJUnitSaveButton = new javax.swing.JButton();
        ProcessTabbedPane = new javax.swing.JTabbedPane();
        ModelJUnitScrollPane = new javax.swing.JScrollPane();
        ModelJUnitTextArea = new javax.swing.JTextArea();
        resultsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResultsTextArea = new javax.swing.JTextArea();
        revertButton = new javax.swing.JButton();

        ModelJUnitExecuteButton.setText("Generate Functional Tests");
        ModelJUnitExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModelJUnitExecuteButtonActionPerformed(evt);
            }
        });

        ModelJUnitSaveButton.setText("Save to test file");
        ModelJUnitSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModelJUnitSaveButtonActionPerformed(evt);
            }
        });

        ModelJUnitTextArea.setColumns(20);
        ModelJUnitTextArea.setRows(5);
        ModelJUnitScrollPane.setViewportView(ModelJUnitTextArea);

        ProcessTabbedPane.addTab("Test File", ModelJUnitScrollPane);

        ResultsTextArea.setColumns(20);
        ResultsTextArea.setRows(5);
        jScrollPane1.setViewportView(ResultsTextArea);

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addContainerGap())
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addContainerGap())
        );

        ProcessTabbedPane.addTab("Results", resultsPanel);

        revertButton.setText("Revert");
        revertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ModelJUnitSaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(revertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                        .addComponent(ModelJUnitExecuteButton))
                    .addComponent(ProcessTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ProcessTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ModelJUnitExecuteButton)
                    .addComponent(ModelJUnitSaveButton)
                    .addComponent(revertButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ModelJUnitExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModelJUnitExecuteButtonActionPerformed
        createTmpDirs();
        //JOptionPane.showMessageDialog(null, "To generate Functional Test: \n1) Insert \"test.java\" file, located in tests/[executionScenarioName] folder, in your IDE's project \n2) Add modeljunit.jar, junit.jar and easymock.jar libraries to your classpath \n3)Run \"test.java\"","Generated Functional Tests",JOptionPane.INFORMATION_MESSAGE);
        ModelJUnitLibraryJDialog modelJUnitDialog = new ModelJUnitLibraryJDialog(new JFrame(), true);
        modelJUnitDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        modelJUnitDialog.setTitle("Locate ModelJUnit Library");
        modelJUnitDialog.setVisible(true);
        
        if (modelJUnitDialog.getModelJunitLibraryPath().length() != 0) {

            String oldClassPath = System.getProperty("java.class.path");

            Utils.setClassPath("");
            Utils.addToClassPath(compiledDir);
            Utils.addToClassPath(modelJUnitDialog.getModelJunitLibraryPath());
            Utils.addToClassPath(librariesDir + "junit-4.4.jar");
            Utils.addToClassPath(librariesDir + "easymock.jar");

            List<String> externalJars = new ArrayList<String>();
            externalJars.add(compiledDir);
            externalJars.add(modelJUnitDialog.getModelJunitLibraryPath());

            for (int i = 0; i < componentLibrariesList.size(); i++) {
                Utils.addToClassPath(componentLibrariesList.get(i));
                externalJars.add(componentLibrariesList.get(i));
            }
            try {
                Utils.addtoURLClassLoader(externalJars);
            } catch (Exception ex) {
            }


            Utils.addToClassPath(componentSourceFolder);

            try {
                String results = Utils.execPlainScenario(jmodelFile, compiledDir, componentClassesList, true);
                if(results == null){
                    JOptionPane.showMessageDialog(null, "Error: Fuctional Tests not Generated","Error",JOptionPane.ERROR_MESSAGE);
                    deleteTmpDirs();
                    return;
                } else {
                    ResultsTextArea.setText(results);
                }
            } catch (Exception e) {
            }
            Utils.setClassPath(oldClassPath);
            deleteTmpDirs();
            JOptionPane.showMessageDialog(null, "Functional Tests Generated!","Generated Functional Tests",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ModelJUnitExecuteButtonActionPerformed

    private void createTmpDirs(){
    Utils.createDir(tmpFolderDir);
    Utils.createDir(compiledDir);
}   

private void deleteTmpDirs(){
    Utils.deleteDirectory(new File(tmpFolderDir));
}   

    private void ModelJUnitSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModelJUnitSaveButtonActionPerformed
        {
            try {
                FileWriter fstream = new FileWriter(filePath);
                BufferedWriter out = new BufferedWriter(fstream);
                out.write(this.ModelJUnitTextArea.getText());
                out.close();
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
            }
            revert = this.ModelJUnitTextArea.getText();
        }
    }//GEN-LAST:event_ModelJUnitSaveButtonActionPerformed

private void revertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertButtonActionPerformed
    this.ModelJUnitTextArea.setText(revert);
}//GEN-LAST:event_revertButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ModelJUnitExecuteButton;
    private javax.swing.JButton ModelJUnitSaveButton;
    private javax.swing.JScrollPane ModelJUnitScrollPane;
    private javax.swing.JTextArea ModelJUnitTextArea;
    private javax.swing.JTabbedPane ProcessTabbedPane;
    private javax.swing.JTextArea ResultsTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JButton revertButton;
    // End of variables declaration//GEN-END:variables
}
